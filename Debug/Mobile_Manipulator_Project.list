
Mobile_Manipulator_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080084f8  080084f8  000184f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008a38  08008a38  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a38  08008a38  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001dc  08008c1c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08008c1c  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012847  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b76  00000000  00000000  00032a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000355c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bbe  00000000  00000000  00037648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b96  00000000  00000000  00051206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4a6  00000000  00000000  00065d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000570c  00000000  00000000  000f5294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080084e0 	.word	0x080084e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080084e0 	.word	0x080084e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <map>:
#include "JETANK_motion.h"

double map(double x, double in_min, double in_max, double out_min, double out_max)
{
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ad2:	e9c7 2300 	strd	r2, r3, [r7]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ade:	f7ff fb43 	bl	8000168 <__aeabi_dsub>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4614      	mov	r4, r2
 8000ae8:	461d      	mov	r5, r3
 8000aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000aee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000af2:	f7ff fb39 	bl	8000168 <__aeabi_dsub>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4620      	mov	r0, r4
 8000afc:	4629      	mov	r1, r5
 8000afe:	f7ff fceb 	bl	80004d8 <__aeabi_dmul>
 8000b02:	4602      	mov	r2, r0
 8000b04:	460b      	mov	r3, r1
 8000b06:	4614      	mov	r4, r2
 8000b08:	461d      	mov	r5, r3
 8000b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b12:	f7ff fb29 	bl	8000168 <__aeabi_dsub>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	f7ff fe05 	bl	800072c <__aeabi_ddiv>
 8000b22:	4602      	mov	r2, r0
 8000b24:	460b      	mov	r3, r1
 8000b26:	4610      	mov	r0, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000b2e:	f7ff fb1d 	bl	800016c <__adddf3>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
}
 8000b36:	4610      	mov	r0, r2
 8000b38:	4619      	mov	r1, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bdb0      	pop	{r4, r5, r7, pc}

08000b40 <pca9685_init>:

bool pca9685_init(I2C_HandleTypeDef* hi2c){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	assert(hi2c != NULL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <pca9685_init+0x1a>
 8000b4e:	4b5e      	ldr	r3, [pc, #376]	; (8000cc8 <pca9685_init+0x188>)
 8000b50:	4a5e      	ldr	r2, [pc, #376]	; (8000ccc <pca9685_init+0x18c>)
 8000b52:	2109      	movs	r1, #9
 8000b54:	485e      	ldr	r0, [pc, #376]	; (8000cd0 <pca9685_init+0x190>)
 8000b56:	f004 fe7f 	bl	8005858 <__assert_func>
	//hi2c_handle = hi2c;
	bool success = true;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Set mode registers to default values (Auto-Increment, Sleep, Open-Drain).
	// totem pole
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000b60:	2330      	movs	r3, #48	; 0x30
 8000b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode2_reg_default_value = 0b00000100u;
 8000b66:	2304      	movs	r3, #4
 8000b68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// frequency : 1kHz
	//double frequency = 1000;
	//uint8_t prescaler_defalut_value = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
	//uint8_t prescaler_defalut_value = 0;// f = max
	uint8_t prescaler_defalut_value = 121; // f = 50Hz
 8000b6c:	2379      	movs	r3, #121	; 0x79
 8000b6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t transmit1[] = {MODE1_REG_ADDR, mode1_reg_default_value};
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3020 	strb.w	r3, [r7, #32]
 8000b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, transmit1, 2, 10) == HAL_OK);
 8000b80:	f107 0220 	add.w	r2, r7, #32
 8000b84:	230a      	movs	r3, #10
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2302      	movs	r3, #2
 8000b8a:	21c0      	movs	r1, #192	; 0xc0
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f002 fa69 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bf14      	ite	ne
 8000baa:	2301      	movne	r3, #1
 8000bac:	2300      	moveq	r3, #0
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t transmit2[] = {MODE2_REG_ADDR, mode2_reg_default_value};
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	773b      	strb	r3, [r7, #28]
 8000bb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000bba:	777b      	strb	r3, [r7, #29]
	success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, transmit2, 2, 10) == HAL_OK);
 8000bbc:	f107 021c 	add.w	r2, r7, #28
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	21c0      	movs	r1, #192	; 0xc0
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f002 fa4b 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t transmit3[] = {PRESCALER_REG_ADDR, prescaler_defalut_value};
 8000bee:	23fe      	movs	r3, #254	; 0xfe
 8000bf0:	763b      	strb	r3, [r7, #24]
 8000bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf6:	767b      	strb	r3, [r7, #25]
	success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, transmit3, 2, 10) == HAL_OK);
 8000bf8:	f107 0218 	add.w	r2, r7, #24
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2302      	movs	r3, #2
 8000c02:	21c0      	movs	r1, #192	; 0xc0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f002 fa2d 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mode1_reg_default_value &= ~(0x01 << SLEEP_BIT);
 8000c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c2e:	f023 0310 	bic.w	r3, r3, #16
 8000c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t transmit4[] = {MODE1_REG_ADDR, mode1_reg_default_value};
 8000c36:	2300      	movs	r3, #0
 8000c38:	753b      	strb	r3, [r7, #20]
 8000c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c3e:	757b      	strb	r3, [r7, #21]
	success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, transmit4, 2, 10) == HAL_OK);
 8000c40:	f107 0214 	add.w	r2, r7, #20
 8000c44:	230a      	movs	r3, #10
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2302      	movs	r3, #2
 8000c4a:	21c0      	movs	r1, #192	; 0xc0
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f002 fa09 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf0c      	ite	eq
 8000c58:	2301      	moveq	r3, #1
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	HAL_Delay(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f001 fd40 	bl	80026f8 <HAL_Delay>
	//all LED pin off
	uint8_t data[] = {ALL_LED_ON_L, 0x00, 0x00, 0x00, 0x10};
 8000c78:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <pca9685_init+0x194>)
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c82:	6018      	str	r0, [r3, #0]
 8000c84:	3304      	adds	r3, #4
 8000c86:	7019      	strb	r1, [r3, #0]
	success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, data, 5, 10) == HAL_OK);
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2305      	movs	r3, #5
 8000c92:	21c0      	movs	r1, #192	; 0xc0
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f002 f9e5 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2301      	moveq	r3, #1
 8000ca2:	2300      	movne	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return success;
 8000cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	080084f8 	.word	0x080084f8
 8000ccc:	0800861c 	.word	0x0800861c
 8000cd0:	08008508 	.word	0x08008508
 8000cd4:	08008524 	.word	0x08008524

08000cd8 <pin_state>:

void pin_state(I2C_HandleTypeDef* hi2c, const uint8_t PIN_ADDR, const int _STATE){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	72fb      	strb	r3, [r7, #11]
	uint8_t on_data[] = {PIN_ADDR, 0x00, 0x10, 0x00, 0x00};
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	763b      	strb	r3, [r7, #24]
 8000cea:	2300      	movs	r3, #0
 8000cec:	767b      	strb	r3, [r7, #25]
 8000cee:	2310      	movs	r3, #16
 8000cf0:	76bb      	strb	r3, [r7, #26]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	76fb      	strb	r3, [r7, #27]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	773b      	strb	r3, [r7, #28]
	uint8_t off_data[] = {PIN_ADDR, 0x00, 0x00, 0x00, 0x10};
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	743b      	strb	r3, [r7, #16]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	747b      	strb	r3, [r7, #17]
 8000d02:	2300      	movs	r3, #0
 8000d04:	74bb      	strb	r3, [r7, #18]
 8000d06:	2300      	movs	r3, #0
 8000d08:	74fb      	strb	r3, [r7, #19]
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	753b      	strb	r3, [r7, #20]

	if(_STATE == _SET){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10f      	bne.n	8000d34 <pin_state+0x5c>
		if(HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, on_data, 5, 100) != HAL_OK){
 8000d14:	f107 0218 	add.w	r2, r7, #24
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	21c0      	movs	r1, #192	; 0xc0
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f002 f99f 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d015      	beq.n	8000d58 <pin_state+0x80>
			printf("transmit error1 \r\n");
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <pin_state+0x88>)
 8000d2e:	f005 fc33 	bl	8006598 <puts>
	else if(_STATE == _CLEAR){
		if(HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, off_data, 5, 100) != HAL_OK){
			printf("transmit error3 \r\n");
		}
	}
}
 8000d32:	e011      	b.n	8000d58 <pin_state+0x80>
	else if(_STATE == _CLEAR){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <pin_state+0x80>
		if(HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, off_data, 5, 100) != HAL_OK){
 8000d3a:	f107 0210 	add.w	r2, r7, #16
 8000d3e:	2364      	movs	r3, #100	; 0x64
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2305      	movs	r3, #5
 8000d44:	21c0      	movs	r1, #192	; 0xc0
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f002 f98c 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <pin_state+0x80>
			printf("transmit error3 \r\n");
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <pin_state+0x8c>)
 8000d54:	f005 fc20 	bl	8006598 <puts>
}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800852c 	.word	0x0800852c
 8000d64:	08008540 	.word	0x08008540

08000d68 <set_motor_dir>:

void set_motor_dir(I2C_HandleTypeDef* hi2c, const int _MOTOR, int _DIR){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	if(_MOTOR == _MOTOR_A){
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d11a      	bne.n	8000db0 <set_motor_dir+0x48>
		if(_DIR == CW){//AIN1_REG_ADDR : 1 , AIN2_REG_ADDR : 0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10a      	bne.n	8000d96 <set_motor_dir+0x2e>
			pin_state(hi2c, AIN1_REG_ADDR, _SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	212e      	movs	r1, #46	; 0x2e
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff ffa7 	bl	8000cd8 <pin_state>
			pin_state(hi2c, AIN2_REG_ADDR, _CLEAR);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	212a      	movs	r1, #42	; 0x2a
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ffa2 	bl	8000cd8 <pin_state>
 8000d94:	e00c      	b.n	8000db0 <set_motor_dir+0x48>
		}
		else if(_DIR == CCW){ //AIN1_REG_ADDR : 0 , AIN2_REG_ADDR : 1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d109      	bne.n	8000db0 <set_motor_dir+0x48>
			pin_state(hi2c, AIN1_REG_ADDR, _CLEAR);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	212e      	movs	r1, #46	; 0x2e
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f7ff ff99 	bl	8000cd8 <pin_state>
			pin_state(hi2c, AIN2_REG_ADDR, _SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	212a      	movs	r1, #42	; 0x2a
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff ff94 	bl	8000cd8 <pin_state>
		}

	}
	if(_MOTOR == _MOTOR_B){
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b0b      	cmp	r3, #11
 8000db4:	d11a      	bne.n	8000dec <set_motor_dir+0x84>
		if(_DIR == CW){//BIN1_REG_ADDR : 1 , BIN2_REG_ADDR : 0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10a      	bne.n	8000dd2 <set_motor_dir+0x6a>
			pin_state(hi2c, BIN1_REG_ADDR, _SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2132      	movs	r1, #50	; 0x32
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f7ff ff89 	bl	8000cd8 <pin_state>
			pin_state(hi2c, BIN2_REG_ADDR, _CLEAR);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2136      	movs	r1, #54	; 0x36
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff ff84 	bl	8000cd8 <pin_state>
		else if(_DIR == CCW){ //BIN1_REG_ADDR : 0 , BIN2_REG_ADDR : 1
			pin_state(hi2c, BIN1_REG_ADDR, _CLEAR);
			pin_state(hi2c, BIN2_REG_ADDR, _SET);
		}
	}
}
 8000dd0:	e00c      	b.n	8000dec <set_motor_dir+0x84>
		else if(_DIR == CCW){ //BIN1_REG_ADDR : 0 , BIN2_REG_ADDR : 1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d109      	bne.n	8000dec <set_motor_dir+0x84>
			pin_state(hi2c, BIN1_REG_ADDR, _CLEAR);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2132      	movs	r1, #50	; 0x32
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ff7b 	bl	8000cd8 <pin_state>
			pin_state(hi2c, BIN2_REG_ADDR, _SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2136      	movs	r1, #54	; 0x36
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff ff76 	bl	8000cd8 <pin_state>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	0000      	movs	r0, r0
	...

08000df8 <set_motor_power>:

bool set_motor_power(I2C_HandleTypeDef* hi2c, const int _MOTOR, double power){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	e9c7 2300 	strd	r2, r3, [r7]
	if(power > 100 || power < 0 ) return false;
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <set_motor_power+0x178>)
 8000e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e10:	f7ff fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10a      	bne.n	8000e30 <set_motor_power+0x38>
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	f04f 0300 	mov.w	r3, #0
 8000e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e26:	f7ff fdc9 	bl	80009bc <__aeabi_dcmplt>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <set_motor_power+0x3c>
 8000e30:	2300      	movs	r3, #0
 8000e32:	e093      	b.n	8000f5c <set_motor_power+0x164>
	bool success = true;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	//power: 0 ~ 100 => duty ratio 0 ~ 20% (0~819)
	uint16_t duty = (uint16_t)round((power/100.0f)*4095);
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <set_motor_power+0x178>)
 8000e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e44:	f7ff fc72 	bl	800072c <__aeabi_ddiv>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	a345      	add	r3, pc, #276	; (adr r3, 8000f68 <set_motor_power+0x170>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fb3f 	bl	80004d8 <__aeabi_dmul>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f007 fac5 	bl	80083f0 <round>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fe0b 	bl	8000a88 <__aeabi_d2uiz>
 8000e72:	4603      	mov	r3, r0
 8000e74:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t duty_L = duty & (uint8_t)0xFF;
 8000e76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t duty_H = duty >> 8;
 8000e7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	if(_MOTOR == _MOTOR_A){ // PWMA_REG_ADDR
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b0a      	cmp	r3, #10
 8000e8a:	d131      	bne.n	8000ef0 <set_motor_power+0xf8>
		uint16_t on_time = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t off_time = on_time + duty;
 8000e90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e94:	4413      	add	r3, r2
 8000e96:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint8_t data[] = {PWMA_REG_ADDR, on_time&0xFF, (on_time>>8) , off_time&0xFF, (off_time>>8)};
 8000e98:	2326      	movs	r3, #38	; 0x26
 8000e9a:	773b      	strb	r3, [r7, #28]
 8000e9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	777b      	strb	r3, [r7, #29]
 8000ea2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	77bb      	strb	r3, [r7, #30]
 8000eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	77fb      	strb	r3, [r7, #31]
 8000eb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f887 3020 	strb.w	r3, [r7, #32]
		success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, data, 5, 10) == HAL_OK);
 8000ebe:	f107 021c 	add.w	r2, r7, #28
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	21c0      	movs	r1, #192	; 0xc0
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f002 f8ca 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2301      	moveq	r3, #1
 8000ed8:	2300      	movne	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_MOTOR == _MOTOR_B){ // PWMB_REG_ADDR
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b0b      	cmp	r3, #11
 8000ef4:	d130      	bne.n	8000f58 <set_motor_power+0x160>
		uint16_t on_time = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t off_time = on_time + duty;
 8000efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000efc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000efe:	4413      	add	r3, r2
 8000f00:	847b      	strh	r3, [r7, #34]	; 0x22
		uint8_t data[] = {PWMB_REG_ADDR, on_time&0xFF, (on_time>>8) , off_time&0xFF, (off_time>>8)};
 8000f02:	233a      	movs	r3, #58	; 0x3a
 8000f04:	753b      	strb	r3, [r7, #20]
 8000f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	757b      	strb	r3, [r7, #21]
 8000f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	75bb      	strb	r3, [r7, #22]
 8000f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	75fb      	strb	r3, [r7, #23]
 8000f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	763b      	strb	r3, [r7, #24]
		success &= (HAL_I2C_Master_Transmit(hi2c, PCA9685_ADDR, data, 5, 10) == HAL_OK);
 8000f26:	f107 0214 	add.w	r2, r7, #20
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2305      	movs	r3, #5
 8000f30:	21c0      	movs	r1, #192	; 0xc0
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f002 f896 	bl	8003064 <HAL_I2C_Master_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return success;
 8000f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	40affe00 	.word	0x40affe00
 8000f70:	40590000 	.word	0x40590000

08000f74 <turnRight>:



void turnRight(I2C_HandleTypeDef* hi2c, double diff){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	e9c7 2300 	strd	r2, r3, [r7]
	double power = abs(diff);
 8000f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f84:	f7ff fd58 	bl	8000a38 <__aeabi_d2iz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bfb8      	it	lt
 8000f8e:	425b      	neglt	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fa37 	bl	8000404 <__aeabi_i2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	set_motor_dir(hi2c, _RIGHT_MOTOR, CW);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	210b      	movs	r1, #11
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fee0 	bl	8000d68 <set_motor_dir>
	set_motor_dir(hi2c, _LEFT_MOTOR, CCW);
 8000fa8:	2202      	movs	r2, #2
 8000faa:	210a      	movs	r1, #10
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fedb 	bl	8000d68 <set_motor_dir>
	set_motor_power(hi2c, _RIGHT_MOTOR, power);
 8000fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fb6:	210b      	movs	r1, #11
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff ff1d 	bl	8000df8 <set_motor_power>
	set_motor_power(hi2c, _LEFT_MOTOR, power);
 8000fbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fc2:	210a      	movs	r1, #10
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff ff17 	bl	8000df8 <set_motor_power>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <turnLeft>:
void turnLeft(I2C_HandleTypeDef* hi2c, double diff){
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	e9c7 2300 	strd	r2, r3, [r7]
	double power = abs(diff);
 8000fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe2:	f7ff fd29 	bl	8000a38 <__aeabi_d2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bfb8      	it	lt
 8000fec:	425b      	neglt	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa08 	bl	8000404 <__aeabi_i2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	set_motor_dir(hi2c, _RIGHT_MOTOR, CCW);
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	210b      	movs	r1, #11
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff feb1 	bl	8000d68 <set_motor_dir>
	set_motor_dir(hi2c, _LEFT_MOTOR, CW);
 8001006:	2201      	movs	r2, #1
 8001008:	210a      	movs	r1, #10
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff feac 	bl	8000d68 <set_motor_dir>
	set_motor_power(hi2c, _RIGHT_MOTOR, power);
 8001010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001014:	210b      	movs	r1, #11
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff feee 	bl	8000df8 <set_motor_power>
	set_motor_power(hi2c, _LEFT_MOTOR, power);
 800101c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001020:	210a      	movs	r1, #10
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fee8 	bl	8000df8 <set_motor_power>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <stop>:
void stop(I2C_HandleTypeDef* hi2c){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	set_motor_power(hi2c, _RIGHT_MOTOR, 0);
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	210b      	movs	r1, #11
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fed8 	bl	8000df8 <set_motor_power>
	set_motor_power(hi2c, _LEFT_MOTOR, 0);
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	210a      	movs	r1, #10
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fed0 	bl	8000df8 <set_motor_power>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <move_go>:

void move_go(I2C_HandleTypeDef* hi2c, double power, double diff){
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	e9c7 2300 	strd	r2, r3, [r7]
	double right_power = power - (diff * 0.2f);
 800106c:	a33e      	add	r3, pc, #248	; (adr r3, 8001168 <move_go+0x108>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001076:	f7ff fa2f 	bl	80004d8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001082:	f7ff f871 	bl	8000168 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double left_power = power + (diff * 0.2f);
 800108e:	a336      	add	r3, pc, #216	; (adr r3, 8001168 <move_go+0x108>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001098:	f7ff fa1e 	bl	80004d8 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a4:	f7ff f862 	bl	800016c <__adddf3>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(right_power > 100) right_power = 100;
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <move_go+0x110>)
 80010b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ba:	f7ff fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <move_go+0x6e>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <move_go+0x110>)
 80010ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(right_power < 0) right_power = 0;
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010da:	f7ff fc6f 	bl	80009bc <__aeabi_dcmplt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <move_go+0x90>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(left_power > 100) left_power = 100;
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <move_go+0x110>)
 80010f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fa:	f7ff fc7d 	bl	80009f8 <__aeabi_dcmpgt>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <move_go+0xae>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <move_go+0x110>)
 800110a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(left_power < 0) left_power = 0;
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <move_go+0xd0>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	set_motor_dir(hi2c, _RIGHT_MOTOR, CCW);
 8001130:	2202      	movs	r2, #2
 8001132:	210b      	movs	r1, #11
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff fe17 	bl	8000d68 <set_motor_dir>
	set_motor_dir(hi2c, _LEFT_MOTOR, CCW);
 800113a:	2202      	movs	r2, #2
 800113c:	210a      	movs	r1, #10
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fe12 	bl	8000d68 <set_motor_dir>
	set_motor_power(hi2c, _RIGHT_MOTOR, right_power);
 8001144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001148:	210b      	movs	r1, #11
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fe54 	bl	8000df8 <set_motor_power>
	set_motor_power(hi2c, _LEFT_MOTOR, left_power);
 8001150:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001154:	210a      	movs	r1, #10
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff fe4e 	bl	8000df8 <set_motor_power>
}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	f3af 8000 	nop.w
 8001168:	a0000000 	.word	0xa0000000
 800116c:	3fc99999 	.word	0x3fc99999
 8001170:	40590000 	.word	0x40590000
 8001174:	00000000 	.word	0x00000000

08001178 <move_back>:

void move_back(I2C_HandleTypeDef* hi2c, double power, double diff){
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	e9c7 2300 	strd	r2, r3, [r7]
	double right_power = power - (diff * 0.2f);
 8001184:	a33e      	add	r3, pc, #248	; (adr r3, 8001280 <move_back+0x108>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800119a:	f7fe ffe5 	bl	8000168 <__aeabi_dsub>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double left_power = power + (diff * 0.2f);
 80011a6:	a336      	add	r3, pc, #216	; (adr r3, 8001280 <move_back+0x108>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011bc:	f7fe ffd6 	bl	800016c <__adddf3>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(right_power > 100) right_power = 100;
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <move_back+0x110>)
 80011ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011d2:	f7ff fc11 	bl	80009f8 <__aeabi_dcmpgt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <move_back+0x6e>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <move_back+0x110>)
 80011e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(right_power < 0) right_power = 0;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011f2:	f7ff fbe3 	bl	80009bc <__aeabi_dcmplt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <move_back+0x90>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if(left_power > 100) left_power = 100;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <move_back+0x110>)
 800120e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001212:	f7ff fbf1 	bl	80009f8 <__aeabi_dcmpgt>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <move_back+0xae>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <move_back+0x110>)
 8001222:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(left_power < 0) left_power = 0;
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001232:	f7ff fbc3 	bl	80009bc <__aeabi_dcmplt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <move_back+0xd0>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]

	set_motor_dir(hi2c, _RIGHT_MOTOR, CW);
 8001248:	2201      	movs	r2, #1
 800124a:	210b      	movs	r1, #11
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fd8b 	bl	8000d68 <set_motor_dir>
	set_motor_dir(hi2c, _LEFT_MOTOR, CW);
 8001252:	2201      	movs	r2, #1
 8001254:	210a      	movs	r1, #10
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fd86 	bl	8000d68 <set_motor_dir>
	set_motor_power(hi2c, _RIGHT_MOTOR, right_power);
 800125c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001260:	210b      	movs	r1, #11
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fdc8 	bl	8000df8 <set_motor_power>
	set_motor_power(hi2c, _LEFT_MOTOR, left_power);
 8001268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800126c:	210a      	movs	r1, #10
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fdc2 	bl	8000df8 <set_motor_power>
}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	a0000000 	.word	0xa0000000
 8001284:	3fc99999 	.word	0x3fc99999
 8001288:	40590000 	.word	0x40590000

0800128c <channel_to_motion>:

void channel_to_motion(I2C_HandleTypeDef* hi2c, uint32_t ch1, uint32_t ch2){
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af06      	add	r7, sp, #24
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	//channel exception handling
	if(ch1 > 1600) ch1 = 1600;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800129e:	d903      	bls.n	80012a8 <channel_to_motion+0x1c>
 80012a0:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	e006      	b.n	80012b6 <channel_to_motion+0x2a>
	else if(ch1 < 600) ch1 = 600;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80012ae:	d202      	bcs.n	80012b6 <channel_to_motion+0x2a>
 80012b0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80012b4:	60bb      	str	r3, [r7, #8]
	if(ch2 > 1600) ch2 = 1600;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012bc:	d903      	bls.n	80012c6 <channel_to_motion+0x3a>
 80012be:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	e006      	b.n	80012d4 <channel_to_motion+0x48>
	else if(ch2 < 600) ch2 = 600;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80012cc:	d202      	bcs.n	80012d4 <channel_to_motion+0x48>
 80012ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 80012d2:	607b      	str	r3, [r7, #4]

	//channel to power range : 600us ~ 1600us  => -100 ~ 100
	//channel to diff range : 500us ~ 1600us => 0 ~ 100
	double power = map((double)ch2, 600, 1600, -100, 100);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f885 	bl	80003e4 <__aeabi_ui2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b62      	ldr	r3, [pc, #392]	; (8001468 <channel_to_motion+0x1dc>)
 80012e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b60      	ldr	r3, [pc, #384]	; (800146c <channel_to_motion+0x1e0>)
 80012ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <channel_to_motion+0x1e4>)
 80012f4:	e9cd 2300 	strd	r2, r3, [sp]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <channel_to_motion+0x1e8>)
 80012fe:	f7ff fbe3 	bl	8000ac8 <map>
 8001302:	e9c7 0106 	strd	r0, r1, [r7, #24]
	double diff = map((double)ch1, 600, 1600, -100, 100);
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7ff f86c 	bl	80003e4 <__aeabi_ui2d>
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <channel_to_motion+0x1dc>)
 8001312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <channel_to_motion+0x1e0>)
 800131c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <channel_to_motion+0x1e4>)
 8001326:	e9cd 2300 	strd	r2, r3, [sp]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <channel_to_motion+0x1e8>)
 8001330:	f7ff fbca 	bl	8000ac8 <map>
 8001334:	e9c7 0104 	strd	r0, r1, [r7, #16]

	//stop state
	if(power < _MOTOR_STOP_BOUND && power > -_MOTOR_STOP_BOUND
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <channel_to_motion+0x1ec>)
 800133e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001342:	f7ff fb3b 	bl	80009bc <__aeabi_dcmplt>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <channel_to_motion+0x104>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b4a      	ldr	r3, [pc, #296]	; (800147c <channel_to_motion+0x1f0>)
 8001352:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001356:	f7ff fb4f 	bl	80009f8 <__aeabi_dcmpgt>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d017      	beq.n	8001390 <channel_to_motion+0x104>
			&& diff < _MOTOR_STOP_BOUND && diff > -_MOTOR_STOP_BOUND){
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b44      	ldr	r3, [pc, #272]	; (8001478 <channel_to_motion+0x1ec>)
 8001366:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800136a:	f7ff fb27 	bl	80009bc <__aeabi_dcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00d      	beq.n	8001390 <channel_to_motion+0x104>
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <channel_to_motion+0x1f0>)
 800137a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800137e:	f7ff fb3b 	bl	80009f8 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <channel_to_motion+0x104>
		stop(hi2c);
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fe51 	bl	8001030 <stop>
		return;
 800138e:	e068      	b.n	8001462 <channel_to_motion+0x1d6>
	}

	// rotation state
	if(power < _MOTOR_STOP_BOUND && power > -_MOTOR_STOP_BOUND ){
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <channel_to_motion+0x1ec>)
 8001396:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800139a:	f7ff fb0f 	bl	80009bc <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d02a      	beq.n	80013fa <channel_to_motion+0x16e>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <channel_to_motion+0x1f0>)
 80013aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ae:	f7ff fb23 	bl	80009f8 <__aeabi_dcmpgt>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <channel_to_motion+0x16e>
		if(diff > _MOTOR_STOP_BOUND){
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <channel_to_motion+0x1ec>)
 80013be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c2:	f7ff fb19 	bl	80009f8 <__aeabi_dcmpgt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <channel_to_motion+0x14c>
			turnRight(hi2c, diff);
 80013cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fdcf 	bl	8000f74 <turnRight>
		}
		else if(diff < -_MOTOR_STOP_BOUND){
			turnLeft(hi2c, diff);
		}

		return;
 80013d6:	e044      	b.n	8001462 <channel_to_motion+0x1d6>
		else if(diff < -_MOTOR_STOP_BOUND){
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <channel_to_motion+0x1f0>)
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f7ff faeb 	bl	80009bc <__aeabi_dcmplt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d100      	bne.n	80013ee <channel_to_motion+0x162>
		return;
 80013ec:	e039      	b.n	8001462 <channel_to_motion+0x1d6>
			turnLeft(hi2c, diff);
 80013ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fded 	bl	8000fd2 <turnLeft>
		return;
 80013f8:	e033      	b.n	8001462 <channel_to_motion+0x1d6>
	}

	//go or back
	if(power > 0) move_go(hi2c, power, diff);
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001406:	f7ff faf7 	bl	80009f8 <__aeabi_dcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <channel_to_motion+0x198>
 8001410:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001414:	e9cd 2300 	strd	r2, r3, [sp]
 8001418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff fe1f 	bl	8001060 <move_go>
 8001422:	e01e      	b.n	8001462 <channel_to_motion+0x1d6>
	else if(power < 0) move_back(hi2c, abs(power), diff);
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001430:	f7ff fac4 	bl	80009bc <__aeabi_dcmplt>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d013      	beq.n	8001462 <channel_to_motion+0x1d6>
 800143a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800143e:	f7ff fafb 	bl	8000a38 <__aeabi_d2iz>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bfb8      	it	lt
 8001448:	425b      	neglt	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffda 	bl	8000404 <__aeabi_i2d>
 8001450:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001454:	e9cd 2300 	strd	r2, r3, [sp]
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fe8b 	bl	8001178 <move_back>

}
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40590000 	.word	0x40590000
 800146c:	c0590000 	.word	0xc0590000
 8001470:	40990000 	.word	0x40990000
 8001474:	4082c000 	.word	0x4082c000
 8001478:	40340000 	.word	0x40340000
 800147c:	c0340000 	.word	0xc0340000

08001480 <INA219_init>:
#include "battery_state.h"

bool INA219_init(ina219_handle_t* handle){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
	bool success = true;
 8001488:	2301      	movs	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]

	handle->Current_LSB = handle->expected_max_current /32768; //2^15 = 32,768
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <INA219_init+0xe8>)
 8001498:	f7ff f948 	bl	800072c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	handle->Power_LSB = 20 * handle->Current_LSB;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <INA219_init+0xec>)
 80014b2:	f7ff f811 	bl	80004d8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	handle->Cali_Register = trunc(0.04096 / (handle->Current_LSB * handle->shunt_resistor));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014cc:	f7ff f804 	bl	80004d8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	a122      	add	r1, pc, #136	; (adr r1, 8001560 <INA219_init+0xe0>)
 80014d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014da:	f7ff f927 	bl	800072c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f006 ffcb 	bl	8008480 <trunc>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fac9 	bl	8000a88 <__aeabi_d2uiz>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
	//handle->Cali_Register = 0;

	uint16_t data = handle->Cali_Register << 1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	82bb      	strh	r3, [r7, #20]
	uint8_t data_H = data<<8;
 8001506:	2300      	movs	r3, #0
 8001508:	74fb      	strb	r3, [r7, #19]
	uint8_t data_L = data&0xFF;
 800150a:	8abb      	ldrh	r3, [r7, #20]
 800150c:	74bb      	strb	r3, [r7, #18]

	uint8_t transmit[] = {CAL_REG_ADDR, data_H, data_L};
 800150e:	2305      	movs	r3, #5
 8001510:	733b      	strb	r3, [r7, #12]
 8001512:	7cfb      	ldrb	r3, [r7, #19]
 8001514:	737b      	strb	r3, [r7, #13]
 8001516:	7cbb      	ldrb	r3, [r7, #18]
 8001518:	73bb      	strb	r3, [r7, #14]
	success &= (HAL_I2C_Master_Transmit(handle->hi2c, INA219_DEVICE_ADDR , transmit, sizeof(transmit), 10) == HAL_OK);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	230a      	movs	r3, #10
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2303      	movs	r3, #3
 8001528:	2182      	movs	r1, #130	; 0x82
 800152a:	f001 fd9b 	bl	8003064 <HAL_I2C_Master_Transmit>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

	printf("cur_LSB : %f \r\n", handle->Current_LSB);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <INA219_init+0xf0>)
 8001552:	f004 ff9b 	bl	800648c <iprintf>

	return success;
 8001556:	7dfb      	ldrb	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	88e368f1 	.word	0x88e368f1
 8001564:	3fa4f8b5 	.word	0x3fa4f8b5
 8001568:	40e00000 	.word	0x40e00000
 800156c:	40340000 	.word	0x40340000
 8001570:	08008554 	.word	0x08008554
 8001574:	00000000 	.word	0x00000000

08001578 <get_bus_voltage>:

double get_bus_voltage(ina219_handle_t* handle){
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t target_reg = BUS_VOLTAGE_REG_ADDR;
 8001580:	2302      	movs	r3, #2
 8001582:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(handle->hi2c, INA219_DEVICE_ADDR , &target_reg, 1, 10) != HAL_OK){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	f107 020f 	add.w	r2, r7, #15
 800158c:	230a      	movs	r3, #10
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	2182      	movs	r1, #130	; 0x82
 8001594:	f001 fd66 	bl	8003064 <HAL_I2C_Master_Transmit>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <get_bus_voltage+0x2c>
		printf("write error\r\n");
 800159e:	4820      	ldr	r0, [pc, #128]	; (8001620 <get_bus_voltage+0xa8>)
 80015a0:	f004 fffa 	bl	8006598 <puts>
	}

	uint8_t receive_data[2] = {0, };
 80015a4:	2300      	movs	r3, #0
 80015a6:	81bb      	strh	r3, [r7, #12]
	if(HAL_I2C_Master_Receive(handle->hi2c, INA219_DEVICE_ADDR , receive_data, sizeof(receive_data), 10) != HAL_OK){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f107 020c 	add.w	r2, r7, #12
 80015b0:	230a      	movs	r3, #10
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2302      	movs	r3, #2
 80015b6:	2182      	movs	r1, #130	; 0x82
 80015b8:	f001 fe52 	bl	8003260 <HAL_I2C_Master_Receive>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <get_bus_voltage+0x50>
		printf("receive error\r\n");
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <get_bus_voltage+0xac>)
 80015c4:	f004 ffe8 	bl	8006598 <puts>
	}

	uint16_t data = (receive_data[0]<<8) + (receive_data[1]&0xFF);
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	83fb      	strh	r3, [r7, #30]
	data = data >> 3;
 80015d8:	8bfb      	ldrh	r3, [r7, #30]
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	83fb      	strh	r3, [r7, #30]

	double ret = (double)data * 4 * TO_MILI;
 80015de:	8bfb      	ldrh	r3, [r7, #30]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe feff 	bl	80003e4 <__aeabi_ui2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <get_bus_voltage+0xb0>)
 80015ec:	f7fe ff74 	bl	80004d8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	a307      	add	r3, pc, #28	; (adr r3, 8001618 <get_bus_voltage+0xa0>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe ff6b 	bl	80004d8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	e9c7 2304 	strd	r2, r3, [r7, #16]


	return ret;
 800160a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	d2f1a9fc 	.word	0xd2f1a9fc
 800161c:	3f50624d 	.word	0x3f50624d
 8001620:	08008564 	.word	0x08008564
 8001624:	08008574 	.word	0x08008574
 8001628:	40100000 	.word	0x40100000
 800162c:	00000000 	.word	0x00000000

08001630 <charge_display>:

	return ret;
}


void charge_display(double voltage, LED_handler_t* LED_handler){
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	if(voltage <= 10.0f){
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <charge_display+0x160>)
 8001642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001646:	f7ff f9c3 	bl	80009d0 <__aeabi_dcmple>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d018      	beq.n	8001682 <charge_display+0x52>
		HAL_GPIO_WritePin(LED_handler->LED1_GPIO,LED_handler->LED1_pin, 0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	889b      	ldrh	r3, [r3, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	f001 fb7a 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED2_GPIO,LED_handler->LED2_pin, 0);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6898      	ldr	r0, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	899b      	ldrh	r3, [r3, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	f001 fb72 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED3_GPIO,LED_handler->LED3_pin, 0);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6918      	ldr	r0, [r3, #16]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8a9b      	ldrh	r3, [r3, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	4619      	mov	r1, r3
 800167c:	f001 fb6a 	bl	8002d54 <HAL_GPIO_WritePin>
	else if(voltage >= 11.5f){
		HAL_GPIO_WritePin(LED_handler->LED1_GPIO,LED_handler->LED1_pin, 1);
		HAL_GPIO_WritePin(LED_handler->LED2_GPIO,LED_handler->LED2_pin, 1);
		HAL_GPIO_WritePin(LED_handler->LED3_GPIO,LED_handler->LED3_pin, 1);
	}
}
 8001680:	e07d      	b.n	800177e <charge_display+0x14e>
	else if(voltage > 10.0f && voltage <= 10.7f){
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <charge_display+0x160>)
 8001688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168c:	f7ff f9b4 	bl	80009f8 <__aeabi_dcmpgt>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d022      	beq.n	80016dc <charge_display+0xac>
 8001696:	a33c      	add	r3, pc, #240	; (adr r3, 8001788 <charge_display+0x158>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a0:	f7ff f996 	bl	80009d0 <__aeabi_dcmple>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d018      	beq.n	80016dc <charge_display+0xac>
		HAL_GPIO_WritePin(LED_handler->LED1_GPIO,LED_handler->LED1_pin, 1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4619      	mov	r1, r3
 80016b6:	f001 fb4d 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED2_GPIO,LED_handler->LED2_pin, 0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6898      	ldr	r0, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	899b      	ldrh	r3, [r3, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	f001 fb45 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED3_GPIO,LED_handler->LED3_pin, 0);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6918      	ldr	r0, [r3, #16]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8a9b      	ldrh	r3, [r3, #20]
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	f001 fb3d 	bl	8002d54 <HAL_GPIO_WritePin>
 80016da:	e050      	b.n	800177e <charge_display+0x14e>
	else if(voltage > 10.7f && voltage < 11.5f){
 80016dc:	a32a      	add	r3, pc, #168	; (adr r3, 8001788 <charge_display+0x158>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016e6:	f7ff f987 	bl	80009f8 <__aeabi_dcmpgt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d022      	beq.n	8001736 <charge_display+0x106>
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <charge_display+0x164>)
 80016f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016fa:	f7ff f95f 	bl	80009bc <__aeabi_dcmplt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d018      	beq.n	8001736 <charge_display+0x106>
		HAL_GPIO_WritePin(LED_handler->LED1_GPIO,LED_handler->LED1_pin, 1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	889b      	ldrh	r3, [r3, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	f001 fb20 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED2_GPIO,LED_handler->LED2_pin, 1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6898      	ldr	r0, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	899b      	ldrh	r3, [r3, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	f001 fb18 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED3_GPIO,LED_handler->LED3_pin, 0);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6918      	ldr	r0, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8a9b      	ldrh	r3, [r3, #20]
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f001 fb10 	bl	8002d54 <HAL_GPIO_WritePin>
 8001734:	e023      	b.n	800177e <charge_display+0x14e>
	else if(voltage >= 11.5f){
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <charge_display+0x164>)
 800173c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001740:	f7ff f950 	bl	80009e4 <__aeabi_dcmpge>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d100      	bne.n	800174c <charge_display+0x11c>
}
 800174a:	e018      	b.n	800177e <charge_display+0x14e>
		HAL_GPIO_WritePin(LED_handler->LED1_GPIO,LED_handler->LED1_pin, 1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	4619      	mov	r1, r3
 8001758:	f001 fafc 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED2_GPIO,LED_handler->LED2_pin, 1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	899b      	ldrh	r3, [r3, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	4619      	mov	r1, r3
 8001768:	f001 faf4 	bl	8002d54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_handler->LED3_GPIO,LED_handler->LED3_pin, 1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6918      	ldr	r0, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8a9b      	ldrh	r3, [r3, #20]
 8001774:	2201      	movs	r2, #1
 8001776:	4619      	mov	r1, r3
 8001778:	f001 faec 	bl	8002d54 <HAL_GPIO_WritePin>
}
 800177c:	e7ff      	b.n	800177e <charge_display+0x14e>
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	60000000 	.word	0x60000000
 800178c:	40256666 	.word	0x40256666
 8001790:	40240000 	.word	0x40240000
 8001794:	40270000 	.word	0x40270000

08001798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_GPIO_Init+0xc0>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2120      	movs	r1, #32
 80017e0:	481e      	ldr	r0, [pc, #120]	; (800185c <MX_GPIO_Init+0xc4>)
 80017e2:	f001 fab7 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2138      	movs	r1, #56	; 0x38
 80017ea:	481d      	ldr	r0, [pc, #116]	; (8001860 <MX_GPIO_Init+0xc8>)
 80017ec:	f001 fab2 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PPM_Pin;
 80017f0:	2310      	movs	r3, #16
 80017f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_GPIO_Init+0xcc>)
 80017f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PPM_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4619      	mov	r1, r3
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_GPIO_Init+0xc4>)
 8001804:	f001 f922 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001808:	2320      	movs	r3, #32
 800180a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2302      	movs	r3, #2
 8001816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_GPIO_Init+0xc4>)
 8001820:	f001 f914 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8001824:	2338      	movs	r3, #56	; 0x38
 8001826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2302      	movs	r3, #2
 8001832:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4619      	mov	r1, r3
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_GPIO_Init+0xc8>)
 800183c:	f001 f906 	bl	8002a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	200a      	movs	r0, #10
 8001846:	f001 f852 	bl	80028ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800184a:	200a      	movs	r0, #10
 800184c:	f001 f86b 	bl	8002926 <HAL_NVIC_EnableIRQ>

}
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00
 8001864:	10110000 	.word	0x10110000

08001868 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_I2C1_Init+0x50>)
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MX_I2C1_Init+0x54>)
 8001870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_I2C1_Init+0x50>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_I2C1_Init+0x58>)
 8001876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_I2C1_Init+0x50>)
 8001886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_I2C1_Init+0x50>)
 80018a6:	f001 fa85 	bl	8002db4 <HAL_I2C_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f000 fa3c 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001f8 	.word	0x200001f8
 80018bc:	40005400 	.word	0x40005400
 80018c0:	00061a80 	.word	0x00061a80

080018c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_I2C_MspInit+0x80>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12b      	bne.n	800193c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_I2C_MspInit+0x84>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_I2C_MspInit+0x84>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_I2C_MspInit+0x84>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001900:	2312      	movs	r3, #18
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <HAL_I2C_MspInit+0x88>)
 8001910:	f001 f89c 	bl	8002a4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_I2C_MspInit+0x84>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_I2C_MspInit+0x84>)
 800191a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_I2C_MspInit+0x84>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2020      	movs	r0, #32
 8001932:	f000 ffdc 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001936:	2020      	movs	r0, #32
 8001938:	f000 fff5 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40021000 	.word	0x40021000
 800194c:	40010c00 	.word	0x40010c00

08001950 <HAL_GPIO_EXTI_Callback>:
uint32_t t2 = 0;
uint32_t time_interval = 0;
uint32_t rising_cnt = 0;
uint32_t falling_cnt = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == PPM_Pin){
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b10      	cmp	r3, #16
 800195e:	f040 80c7 	bne.w	8001af0 <HAL_GPIO_EXTI_Callback+0x1a0>

        if(( EXTI->RTSR >> 4) & 0x01){
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_GPIO_EXTI_Callback+0x4e>
            t1= TIM2->CNT;
 8001970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001978:	6013      	str	r3, [r2, #0]

            rising_cnt++;
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a61      	ldr	r2, [pc, #388]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001982:	6013      	str	r3, [r2, #0]
            EXTI->RTSR &= ~((uint32_t)0x01 << 4);
 8001984:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800198a:	f023 0310 	bic.w	r3, r3, #16
 800198e:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= ((uint32_t)0x01 << 4);
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	60d3      	str	r3, [r2, #12]
 800199c:	e034      	b.n	8001a08 <HAL_GPIO_EXTI_Callback+0xb8>
        }
        else if(( EXTI->FTSR >> 4) & 0x01){
 800199e:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d02d      	beq.n	8001a08 <HAL_GPIO_EXTI_Callback+0xb8>
            t2 = TIM2->CNT;
 80019ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	4a56      	ldr	r2, [pc, #344]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80019b4:	6013      	str	r3, [r2, #0]

            if( t1 > t2) time_interval = TIMER_MAX - t1 + t2;
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d90a      	bls.n	80019d8 <HAL_GPIO_EXTI_Callback+0x88>
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80019d0:	33ff      	adds	r3, #255	; 0xff
 80019d2:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_EXTI_Callback+0x96>
            else time_interval = t2-t1;
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80019e4:	6013      	str	r3, [r2, #0]

            falling_cnt++;
 80019e6:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80019ee:	6013      	str	r3, [r2, #0]
            EXTI->RTSR |= ((uint32_t)0x01 << 4);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~((uint32_t)0x01 << 4);
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001a02:	f023 0310 	bic.w	r3, r3, #16
 8001a06:	60d3      	str	r3, [r2, #12]
        }

        if(time_interval > 4000){
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001a10:	d905      	bls.n	8001a1e <HAL_GPIO_EXTI_Callback+0xce>
            rising_cnt = 9;
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001a14:	2209      	movs	r2, #9
 8001a16:	601a      	str	r2, [r3, #0]
            falling_cnt = 9;
 8001a18:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001a1a:	2209      	movs	r2, #9
 8001a1c:	601a      	str	r2, [r3, #0]
        }
        switch(rising_cnt + falling_cnt){
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	3b02      	subs	r3, #2
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d862      	bhi.n	8001af4 <HAL_GPIO_EXTI_Callback+0x1a4>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a79 	.word	0x08001a79
 8001a38:	08001af5 	.word	0x08001af5
 8001a3c:	08001a85 	.word	0x08001a85
 8001a40:	08001af5 	.word	0x08001af5
 8001a44:	08001a91 	.word	0x08001a91
 8001a48:	08001af5 	.word	0x08001af5
 8001a4c:	08001a9d 	.word	0x08001a9d
 8001a50:	08001af5 	.word	0x08001af5
 8001a54:	08001aa9 	.word	0x08001aa9
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001ab5 	.word	0x08001ab5
 8001a60:	08001af5 	.word	0x08001af5
 8001a64:	08001ac1 	.word	0x08001ac1
 8001a68:	08001af5 	.word	0x08001af5
 8001a6c:	08001acd 	.word	0x08001acd
 8001a70:	08001af5 	.word	0x08001af5
 8001a74:	08001ad9 	.word	0x08001ad9
        case 2:
            channel_data.ch1 = time_interval;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001a80:	601a      	str	r2, [r3, #0]
            break;
 8001a82:	e038      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 4:
            channel_data.ch2 = time_interval;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001a8c:	605a      	str	r2, [r3, #4]
            break;
 8001a8e:	e032      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 6:
            channel_data.ch3 = time_interval;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001a98:	609a      	str	r2, [r3, #8]
            break;
 8001a9a:	e02c      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 8:
            channel_data.ch4 = time_interval;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001aa4:	60da      	str	r2, [r3, #12]
            break;
 8001aa6:	e026      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 10:
            channel_data.ch5 = time_interval;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001ab0:	611a      	str	r2, [r3, #16]
            break;
 8001ab2:	e020      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 12:
            channel_data.ch6 = time_interval;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001abc:	615a      	str	r2, [r3, #20]
            break;
 8001abe:	e01a      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 14:
            channel_data.ch7 = time_interval;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001ac8:	619a      	str	r2, [r3, #24]
            break;
 8001aca:	e014      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 16:
            channel_data.ch8 = time_interval;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001ad4:	61da      	str	r2, [r3, #28]
            break;
 8001ad6:	e00e      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        case 18:
            channel_data.dummy = time_interval;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001ae0:	621a      	str	r2, [r3, #32]
            rising_cnt = 0;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
            falling_cnt = 0;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
            break;
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
        default:
            //Nothing to do
            break;
        }
    }
 8001af0:	bf00      	nop
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_EXTI_Callback+0x1a6>
            break;
 8001af4:	bf00      	nop
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40010400 	.word	0x40010400
 8001b04:	20000270 	.word	0x20000270
 8001b08:	2000027c 	.word	0x2000027c
 8001b0c:	20000274 	.word	0x20000274
 8001b10:	20000278 	.word	0x20000278
 8001b14:	20000280 	.word	0x20000280
 8001b18:	2000024c 	.word	0x2000024c
 8001b1c:	00000000 	.word	0x00000000

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b26:	f000 fd85 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2a:	f000 f88f 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2e:	f7ff fe33 	bl	8001798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b32:	f000 fc97 	bl	8002464 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b36:	f7ff fe97 	bl	8001868 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b3a:	f000 fc2b 	bl	8002394 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001b3e:	f000 fcbb 	bl	80024b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ina219_handle_t ina219_handler = {
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	2230      	movs	r2, #48	; 0x30
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fede 	bl	800590c <memset>
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <main+0x108>)
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	a330      	add	r3, pc, #192	; (adr r3, 8001c18 <main+0xf8>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b5e:	a330      	add	r3, pc, #192	; (adr r3, 8001c20 <main+0x100>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  .expected_max_current = 3.2,
		  .shunt_resistor = 0.1
  };


  LED_handler_t LED_handler ={
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <main+0x10c>)
 8001b6a:	463c      	mov	r4, r7
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b76:	e884 0003 	stmia.w	r4, {r0, r1}
		  .LED1_pin = LED1_Pin,
		  .LED2_pin = LED2_Pin,
		  .LED3_pin = LED3_Pin
  };

  if(INA219_init(&ina219_handler)){
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fc7e 	bl	8001480 <INA219_init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <main+0x72>
	  printf("ina219 init success\r\n");
 8001b8a:	4829      	ldr	r0, [pc, #164]	; (8001c30 <main+0x110>)
 8001b8c:	f004 fd04 	bl	8006598 <puts>
 8001b90:	e002      	b.n	8001b98 <main+0x78>
  }
  else{
	  printf("ina219 init error\r\n");
 8001b92:	4828      	ldr	r0, [pc, #160]	; (8001c34 <main+0x114>)
 8001b94:	f004 fd00 	bl	8006598 <puts>
  }

  HAL_TIM_Base_Start(&htim2);
 8001b98:	4827      	ldr	r0, [pc, #156]	; (8001c38 <main+0x118>)
 8001b9a:	f003 f8d5 	bl	8004d48 <HAL_TIM_Base_Start>
  HAL_Delay(40);
 8001b9e:	2028      	movs	r0, #40	; 0x28
 8001ba0:	f000 fdaa 	bl	80026f8 <HAL_Delay>

  if (pca9685_init(&hi2c1)){
 8001ba4:	4820      	ldr	r0, [pc, #128]	; (8001c28 <main+0x108>)
 8001ba6:	f7fe ffcb 	bl	8000b40 <pca9685_init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <main+0x98>
	  printf("pca9685 init success\r\n");
 8001bb0:	4822      	ldr	r0, [pc, #136]	; (8001c3c <main+0x11c>)
 8001bb2:	f004 fcf1 	bl	8006598 <puts>
 8001bb6:	e002      	b.n	8001bbe <main+0x9e>
  }
  else{
	  printf("pca9685 init error\r\n");
 8001bb8:	4821      	ldr	r0, [pc, #132]	; (8001c40 <main+0x120>)
 8001bba:	f004 fced 	bl	8006598 <puts>
  }

  manipulator_position_init(&huart3);
 8001bbe:	4821      	ldr	r0, [pc, #132]	; (8001c44 <main+0x124>)
 8001bc0:	f000 f930 	bl	8001e24 <manipulator_position_init>
  HAL_Delay(1000);
 8001bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc8:	f000 fd96 	bl	80026f8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if RC_TANK_CONTROL_ON
	  channel_to_motion(&hi2c1, channel_data.ch1, channel_data.ch2);
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <main+0x128>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <main+0x128>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4813      	ldr	r0, [pc, #76]	; (8001c28 <main+0x108>)
 8001bda:	f7ff fb57 	bl	800128c <channel_to_motion>
#endif

#if MANIPULATOR_CONTROL_ON

	  channel_to_manipulator(&huart3, channel_data.ch3, channel_data.ch4, channel_data.ch5);
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <main+0x128>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <main+0x128>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <main+0x128>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <main+0x124>)
 8001bf0:	f000 f8a2 	bl	8001d38 <channel_to_manipulator>

	  HAL_Delay(100);
 8001bf4:	2064      	movs	r0, #100	; 0x64
 8001bf6:	f000 fd7f 	bl	80026f8 <HAL_Delay>
#endif


#if BATTERY_STATE_DISPLAY_ON
	  double vol = get_bus_voltage(&ina219_handler);
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fcba 	bl	8001578 <get_bus_voltage>
 8001c04:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
	  charge_display(vol, &LED_handler);
 8001c08:	463b      	mov	r3, r7
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c10:	f7ff fd0e 	bl	8001630 <charge_display>
  {
 8001c14:	e7da      	b.n	8001bcc <main+0xac>
 8001c16:	bf00      	nop
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	40099999 	.word	0x40099999
 8001c20:	9999999a 	.word	0x9999999a
 8001c24:	3fb99999 	.word	0x3fb99999
 8001c28:	200001f8 	.word	0x200001f8
 8001c2c:	080085e4 	.word	0x080085e4
 8001c30:	0800858c 	.word	0x0800858c
 8001c34:	080085a4 	.word	0x080085a4
 8001c38:	20000288 	.word	0x20000288
 8001c3c:	080085b8 	.word	0x080085b8
 8001c40:	080085d0 	.word	0x080085d0
 8001c44:	20000318 	.word	0x20000318
 8001c48:	2000024c 	.word	0x2000024c

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b090      	sub	sp, #64	; 0x40
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	2228      	movs	r2, #40	; 0x28
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fe56 	bl	800590c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c76:	2310      	movs	r3, #16
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001c82:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fbfb 	bl	8004488 <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001c98:	f000 f848 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fe68 	bl	800498c <HAL_RCC_ClockConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001cc2:	f000 f833 	bl	8001d2c <Error_Handler>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3740      	adds	r7, #64	; 0x40
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <_read>:

/* USER CODE BEGIN 4 */
int _read(int file, char *ptr, int len){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (uint8_t*)ptr, 1, 0xFFFF);
 8001cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <_read+0x30>)
 8001ce6:	f003 fbc2 	bl	800546e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, 1, 100);
 8001cea:	2364      	movs	r3, #100	; 0x64
 8001cec:	2201      	movs	r2, #1
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <_read+0x30>)
 8001cf2:	f003 fb39 	bl	8005368 <HAL_UART_Transmit>
	return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200002d0 	.word	0x200002d0

08001d04 <_write>:

int _write(int file, char *ptr, int len){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2364      	movs	r3, #100	; 0x64
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <_write+0x24>)
 8001d1a:	f003 fb25 	bl	8005368 <HAL_UART_Transmit>
	return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002d0 	.word	0x200002d0

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <channel_to_manipulator>:
#include "manipulator.h"


void channel_to_manipulator(UART_HandleTypeDef* huart, uint32_t ch3, uint32_t ch4, uint32_t ch5){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b090      	sub	sp, #64	; 0x40
 8001d3c:	af06      	add	r7, sp, #24
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
	//ch4 -> horizon
	//ch3 -> vertical
	//ch5 -> grip
	uint32_t motion = (uint32_t)map(ch3, 600, 1600, 0, 100);
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f7fe fb4c 	bl	80003e4 <__aeabi_ui2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <channel_to_manipulator+0xdc>)
 8001d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <channel_to_manipulator+0xe0>)
 8001d68:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <channel_to_manipulator+0xe4>)
 8001d72:	f7fe fea9 	bl	8000ac8 <map>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe fe83 	bl	8000a88 <__aeabi_d2uiz>
 8001d82:	4603      	mov	r3, r0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
	set_manipulator_vertical_motion(huart, motion);
 8001d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f873 	bl	8001e74 <set_manipulator_vertical_motion>

	double horizon_deg = map(ch4, 600, 1600, 0, 180);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fb28 	bl	80003e4 <__aeabi_ui2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <channel_to_manipulator+0xe8>)
 8001d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <channel_to_manipulator+0xe0>)
 8001db0:	e9cd 2300 	strd	r2, r3, [sp]
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <channel_to_manipulator+0xe4>)
 8001dba:	f7fe fe85 	bl	8000ac8 <map>
 8001dbe:	e9c7 0106 	strd	r0, r1, [r7, #24]
	set_manipulator_horizon_motion(huart, horizon_deg);
 8001dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f8fc 	bl	8001fc4 <set_manipulator_horizon_motion>

	double grip_deg = map(ch5, 600, 1600, 0, 180);
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7fe fb09 	bl	80003e4 <__aeabi_ui2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <channel_to_manipulator+0xe8>)
 8001dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <channel_to_manipulator+0xe0>)
 8001dee:	e9cd 2300 	strd	r2, r3, [sp]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <channel_to_manipulator+0xe4>)
 8001df8:	f7fe fe66 	bl	8000ac8 <map>
 8001dfc:	e9c7 0104 	strd	r0, r1, [r7, #16]
	set_manipulator_gripper(huart,grip_deg);
 8001e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f8cd 	bl	8001fa4 <set_manipulator_gripper>
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40590000 	.word	0x40590000
 8001e18:	40990000 	.word	0x40990000
 8001e1c:	4082c000 	.word	0x4082c000
 8001e20:	40668000 	.word	0x40668000

08001e24 <manipulator_position_init>:

void manipulator_position_init(UART_HandleTypeDef* huart){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	set_manipulator_horizon_motion(huart, 90);
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <manipulator_position_init+0x48>)
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8c6 	bl	8001fc4 <set_manipulator_horizon_motion>
	set_manipulator_gripper(huart, 0);
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8af 	bl	8001fa4 <set_manipulator_gripper>

	servo_posintion_write(huart, MOTOR2, 30);
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <manipulator_position_init+0x4c>)
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8ca 	bl	8001fe8 <servo_posintion_write>
	servo_posintion_write(huart, MOTOR3, 30);
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <manipulator_position_init+0x4c>)
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8c3 	bl	8001fe8 <servo_posintion_write>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40568000 	.word	0x40568000
 8001e70:	403e0000 	.word	0x403e0000

08001e74 <set_manipulator_vertical_motion>:

void set_manipulator_vertical_motion(UART_HandleTypeDef* huart, uint32_t motion){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af06      	add	r7, sp, #24
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	//motion : 0~100

	//초기값 :motor2: 30도, motor3 : 30도?
	//motion : 0~50
	//1단계 : motor2: 130도 , motor3: 130도?
	if(motion >= 0 && motion < 50){
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b31      	cmp	r3, #49	; 0x31
 8001e82:	d826      	bhi.n	8001ed2 <set_manipulator_vertical_motion+0x5e>
		double deg = map((double)motion, 0, 50, 30, 130);
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f7fe faad 	bl	80003e4 <__aeabi_ui2d>
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <set_manipulator_vertical_motion+0x118>)
 8001e90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <set_manipulator_vertical_motion+0x11c>)
 8001e9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <set_manipulator_vertical_motion+0x120>)
 8001ea4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f7fe fe0a 	bl	8000ac8 <map>
 8001eb4:	e9c7 0102 	strd	r0, r1, [r7, #8]
		servo_posintion_write(huart, MOTOR2, deg);
 8001eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f892 	bl	8001fe8 <servo_posintion_write>
		servo_posintion_write(huart, MOTOR3, deg);
 8001ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ec8:	2103      	movs	r1, #3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f88c 	bl	8001fe8 <servo_posintion_write>
		return;
 8001ed0:	e059      	b.n	8001f86 <set_manipulator_vertical_motion+0x112>
	}

	//motion : 51~80
	//2단계 : motor2만 180도까지 증가
	if(motion >= 50 && motion < 80){
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b31      	cmp	r3, #49	; 0x31
 8001ed6:	d929      	bls.n	8001f2c <set_manipulator_vertical_motion+0xb8>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b4f      	cmp	r3, #79	; 0x4f
 8001edc:	d826      	bhi.n	8001f2c <set_manipulator_vertical_motion+0xb8>
		double deg = map((double)motion, 50,80, 130, 180);
 8001ede:	6838      	ldr	r0, [r7, #0]
 8001ee0:	f7fe fa80 	bl	80003e4 <__aeabi_ui2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <set_manipulator_vertical_motion+0x124>)
 8001eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <set_manipulator_vertical_motion+0x118>)
 8001ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <set_manipulator_vertical_motion+0x128>)
 8001efe:	e9cd 2300 	strd	r2, r3, [sp]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <set_manipulator_vertical_motion+0x120>)
 8001f08:	f7fe fdde 	bl	8000ac8 <map>
 8001f0c:	e9c7 0106 	strd	r0, r1, [r7, #24]
		servo_posintion_write(huart, MOTOR2, deg);
 8001f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f14:	2102      	movs	r1, #2
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f866 	bl	8001fe8 <servo_posintion_write>
		servo_posintion_write(huart, MOTOR3, 130);
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <set_manipulator_vertical_motion+0x118>)
 8001f22:	2103      	movs	r1, #3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f85f 	bl	8001fe8 <servo_posintion_write>
		return;
 8001f2a:	e02c      	b.n	8001f86 <set_manipulator_vertical_motion+0x112>
	}


	//motion : 80~100
	//3단계 : motor3만 130도에서 80도까지 감소
	if(motion >= 80 && motion <=100){
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b4f      	cmp	r3, #79	; 0x4f
 8001f30:	d929      	bls.n	8001f86 <set_manipulator_vertical_motion+0x112>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d826      	bhi.n	8001f86 <set_manipulator_vertical_motion+0x112>
		double deg = map((double)motion, 80,100, 130, 80);
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f7fe fa53 	bl	80003e4 <__aeabi_ui2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <set_manipulator_vertical_motion+0x128>)
 8001f44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <set_manipulator_vertical_motion+0x118>)
 8001f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <set_manipulator_vertical_motion+0x12c>)
 8001f58:	e9cd 2300 	strd	r2, r3, [sp]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <set_manipulator_vertical_motion+0x128>)
 8001f62:	f7fe fdb1 	bl	8000ac8 <map>
 8001f66:	e9c7 0104 	strd	r0, r1, [r7, #16]
		servo_posintion_write(huart, MOTOR2, 180);
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <set_manipulator_vertical_motion+0x124>)
 8001f70:	2102      	movs	r1, #2
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f838 	bl	8001fe8 <servo_posintion_write>
		servo_posintion_write(huart, MOTOR3, deg);
 8001f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f832 	bl	8001fe8 <servo_posintion_write>
		return;
 8001f84:	bf00      	nop
	}

}
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40604000 	.word	0x40604000
 8001f90:	403e0000 	.word	0x403e0000
 8001f94:	40490000 	.word	0x40490000
 8001f98:	40668000 	.word	0x40668000
 8001f9c:	40540000 	.word	0x40540000
 8001fa0:	40590000 	.word	0x40590000

08001fa4 <set_manipulator_gripper>:

void set_manipulator_gripper(UART_HandleTypeDef* huart, double degree){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	e9c7 2300 	strd	r2, r3, [r7]
	servo_posintion_write(huart,MOTOR4, degree);
 8001fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f816 	bl	8001fe8 <servo_posintion_write>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <set_manipulator_horizon_motion>:

void set_manipulator_horizon_motion(UART_HandleTypeDef* huart, double degree){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	e9c7 2300 	strd	r2, r3, [r7]
	servo_posintion_write(huart, MOTOR1, degree);
 8001fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f806 	bl	8001fe8 <servo_posintion_write>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	0000      	movs	r0, r0
	...

08001fe8 <servo_posintion_write>:
/////////////////////////////////////




void servo_posintion_write(UART_HandleTypeDef* huart, uint8_t ID, double degree){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	; 0x50
 8001fec:	af06      	add	r7, sp, #24
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	e9c7 2300 	strd	r2, r3, [r7]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	72fb      	strb	r3, [r7, #11]
	//position range : 0~1023 =? 0 degree ~ 200 degree
	if(degree < 0 || degree > 200) return;
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002004:	f7fe fcda 	bl	80009bc <__aeabi_dcmplt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80ba 	bne.w	8002184 <servo_posintion_write+0x19c>
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b60      	ldr	r3, [pc, #384]	; (8002198 <servo_posintion_write+0x1b0>)
 8002016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800201a:	f7fe fced 	bl	80009f8 <__aeabi_dcmpgt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 80af 	bne.w	8002184 <servo_posintion_write+0x19c>

	uint16_t pos = (uint16_t)map(degree, MIN_DEGREE, MAX_DEGREE, MIN_POSITION, MAX_POSITION);
 8002026:	a35a      	add	r3, pc, #360	; (adr r3, 8002190 <servo_posintion_write+0x1a8>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <servo_posintion_write+0x1b0>)
 8002042:	e9cd 2300 	strd	r2, r3, [sp]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002052:	f7fe fd39 	bl	8000ac8 <map>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fd13 	bl	8000a88 <__aeabi_d2uiz>
 8002062:	4603      	mov	r3, r0
 8002064:	86fb      	strh	r3, [r7, #54]	; 0x36

	const uint8_t LEN = 0x09;
 8002066:	2309      	movs	r3, #9
 8002068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t time = DEFALUT_RUNNING_TIME;
 800206c:	2300      	movs	r3, #0
 800206e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t speed = DEFAULT_RUNNING_SPEED;
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t time_L = time&0xFF;
 8002076:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t time_H = time>>8;
 800207c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t speed_L = speed&0xFF;
 8002086:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t speed_H = speed>>8;
 800208c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t pos_L = pos&0xFF;
 8002096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t pos_H = pos>>8;
 800209c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	uint8_t tmp = ID + LEN + INST_WRITE + POSITION_REG_ADDR_H + pos_L + pos_H + time_L + time_H + speed_L + speed_H;
 80020a6:	7afa      	ldrb	r2, [r7, #11]
 80020a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020ac:	4413      	add	r3, r2
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020b4:	4413      	add	r3, r2
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020bc:	4413      	add	r3, r2
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020c4:	4413      	add	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020cc:	4413      	add	r3, r2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020d4:	4413      	add	r3, r2
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020dc:	4413      	add	r3, r2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	332d      	adds	r3, #45	; 0x2d
 80020e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t check_sum = ~tmp;
 80020e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020ea:	43db      	mvns	r3, r3
 80020ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	uint8_t transmit_data[] = {0xFF, 0xFF, ID, LEN, INST_WRITE, POSITION_REG_ADDR_H, pos_H, pos_L, time_H, time_L, speed_H, speed_L, check_sum};
 80020f0:	23ff      	movs	r3, #255	; 0xff
 80020f2:	763b      	strb	r3, [r7, #24]
 80020f4:	23ff      	movs	r3, #255	; 0xff
 80020f6:	767b      	strb	r3, [r7, #25]
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	76bb      	strb	r3, [r7, #26]
 80020fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002100:	76fb      	strb	r3, [r7, #27]
 8002102:	2303      	movs	r3, #3
 8002104:	773b      	strb	r3, [r7, #28]
 8002106:	232a      	movs	r3, #42	; 0x2a
 8002108:	777b      	strb	r3, [r7, #29]
 800210a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800210e:	77bb      	strb	r3, [r7, #30]
 8002110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002114:	77fb      	strb	r3, [r7, #31]
 8002116:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800211a:	f887 3020 	strb.w	r3, [r7, #32]
 800211e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002122:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800212a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800212e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800213a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t receive_data[] = {0x99, 0x99,0x99,0x99, 0x99, 0x99};
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <servo_posintion_write+0x1b4>)
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002148:	6018      	str	r0, [r3, #0]
 800214a:	3304      	adds	r3, #4
 800214c:	8019      	strh	r1, [r3, #0]


	HAL_HalfDuplex_EnableTransmitter(huart);
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f003 fa1f 	bl	8005592 <HAL_HalfDuplex_EnableTransmitter>
	if(HAL_UART_Transmit(huart, transmit_data, sizeof(transmit_data), 10) != HAL_OK){
 8002154:	f107 0118 	add.w	r1, r7, #24
 8002158:	230a      	movs	r3, #10
 800215a:	220d      	movs	r2, #13
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f003 f903 	bl	8005368 <HAL_UART_Transmit>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <servo_posintion_write+0x186>
		printf("uart transmit error\r\n");
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <servo_posintion_write+0x1b8>)
 800216a:	f004 fa15 	bl	8006598 <puts>
	}
	HAL_HalfDuplex_EnableReceiver(huart);
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f003 fa42 	bl	80055f8 <HAL_HalfDuplex_EnableReceiver>
	if(HAL_UART_Receive(huart, receive_data, sizeof(receive_data), 10) != HAL_OK){
 8002174:	f107 0110 	add.w	r1, r7, #16
 8002178:	230a      	movs	r3, #10
 800217a:	2206      	movs	r2, #6
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f003 f976 	bl	800546e <HAL_UART_Receive>
 8002182:	e000      	b.n	8002186 <servo_posintion_write+0x19e>
	if(degree < 0 || degree > 200) return;
 8002184:	bf00      	nop
		//printf("uart receive error\r\n");
	}
	else{
		//printf("receive_data : %d\r\n", receive_data[4]);
	}
}
 8002186:	3738      	adds	r7, #56	; 0x38
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	f3af 8000 	nop.w
 8002190:	00000000 	.word	0x00000000
 8002194:	408ff800 	.word	0x408ff800
 8002198:	40690000 	.word	0x40690000
 800219c:	08008614 	.word	0x08008614
 80021a0:	080085fc 	.word	0x080085fc

080021a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_MspInit+0x5c>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_MspInit+0x5c>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6193      	str	r3, [r2, #24]
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_MspInit+0x5c>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x5c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_MspInit+0x5c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_MspInit+0x5c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_MspInit+0x60>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_MspInit+0x60>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f000 fa37 	bl	80026c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}

08002256 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PPM_Pin);
 800225a:	2010      	movs	r0, #16
 800225c:	f000 fd92 	bl	8002d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <I2C1_ER_IRQHandler+0x10>)
 800226a:	f001 fa65 	bl	8003738 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200001f8 	.word	0x200001f8

08002278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <_kill>:

int _kill(int pid, int sig)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002290:	f003 fb00 	bl	8005894 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	2216      	movs	r2, #22
 8002298:	601a      	str	r2, [r3, #0]
	return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_exit>:

void _exit (int status)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022ae:	f04f 31ff 	mov.w	r1, #4294967295
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffe7 	bl	8002286 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022b8:	e7fe      	b.n	80022b8 <_exit+0x12>

080022ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	return -1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e0:	605a      	str	r2, [r3, #4]
	return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
	return 0;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
	...

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f003 faa2 	bl	8005894 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20005000 	.word	0x20005000
 800237c:	00000400 	.word	0x00000400
 8002380:	20000284 	.word	0x20000284
 8002384:	20000378 	.word	0x20000378

08002388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_TIM2_Init+0x94>)
 80023b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <MX_TIM2_Init+0x94>)
 80023ba:	223f      	movs	r2, #63	; 0x3f
 80023bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_TIM2_Init+0x94>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_TIM2_Init+0x94>)
 80023c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_TIM2_Init+0x94>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_TIM2_Init+0x94>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <MX_TIM2_Init+0x94>)
 80023da:	f002 fc65 	bl	8004ca8 <HAL_TIM_Base_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023e4:	f7ff fca2 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4619      	mov	r1, r3
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_TIM2_Init+0x94>)
 80023f6:	f002 fcf1 	bl	8004ddc <HAL_TIM_ConfigClockSource>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002400:	f7ff fc94 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_TIM2_Init+0x94>)
 8002412:	f002 fea3 	bl	800515c <HAL_TIMEx_MasterConfigSynchronization>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800241c:	f7ff fc86 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000288 	.word	0x20000288

0800242c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d10b      	bne.n	8002456 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_TIM_Base_MspInit+0x34>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_TIM_Base_MspInit+0x34>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_TIM_Base_MspInit+0x34>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40021000 	.word	0x40021000

08002464 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <MX_USART2_UART_Init+0x50>)
 800246c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800248a:	220c      	movs	r2, #12
 800248c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_USART2_UART_Init+0x4c>)
 800249c:	f002 febc 	bl	8005218 <HAL_UART_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a6:	f7ff fc41 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200002d0 	.word	0x200002d0
 80024b4:	40004400 	.word	0x40004400

080024b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <MX_USART3_UART_Init+0x4c>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <MX_USART3_UART_Init+0x50>)
 80024c6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024dc:	220c      	movs	r2, #12
 80024de:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_USART3_UART_Init+0x48>)
 80024ee:	f002 fee3 	bl	80052b8 <HAL_HalfDuplex_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80024f8:	f7ff fc18 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000318 	.word	0x20000318
 8002504:	40004800 	.word	0x40004800
 8002508:	000f4240 	.word	0x000f4240

0800250c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_UART_MspInit+0xc8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d124      	bne.n	8002576 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002536:	61d3      	str	r3, [r2, #28]
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800255c:	230c      	movs	r3, #12
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2302      	movs	r3, #2
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	4619      	mov	r1, r3
 800256e:	481b      	ldr	r0, [pc, #108]	; (80025dc <HAL_UART_MspInit+0xd0>)
 8002570:	f000 fa6c 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002574:	e029      	b.n	80025ca <HAL_UART_MspInit+0xbe>
  else if(uartHandle->Instance==USART3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_UART_MspInit+0xd4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d124      	bne.n	80025ca <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 8002586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258a:	61d3      	str	r3, [r2, #28]
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_UART_MspInit+0xcc>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b6:	2312      	movs	r3, #18
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	; (80025e4 <HAL_UART_MspInit+0xd8>)
 80025c6:	f000 fa41 	bl	8002a4c <HAL_GPIO_Init>
}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010800 	.word	0x40010800
 80025e0:	40004800 	.word	0x40004800
 80025e4:	40010c00 	.word	0x40010c00

080025e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e8:	f7ff fece 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480b      	ldr	r0, [pc, #44]	; (800261c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025ee:	490c      	ldr	r1, [pc, #48]	; (8002620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025f0:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002604:	4c09      	ldr	r4, [pc, #36]	; (800262c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002612:	f003 f957 	bl	80058c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002616:	f7ff fa83 	bl	8001b20 <main>
  bx lr
 800261a:	4770      	bx	lr
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002624:	08008a40 	.word	0x08008a40
  ldr r2, =_sbss
 8002628:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800262c:	20000374 	.word	0x20000374

08002630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC1_2_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_Init+0x28>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_Init+0x28>)
 800263e:	f043 0310 	orr.w	r3, r3, #16
 8002642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 f947 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	2001      	movs	r0, #1
 800264c:	f000 f808 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff fda8 	bl	80021a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x54>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x58>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	fbb3 f3f1 	udiv	r3, r3, r1
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f95f 	bl	8002942 <HAL_SYSTICK_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d80a      	bhi.n	80026aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f000 f927 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <HAL_InitTick+0x5c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000008 	.word	0x20000008
 80026bc:	20000004 	.word	0x20000004

080026c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_IncTick+0x1c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_IncTick+0x20>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_IncTick+0x20>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000008 	.word	0x20000008
 80026e0:	20000360 	.word	0x20000360

080026e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <HAL_GetTick+0x10>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000360 	.word	0x20000360

080026f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff fff0 	bl	80026e4 <HAL_GetTick>
 8002704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d005      	beq.n	800271e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_Delay+0x44>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800271e:	bf00      	nop
 8002720:	f7ff ffe0 	bl	80026e4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d8f7      	bhi.n	8002720 <HAL_Delay+0x28>
  {
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4906      	ldr	r1, [pc, #24]	; (80027d8 <__NVIC_EnableIRQ+0x34>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	; (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	; (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff90 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff2d 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff42 	bl	8002788 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff90 	bl	8002830 <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5f 	bl	80027dc <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff35 	bl	80027a4 <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d005      	beq.n	8002980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2204      	movs	r2, #4
 8002978:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e051      	b.n	8002a24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 020e 	bic.w	r2, r2, #14
 800298e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_DMA_Abort_IT+0xd4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d029      	beq.n	80029fe <HAL_DMA_Abort_IT+0xa2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <HAL_DMA_Abort_IT+0xd8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <HAL_DMA_Abort_IT+0x9e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMA_Abort_IT+0xdc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01a      	beq.n	80029f4 <HAL_DMA_Abort_IT+0x98>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_DMA_Abort_IT+0xe0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d012      	beq.n	80029ee <HAL_DMA_Abort_IT+0x92>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_DMA_Abort_IT+0xe4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00a      	beq.n	80029e8 <HAL_DMA_Abort_IT+0x8c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <HAL_DMA_Abort_IT+0xe8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <HAL_DMA_Abort_IT+0x86>
 80029dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e0:	e00e      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e6:	e00b      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ec:	e008      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	e005      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f8:	e002      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029fa:	2310      	movs	r3, #16
 80029fc:	e000      	b.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
 80029fe:	2301      	movs	r3, #1
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_DMA_Abort_IT+0xec>)
 8002a02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
    } 
  }
  return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40020008 	.word	0x40020008
 8002a34:	4002001c 	.word	0x4002001c
 8002a38:	40020030 	.word	0x40020030
 8002a3c:	40020044 	.word	0x40020044
 8002a40:	40020058 	.word	0x40020058
 8002a44:	4002006c 	.word	0x4002006c
 8002a48:	40020000 	.word	0x40020000

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e169      	b.n	8002d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8158 	bne.w	8002d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a9a      	ldr	r2, [pc, #616]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d05e      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a88:	4a98      	ldr	r2, [pc, #608]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d875      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a8e:	4a98      	ldr	r2, [pc, #608]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d058      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a94:	4a96      	ldr	r2, [pc, #600]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d86f      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a9a:	4a96      	ldr	r2, [pc, #600]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d052      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aa0:	4a94      	ldr	r2, [pc, #592]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d869      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002aa6:	4a94      	ldr	r2, [pc, #592]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04c      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aac:	4a92      	ldr	r2, [pc, #584]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d863      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ab2:	4a92      	ldr	r2, [pc, #584]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d046      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a90      	ldr	r2, [pc, #576]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d85d      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d82a      	bhi.n	8002b18 <HAL_GPIO_Init+0xcc>
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d859      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ac6:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <HAL_GPIO_Init+0x80>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002b33 	.word	0x08002b33
 8002ad8:	08002b75 	.word	0x08002b75
 8002adc:	08002b7b 	.word	0x08002b7b
 8002ae0:	08002b7b 	.word	0x08002b7b
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002b7b 	.word	0x08002b7b
 8002aec:	08002b7b 	.word	0x08002b7b
 8002af0:	08002b7b 	.word	0x08002b7b
 8002af4:	08002b7b 	.word	0x08002b7b
 8002af8:	08002b7b 	.word	0x08002b7b
 8002afc:	08002b7b 	.word	0x08002b7b
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b7b 	.word	0x08002b7b
 8002b08:	08002b7b 	.word	0x08002b7b
 8002b0c:	08002b7b 	.word	0x08002b7b
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	4a79      	ldr	r2, [pc, #484]	; (8002d00 <HAL_GPIO_Init+0x2b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e029      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e024      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	3308      	adds	r3, #8
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e01f      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	330c      	adds	r3, #12
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e01a      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	623b      	str	r3, [r7, #32]
          break;
 8002b52:	e013      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	611a      	str	r2, [r3, #16]
          break;
 8002b66:	e009      	b.n	8002b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	615a      	str	r2, [r3, #20]
          break;
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          break;
 8002b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d801      	bhi.n	8002b86 <HAL_GPIO_Init+0x13a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_Init+0x13e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	d802      	bhi.n	8002b98 <HAL_GPIO_Init+0x14c>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x152>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80b1 	beq.w	8002d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be4:	4a48      	ldr	r2, [pc, #288]	; (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4a:	492f      	ldr	r1, [pc, #188]	; (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	492c      	ldr	r1, [pc, #176]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4928      	ldr	r1, [pc, #160]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	491e      	ldr	r1, [pc, #120]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4918      	ldr	r1, [pc, #96]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4914      	ldr	r1, [pc, #80]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e021      	b.n	8002d2e <HAL_GPIO_Init+0x2e2>
 8002cea:	bf00      	nop
 8002cec:	10320000 	.word	0x10320000
 8002cf0:	10310000 	.word	0x10310000
 8002cf4:	10220000 	.word	0x10220000
 8002cf8:	10210000 	.word	0x10210000
 8002cfc:	10120000 	.word	0x10120000
 8002d00:	10110000 	.word	0x10110000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	40011000 	.word	0x40011000
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4909      	ldr	r1, [pc, #36]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f ae8e 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	; 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fdd4 	bl	8001950 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fd72 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 ff00 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d103      	bne.n	800305a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff fb34 	bl	80026e4 <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	f040 80e0 	bne.w	800324c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2319      	movs	r3, #25
 8003092:	2201      	movs	r2, #1
 8003094:	4970      	ldr	r1, [pc, #448]	; (8003258 <HAL_I2C_Master_Transmit+0x1f4>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 ffc0 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0d3      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x50>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0cc      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d007      	beq.n	80030da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2210      	movs	r2, #16
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	893a      	ldrh	r2, [r7, #8]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a50      	ldr	r2, [pc, #320]	; (800325c <HAL_I2C_Master_Transmit+0x1f8>)
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fd82 	bl	8003c2c <I2C_MasterRequestWrite>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e08d      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003148:	e066      	b.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f001 f87e 	bl	8004250 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x188>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6a39      	ldr	r1, [r7, #32]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f001 f875 	bl	80042e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01a      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d194      	bne.n	800314a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000

08003260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	461a      	mov	r2, r3
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
 8003270:	4613      	mov	r3, r2
 8003272:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fa34 	bl	80026e4 <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 824b 	bne.w	8003722 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2319      	movs	r3, #25
 8003292:	2201      	movs	r2, #1
 8003294:	497f      	ldr	r1, [pc, #508]	; (8003494 <HAL_I2C_Master_Receive+0x234>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fec0 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e23e      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Receive+0x54>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e237      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d007      	beq.n	80032da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2222      	movs	r2, #34	; 0x22
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_I2C_Master_Receive+0x238>)
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fd04 	bl	8003d30 <I2C_MasterRequestRead>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1f8      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	d113      	bne.n	8003362 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e1cc      	b.n	80036fc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b01      	cmp	r3, #1
 8003368:	d11e      	bne.n	80033a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800337a:	b672      	cpsid	i
}
 800337c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033a4:	b662      	cpsie	i
}
 80033a6:	e035      	b.n	8003414 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d11e      	bne.n	80033ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033c0:	b672      	cpsid	i
}
 80033c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ea:	b662      	cpsie	i
}
 80033ec:	e012      	b.n	8003414 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003414:	e172      	b.n	80036fc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	2b03      	cmp	r3, #3
 800341c:	f200 811f 	bhi.w	800365e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b01      	cmp	r3, #1
 8003426:	d123      	bne.n	8003470 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 ff9f 	bl	8004370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e173      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800346e:	e145      	b.n	80036fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	2b02      	cmp	r3, #2
 8003476:	d152      	bne.n	800351e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	2200      	movs	r2, #0
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_I2C_Master_Receive+0x23c>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fdca 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e148      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
 8003492:	bf00      	nop
 8003494:	00100002 	.word	0x00100002
 8003498:	ffff0000 	.word	0xffff0000
 800349c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034e6:	b662      	cpsie	i
}
 80034e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800351c:	e0ee      	b.n	80036fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	4981      	ldr	r1, [pc, #516]	; (800372c <HAL_I2C_Master_Receive+0x4cc>)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fd77 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0f5      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
}
 800354a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800357e:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <HAL_I2C_Master_Receive+0x4d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	4a6b      	ldr	r2, [pc, #428]	; (8003734 <HAL_I2C_Master_Receive+0x4d4>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0a1a      	lsrs	r2, r3, #8
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00da      	lsls	r2, r3, #3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	3b01      	subs	r3, #1
 800359c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d118      	bne.n	80035d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035c6:	b662      	cpsie	i
}
 80035c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0a6      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d1d9      	bne.n	8003598 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003626:	b662      	cpsie	i
}
 8003628:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800365c:	e04e      	b.n	80036fc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fe84 	bl	8004370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e058      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d124      	bne.n	80036fc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f ae88 	bne.w	8003416 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	00010004 	.word	0x00010004
 8003730:	20000000 	.word	0x20000000
 8003734:	14f8b589 	.word	0x14f8b589

08003738 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_I2C_ER_IRQHandler+0x5e>
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003784:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	0a5b      	lsrs	r3, r3, #9
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <HAL_I2C_ER_IRQHandler+0x88>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80037be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03f      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0x114>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d039      	beq.n	800384c <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80037d8:	7efb      	ldrb	r3, [r7, #27]
 80037da:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037f2:	7ebb      	ldrb	r3, [r7, #26]
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d112      	bne.n	800381e <HAL_I2C_ER_IRQHandler+0xe6>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_I2C_ER_IRQHandler+0xe6>
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b21      	cmp	r3, #33	; 0x21
 8003802:	d008      	beq.n	8003816 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b29      	cmp	r3, #41	; 0x29
 8003808:	d005      	beq.n	8003816 <HAL_I2C_ER_IRQHandler+0xde>
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b28      	cmp	r3, #40	; 0x28
 800380e:	d106      	bne.n	800381e <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b21      	cmp	r3, #33	; 0x21
 8003814:	d103      	bne.n	800381e <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f862 	bl	80038e0 <I2C_Slave_AF>
 800381c:	e016      	b.n	800384c <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003826:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003830:	7efb      	ldrb	r3, [r7, #27]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d002      	beq.n	800383c <HAL_I2C_ER_IRQHandler+0x104>
 8003836:	7efb      	ldrb	r3, [r7, #27]
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d107      	bne.n	800384c <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <HAL_I2C_ER_IRQHandler+0x13e>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f043 0308 	orr.w	r3, r3, #8
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003874:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f89d 	bl	80039c8 <I2C_ITError>
  }
}
 800388e:	bf00      	nop
 8003890:	3728      	adds	r7, #40	; 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
	...

080038e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d002      	beq.n	8003902 <I2C_Slave_AF+0x22>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d129      	bne.n	8003956 <I2C_Slave_AF+0x76>
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b28      	cmp	r3, #40	; 0x28
 8003906:	d126      	bne.n	8003956 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <I2C_Slave_AF+0xe4>)
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003926:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffaa 	bl	80038a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003954:	e031      	b.n	80039ba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b21      	cmp	r3, #33	; 0x21
 800395a:	d129      	bne.n	80039b0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <I2C_Slave_AF+0xe4>)
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2221      	movs	r2, #33	; 0x21
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003986:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003990:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fb4a 	bl	800303c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff74 	bl	8003896 <HAL_I2C_SlaveTxCpltCallback>
}
 80039ae:	e004      	b.n	80039ba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b8:	615a      	str	r2, [r3, #20]
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	ffff0000 	.word	0xffff0000

080039c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d002      	beq.n	80039ec <I2C_ITError+0x24>
 80039e6:	7bbb      	ldrb	r3, [r7, #14]
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d10a      	bne.n	8003a02 <I2C_ITError+0x3a>
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b22      	cmp	r3, #34	; 0x22
 80039f0:	d107      	bne.n	8003a02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a08:	2b28      	cmp	r3, #40	; 0x28
 8003a0a:	d107      	bne.n	8003a1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2228      	movs	r2, #40	; 0x28
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a1a:	e015      	b.n	8003a48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d00a      	beq.n	8003a42 <I2C_ITError+0x7a>
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b60      	cmp	r3, #96	; 0x60
 8003a30:	d007      	beq.n	8003a42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	d162      	bne.n	8003b1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d020      	beq.n	8003ab8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	4a6a      	ldr	r2, [pc, #424]	; (8003c24 <I2C_ITError+0x25c>)
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ff6a 	bl	800295c <HAL_DMA_Abort_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8089 	beq.w	8003ba2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	e074      	b.n	8003ba2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	4a59      	ldr	r2, [pc, #356]	; (8003c24 <I2C_ITError+0x25c>)
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe ff49 	bl	800295c <HAL_DMA_Abort_IT>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d068      	beq.n	8003ba2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d10b      	bne.n	8003af6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4798      	blx	r3
 8003b1c:	e041      	b.n	8003ba2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b60      	cmp	r3, #96	; 0x60
 8003b28:	d125      	bne.n	8003b76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d10b      	bne.n	8003b5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff feac 	bl	80038cc <HAL_I2C_AbortCpltCallback>
 8003b74:	e015      	b.n	8003ba2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d10b      	bne.n	8003b9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fe8c 	bl	80038ba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10e      	bne.n	8003bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d113      	bne.n	8003c1c <I2C_ITError+0x254>
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b28      	cmp	r3, #40	; 0x28
 8003bf8:	d110      	bne.n	8003c1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <I2C_ITError+0x260>)
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fe46 	bl	80038a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	08003ecd 	.word	0x08003ecd
 8003c28:	ffff0000 	.word	0xffff0000

08003c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d006      	beq.n	8003c56 <I2C_MasterRequestWrite+0x2a>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <I2C_MasterRequestWrite+0x2a>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c54:	d108      	bne.n	8003c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e00b      	b.n	8003c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b12      	cmp	r3, #18
 8003c6e:	d107      	bne.n	8003c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f9c5 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d103      	bne.n	8003cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e035      	b.n	8003d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d108      	bne.n	8003cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	e01b      	b.n	8003d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cd0:	897b      	ldrh	r3, [r7, #10]
 8003cd2:	11db      	asrs	r3, r3, #7
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0306 	and.w	r3, r3, #6
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f063 030f 	orn	r3, r3, #15
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	490e      	ldr	r1, [pc, #56]	; (8003d28 <I2C_MasterRequestWrite+0xfc>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa0e 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e010      	b.n	8003d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4907      	ldr	r1, [pc, #28]	; (8003d2c <I2C_MasterRequestWrite+0x100>)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f9fe 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	00010008 	.word	0x00010008
 8003d2c:	00010002 	.word	0x00010002

08003d30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d006      	beq.n	8003d6a <I2C_MasterRequestRead+0x3a>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <I2C_MasterRequestRead+0x3a>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d68:	d108      	bne.n	8003d7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e00b      	b.n	8003d94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b11      	cmp	r3, #17
 8003d82:	d107      	bne.n	8003d94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f93b 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d103      	bne.n	8003dc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e079      	b.n	8003ebc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd0:	d108      	bne.n	8003de4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e05f      	b.n	8003ea4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de4:	897b      	ldrh	r3, [r7, #10]
 8003de6:	11db      	asrs	r3, r3, #7
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0306 	and.w	r3, r3, #6
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f063 030f 	orn	r3, r3, #15
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4930      	ldr	r1, [pc, #192]	; (8003ec4 <I2C_MasterRequestRead+0x194>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f984 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e054      	b.n	8003ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4929      	ldr	r1, [pc, #164]	; (8003ec8 <I2C_MasterRequestRead+0x198>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f974 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e044      	b.n	8003ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8d9 	bl	800401c <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7e:	d103      	bne.n	8003e88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e017      	b.n	8003ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	11db      	asrs	r3, r3, #7
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0306 	and.w	r3, r3, #6
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f063 030e 	orn	r3, r3, #14
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <I2C_MasterRequestRead+0x198>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f930 	bl	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	00010008 	.word	0x00010008
 8003ec8:	00010002 	.word	0x00010002

08003ecc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <I2C_DMAAbort+0x148>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	4a4a      	ldr	r2, [pc, #296]	; (8004018 <I2C_DMAAbort+0x14c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0a1a      	lsrs	r2, r3, #8
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00da      	lsls	r2, r3, #3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f12:	e00a      	b.n	8003f2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d0ea      	beq.n	8003f00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	2200      	movs	r2, #0
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d10e      	bne.n	8003fba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff fc8a 	bl	80038cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fb8:	e027      	b.n	800400a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fc0:	2b28      	cmp	r3, #40	; 0x28
 8003fc2:	d117      	bne.n	8003ff4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2228      	movs	r2, #40	; 0x28
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ff2:	e007      	b.n	8004004 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f7ff fc58 	bl	80038ba <HAL_I2C_ErrorCallback>
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000000 	.word	0x20000000
 8004018:	14f8b589 	.word	0x14f8b589

0800401c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800402c:	e048      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d044      	beq.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7fe fb55 	bl	80026e4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d139      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10d      	bne.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	43da      	mvns	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	e00c      	b.n	800408c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	429a      	cmp	r2, r3
 8004090:	d116      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e023      	b.n	8004108 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10d      	bne.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	e00c      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	429a      	cmp	r2, r3
 8004104:	d093      	beq.n	800402e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411e:	e071      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d123      	bne.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e067      	b.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d041      	beq.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe fab0 	bl	80026e4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d136      	bne.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10c      	bne.n	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	43da      	mvns	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4013      	ands	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e00b      	b.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e021      	b.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10c      	bne.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e00b      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af6d 	bne.w	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800425c:	e034      	b.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8e3 	bl	800442a <I2C_IsAcknowledgeFailed>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e034      	b.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d028      	beq.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fe fa35 	bl	80026e4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11d      	bne.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d016      	beq.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d1c3      	bne.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ec:	e034      	b.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f89b 	bl	800442a <I2C_IsAcknowledgeFailed>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e034      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d028      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fe f9ed 	bl	80026e4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11d      	bne.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b04      	cmp	r3, #4
 8004328:	d016      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e007      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d1c3      	bne.n	80042ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800437c:	e049      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b10      	cmp	r3, #16
 800438a:	d119      	bne.n	80043c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0210 	mvn.w	r2, #16
 8004394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e030      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c0:	f7fe f990 	bl	80026e4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d016      	beq.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d1ae      	bne.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d11b      	bne.n	800447a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
	...

08004488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e272      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8087 	beq.w	80045b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044a8:	4b92      	ldr	r3, [pc, #584]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d00c      	beq.n	80044ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044b4:	4b8f      	ldr	r3, [pc, #572]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d112      	bne.n	80044e6 <HAL_RCC_OscConfig+0x5e>
 80044c0:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ce:	4b89      	ldr	r3, [pc, #548]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x12c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d168      	bne.n	80045b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e24c      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x76>
 80044f0:	4b80      	ldr	r3, [pc, #512]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7f      	ldr	r2, [pc, #508]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0xd4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x98>
 8004506:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7a      	ldr	r2, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b78      	ldr	r3, [pc, #480]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a77      	ldr	r2, [pc, #476]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0xd4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0xbc>
 800452a:	4b72      	ldr	r3, [pc, #456]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a71      	ldr	r2, [pc, #452]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0xd4>
 8004544:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6a      	ldr	r2, [pc, #424]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800454a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a67      	ldr	r2, [pc, #412]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fe f8be 	bl	80026e4 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fe f8ba 	bl	80026e4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e200      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xe4>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe f8aa 	bl	80026e4 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fe f8a6 	bl	80026e4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1ec      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x10c>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d063      	beq.n	800468a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c2:	4b4c      	ldr	r3, [pc, #304]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ce:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d11c      	bne.n	8004614 <HAL_RCC_OscConfig+0x18c>
 80045da:	4b46      	ldr	r3, [pc, #280]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x176>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1c0      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4939      	ldr	r1, [pc, #228]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e03a      	b.n	800468a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7fe f85f 	bl	80026e4 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462a:	f7fe f85b 	bl	80026e4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1a1      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4927      	ldr	r1, [pc, #156]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	e015      	b.n	800468a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCC_OscConfig+0x270>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe f83e 	bl	80026e4 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466c:	f7fe f83a 	bl	80026e4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e180      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d03a      	beq.n	800470c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d019      	beq.n	80046d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fe f81e 	bl	80026e4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fe f81a 	bl	80026e4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e160      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ca:	2001      	movs	r0, #1
 80046cc:	f000 face 	bl	8004c6c <RCC_Delay>
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_RCC_OscConfig+0x274>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fe f804 	bl	80026e4 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046de:	e00f      	b.n	8004700 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fe f800 	bl	80026e4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d908      	bls.n	8004700 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e146      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	42420000 	.word	0x42420000
 80046fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	4b92      	ldr	r3, [pc, #584]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e9      	bne.n	80046e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a6 	beq.w	8004866 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b8b      	ldr	r3, [pc, #556]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	4b88      	ldr	r3, [pc, #544]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	4a87      	ldr	r2, [pc, #540]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004734:	61d3      	str	r3, [r2, #28]
 8004736:	4b85      	ldr	r3, [pc, #532]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004746:	4b82      	ldr	r3, [pc, #520]	; (8004950 <HAL_RCC_OscConfig+0x4c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004752:	4b7f      	ldr	r3, [pc, #508]	; (8004950 <HAL_RCC_OscConfig+0x4c8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7e      	ldr	r2, [pc, #504]	; (8004950 <HAL_RCC_OscConfig+0x4c8>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475e:	f7fd ffc1 	bl	80026e4 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd ffbd 	bl	80026e4 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e103      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x4c8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x312>
 800478c:	4b6f      	ldr	r3, [pc, #444]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4a6e      	ldr	r2, [pc, #440]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6213      	str	r3, [r2, #32]
 8004798:	e02d      	b.n	80047f6 <HAL_RCC_OscConfig+0x36e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x334>
 80047a2:	4b6a      	ldr	r3, [pc, #424]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a69      	ldr	r2, [pc, #420]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6213      	str	r3, [r2, #32]
 80047ae:	4b67      	ldr	r3, [pc, #412]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a66      	ldr	r2, [pc, #408]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	6213      	str	r3, [r2, #32]
 80047ba:	e01c      	b.n	80047f6 <HAL_RCC_OscConfig+0x36e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d10c      	bne.n	80047de <HAL_RCC_OscConfig+0x356>
 80047c4:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a60      	ldr	r2, [pc, #384]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	f043 0304 	orr.w	r3, r3, #4
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	4b5e      	ldr	r3, [pc, #376]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e00b      	b.n	80047f6 <HAL_RCC_OscConfig+0x36e>
 80047de:	4b5b      	ldr	r3, [pc, #364]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a5a      	ldr	r2, [pc, #360]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	6213      	str	r3, [r2, #32]
 80047ea:	4b58      	ldr	r3, [pc, #352]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4a57      	ldr	r2, [pc, #348]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fd ff71 	bl	80026e4 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fd ff6d 	bl	80026e4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0b1      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ee      	beq.n	8004806 <HAL_RCC_OscConfig+0x37e>
 8004828:	e014      	b.n	8004854 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482a:	f7fd ff5b 	bl	80026e4 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fd ff57 	bl	80026e4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e09b      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004848:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ee      	bne.n	8004832 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	4a3b      	ldr	r2, [pc, #236]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8087 	beq.w	800497e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004870:	4b36      	ldr	r3, [pc, #216]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b08      	cmp	r3, #8
 800487a:	d061      	beq.n	8004940 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d146      	bne.n	8004912 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_RCC_OscConfig+0x4cc>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fd ff2b 	bl	80026e4 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fd ff27 	bl	80026e4 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e06d      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a4:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d108      	bne.n	80048cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4921      	ldr	r1, [pc, #132]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048cc:	4b1f      	ldr	r3, [pc, #124]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a19      	ldr	r1, [r3, #32]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	430b      	orrs	r3, r1
 80048de:	491b      	ldr	r1, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x4cc>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fefb 	bl	80026e4 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fd fef7 	bl	80026e4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e03d      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x46a>
 8004910:	e035      	b.n	800497e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_OscConfig+0x4cc>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd fee4 	bl	80026e4 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fee0 	bl	80026e4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e026      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x4c4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x498>
 800493e:	e01e      	b.n	800497e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e019      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
 800494c:	40021000 	.word	0x40021000
 8004950:	40007000 	.word	0x40007000
 8004954:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_OscConfig+0x500>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	429a      	cmp	r2, r3
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d0      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 0207 	bic.w	r2, r3, #7
 80049b6:	4965      	ldr	r1, [pc, #404]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d040      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d115      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e073      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e06b      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4936      	ldr	r1, [pc, #216]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7fd fe32 	bl	80026e4 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7fd fe2e 	bl	80026e4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e053      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d210      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	4922      	ldr	r1, [pc, #136]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1cc>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1d0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fd90 	bl	8002660 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40021000 	.word	0x40021000
 8004b54:	0800862c 	.word	0x0800862c
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	20000004 	.word	0x20000004

08004b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d002      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x30>
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x36>
 8004b8e:	e027      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b92:	613b      	str	r3, [r7, #16]
      break;
 8004b94:	e027      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0c9b      	lsrs	r3, r3, #18
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ba0:	5cd3      	ldrb	r3, [r2, r3]
 8004ba2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d010      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0c5b      	lsrs	r3, r3, #17
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bba:	5cd3      	ldrb	r3, [r2, r3]
 8004bbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc2:	fb03 f202 	mul.w	r2, r3, r2
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e004      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	613b      	str	r3, [r7, #16]
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004be2:	613b      	str	r3, [r7, #16]
      break;
 8004be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be6:	693b      	ldr	r3, [r7, #16]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	007a1200 	.word	0x007a1200
 8004bfc:	08008644 	.word	0x08008644
 8004c00:	08008654 	.word	0x08008654
 8004c04:	003d0900 	.word	0x003d0900

08004c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff2 	bl	8004c08 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800863c 	.word	0x0800863c

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c48:	f7ff ffde 	bl	8004c08 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	0adb      	lsrs	r3, r3, #11
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	0800863c 	.word	0x0800863c

08004c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <RCC_Delay+0x34>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <RCC_Delay+0x38>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0a5b      	lsrs	r3, r3, #9
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c88:	bf00      	nop
  }
  while (Delay --);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	60fa      	str	r2, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f9      	bne.n	8004c88 <RCC_Delay+0x1c>
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	20000000 	.word	0x20000000
 8004ca4:	10624dd3 	.word	0x10624dd3

08004ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fbac 	bl	800242c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 f940 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d001      	beq.n	8004d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e032      	b.n	8004dc6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_TIM_Base_Start+0x88>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Start+0x48>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Start+0x48>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <HAL_TIM_Base_Start+0x8c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Start+0x48>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_TIM_Base_Start+0x90>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d111      	bne.n	8004db4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d010      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db2:	e007      	b.n	8004dc4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800

08004ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_ConfigClockSource+0x1c>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0b4      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x186>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e30:	d03e      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	f200 8087 	bhi.w	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3e:	f000 8086 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0x172>
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d87f      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b70      	cmp	r3, #112	; 0x70
 8004e4a:	d01a      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xa6>
 8004e4c:	2b70      	cmp	r3, #112	; 0x70
 8004e4e:	d87b      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d050      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e54:	2b60      	cmp	r3, #96	; 0x60
 8004e56:	d877      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d03c      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e5c:	2b50      	cmp	r3, #80	; 0x50
 8004e5e:	d873      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d058      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x13a>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d86f      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d064      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x15a>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d86b      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d060      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x15a>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d867      	bhi.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d05c      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d05a      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	e062      	b.n	8004f48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f000 f944 	bl	800511e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	609a      	str	r2, [r3, #8]
      break;
 8004eae:	e04f      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6899      	ldr	r1, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f000 f92d 	bl	800511e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed2:	609a      	str	r2, [r3, #8]
      break;
 8004ed4:	e03c      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f8a4 	bl	8005030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2150      	movs	r1, #80	; 0x50
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f8fb 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e02c      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f8c2 	bl	800508c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2160      	movs	r1, #96	; 0x60
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f8eb 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004f14:	e01c      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 f884 	bl	8005030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2140      	movs	r1, #64	; 0x40
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8db 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004f34:	e00c      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f000 f8d2 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004f46:	e003      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4c:	e000      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a29      	ldr	r2, [pc, #164]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d007      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a26      	ldr	r2, [pc, #152]	; (8005028 <TIM_Base_SetConfig+0xbc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <TIM_Base_SetConfig+0xc0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d108      	bne.n	8004fae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <TIM_Base_SetConfig+0xbc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <TIM_Base_SetConfig+0xc0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a07      	ldr	r2, [pc, #28]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	615a      	str	r2, [r3, #20]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800

08005030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 030a 	bic.w	r3, r3, #10
 800506c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0210 	bic.w	r2, r3, #16
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	031b      	lsls	r3, r3, #12
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	f043 0307 	orr.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005138:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	431a      	orrs	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	609a      	str	r2, [r3, #8]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e046      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a16      	ldr	r2, [pc, #88]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a10      	ldr	r2, [pc, #64]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800

08005218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e042      	b.n	80052b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd f964 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	; 0x24
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa6d 	bl	800573c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e04a      	b.n	8005360 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fd f914 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2224      	movs	r2, #36	; 0x24
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fa1d 	bl	800573c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005320:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0208 	orr.w	r2, r2, #8
 8005330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b20      	cmp	r3, #32
 8005386:	d16d      	bne.n	8005464 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Transmit+0x2c>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e066      	b.n	8005466 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2221      	movs	r2, #33	; 0x21
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a6:	f7fd f99d 	bl	80026e4 <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d108      	bne.n	80053d4 <HAL_UART_Transmit+0x6c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e003      	b.n	80053dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053dc:	e02a      	b.n	8005434 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f938 	bl	800565e <UART_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e036      	b.n	8005466 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3302      	adds	r3, #2
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e007      	b.n	8005426 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1cf      	bne.n	80053de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	2140      	movs	r1, #64	; 0x40
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f908 	bl	800565e <UART_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b08a      	sub	sp, #40	; 0x28
 8005472:	af02      	add	r7, sp, #8
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b20      	cmp	r3, #32
 800548c:	d17c      	bne.n	8005588 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_Receive+0x2c>
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e075      	b.n	800558a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2222      	movs	r2, #34	; 0x22
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fd f917 	bl	80026e4 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Receive+0x72>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80054e8:	e043      	b.n	8005572 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2120      	movs	r1, #32
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f8b2 	bl	800565e <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e042      	b.n	800558a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005516:	b29a      	uxth	r2, r3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3302      	adds	r3, #2
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e01f      	b.n	8005564 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d007      	beq.n	800553e <HAL_UART_Receive+0xd0>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_UART_Receive+0xde>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e008      	b.n	800555e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1b6      	bne.n	80054ea <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e020      	b.n	80055ee <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	; 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 030c 	bic.w	r3, r3, #12
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f043 0308 	orr.w	r3, r3, #8
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_HalfDuplex_EnableReceiver+0x1a>
 800560e:	2302      	movs	r3, #2
 8005610:	e020      	b.n	8005654 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 030c 	bic.w	r3, r3, #12
 8005630:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b090      	sub	sp, #64	; 0x40
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566e:	e050      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d04c      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <UART_WaitOnFlagUntilTimeout+0x30>
 800567e:	f7fd f831 	bl	80026e4 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800568a:	429a      	cmp	r2, r3
 800568c:	d241      	bcs.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056ae:	637a      	str	r2, [r7, #52]	; 0x34
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	613b      	str	r3, [r7, #16]
   return(result);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e2:	623a      	str	r2, [r7, #32]
 80056e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	6a3a      	ldr	r2, [r7, #32]
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e5      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d09f      	beq.n	8005670 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3740      	adds	r7, #64	; 0x40
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005776:	f023 030c 	bic.w	r3, r3, #12
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	430b      	orrs	r3, r1
 8005782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <UART_SetConfig+0x114>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057a4:	f7ff fa4e 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	e002      	b.n	80057b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7ff fa36 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80057b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <UART_SetConfig+0x118>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	0119      	lsls	r1, r3, #4
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009a      	lsls	r2, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e8:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <UART_SetConfig+0x118>)
 80057ea:	fba3 0302 	umull	r0, r3, r3, r2
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2064      	movs	r0, #100	; 0x64
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	3332      	adds	r3, #50	; 0x32
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <UART_SetConfig+0x118>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005808:	4419      	add	r1, r3
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009a      	lsls	r2, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <UART_SetConfig+0x118>)
 8005822:	fba3 0302 	umull	r0, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2064      	movs	r0, #100	; 0x64
 800582a:	fb00 f303 	mul.w	r3, r0, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	3332      	adds	r3, #50	; 0x32
 8005834:	4a07      	ldr	r2, [pc, #28]	; (8005854 <UART_SetConfig+0x118>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	440a      	add	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40013800 	.word	0x40013800
 8005854:	51eb851f 	.word	0x51eb851f

08005858 <__assert_func>:
 8005858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800585a:	4614      	mov	r4, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <__assert_func+0x2c>)
 8005860:	4605      	mov	r5, r0
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68d8      	ldr	r0, [r3, #12]
 8005866:	b14c      	cbz	r4, 800587c <__assert_func+0x24>
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <__assert_func+0x30>)
 800586a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800586e:	9100      	str	r1, [sp, #0]
 8005870:	462b      	mov	r3, r5
 8005872:	4906      	ldr	r1, [pc, #24]	; (800588c <__assert_func+0x34>)
 8005874:	f000 f814 	bl	80058a0 <fiprintf>
 8005878:	f000 ff56 	bl	8006728 <abort>
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <__assert_func+0x38>)
 800587e:	461c      	mov	r4, r3
 8005880:	e7f3      	b.n	800586a <__assert_func+0x12>
 8005882:	bf00      	nop
 8005884:	2000000c 	.word	0x2000000c
 8005888:	08008656 	.word	0x08008656
 800588c:	08008663 	.word	0x08008663
 8005890:	08008691 	.word	0x08008691

08005894 <__errno>:
 8005894:	4b01      	ldr	r3, [pc, #4]	; (800589c <__errno+0x8>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c

080058a0 <fiprintf>:
 80058a0:	b40e      	push	{r1, r2, r3}
 80058a2:	b503      	push	{r0, r1, lr}
 80058a4:	4601      	mov	r1, r0
 80058a6:	ab03      	add	r3, sp, #12
 80058a8:	4805      	ldr	r0, [pc, #20]	; (80058c0 <fiprintf+0x20>)
 80058aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	f000 f85b 	bl	800596c <_vfiprintf_r>
 80058b6:	b002      	add	sp, #8
 80058b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058bc:	b003      	add	sp, #12
 80058be:	4770      	bx	lr
 80058c0:	2000000c 	.word	0x2000000c

080058c4 <__libc_init_array>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	2600      	movs	r6, #0
 80058c8:	4d0c      	ldr	r5, [pc, #48]	; (80058fc <__libc_init_array+0x38>)
 80058ca:	4c0d      	ldr	r4, [pc, #52]	; (8005900 <__libc_init_array+0x3c>)
 80058cc:	1b64      	subs	r4, r4, r5
 80058ce:	10a4      	asrs	r4, r4, #2
 80058d0:	42a6      	cmp	r6, r4
 80058d2:	d109      	bne.n	80058e8 <__libc_init_array+0x24>
 80058d4:	f002 fe04 	bl	80084e0 <_init>
 80058d8:	2600      	movs	r6, #0
 80058da:	4d0a      	ldr	r5, [pc, #40]	; (8005904 <__libc_init_array+0x40>)
 80058dc:	4c0a      	ldr	r4, [pc, #40]	; (8005908 <__libc_init_array+0x44>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	42a6      	cmp	r6, r4
 80058e4:	d105      	bne.n	80058f2 <__libc_init_array+0x2e>
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ec:	4798      	blx	r3
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7ee      	b.n	80058d0 <__libc_init_array+0xc>
 80058f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f6:	4798      	blx	r3
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7f2      	b.n	80058e2 <__libc_init_array+0x1e>
 80058fc:	08008a38 	.word	0x08008a38
 8005900:	08008a38 	.word	0x08008a38
 8005904:	08008a38 	.word	0x08008a38
 8005908:	08008a3c 	.word	0x08008a3c

0800590c <memset>:
 800590c:	4603      	mov	r3, r0
 800590e:	4402      	add	r2, r0
 8005910:	4293      	cmp	r3, r2
 8005912:	d100      	bne.n	8005916 <memset+0xa>
 8005914:	4770      	bx	lr
 8005916:	f803 1b01 	strb.w	r1, [r3], #1
 800591a:	e7f9      	b.n	8005910 <memset+0x4>

0800591c <__sfputc_r>:
 800591c:	6893      	ldr	r3, [r2, #8]
 800591e:	b410      	push	{r4}
 8005920:	3b01      	subs	r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	6093      	str	r3, [r2, #8]
 8005926:	da07      	bge.n	8005938 <__sfputc_r+0x1c>
 8005928:	6994      	ldr	r4, [r2, #24]
 800592a:	42a3      	cmp	r3, r4
 800592c:	db01      	blt.n	8005932 <__sfputc_r+0x16>
 800592e:	290a      	cmp	r1, #10
 8005930:	d102      	bne.n	8005938 <__sfputc_r+0x1c>
 8005932:	bc10      	pop	{r4}
 8005934:	f000 be38 	b.w	80065a8 <__swbuf_r>
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	1c58      	adds	r0, r3, #1
 800593c:	6010      	str	r0, [r2, #0]
 800593e:	7019      	strb	r1, [r3, #0]
 8005940:	4608      	mov	r0, r1
 8005942:	bc10      	pop	{r4}
 8005944:	4770      	bx	lr

08005946 <__sfputs_r>:
 8005946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005948:	4606      	mov	r6, r0
 800594a:	460f      	mov	r7, r1
 800594c:	4614      	mov	r4, r2
 800594e:	18d5      	adds	r5, r2, r3
 8005950:	42ac      	cmp	r4, r5
 8005952:	d101      	bne.n	8005958 <__sfputs_r+0x12>
 8005954:	2000      	movs	r0, #0
 8005956:	e007      	b.n	8005968 <__sfputs_r+0x22>
 8005958:	463a      	mov	r2, r7
 800595a:	4630      	mov	r0, r6
 800595c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005960:	f7ff ffdc 	bl	800591c <__sfputc_r>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d1f3      	bne.n	8005950 <__sfputs_r+0xa>
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800596c <_vfiprintf_r>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	460d      	mov	r5, r1
 8005972:	4614      	mov	r4, r2
 8005974:	4698      	mov	r8, r3
 8005976:	4606      	mov	r6, r0
 8005978:	b09d      	sub	sp, #116	; 0x74
 800597a:	b118      	cbz	r0, 8005984 <_vfiprintf_r+0x18>
 800597c:	6983      	ldr	r3, [r0, #24]
 800597e:	b90b      	cbnz	r3, 8005984 <_vfiprintf_r+0x18>
 8005980:	f001 fe6a 	bl	8007658 <__sinit>
 8005984:	4b89      	ldr	r3, [pc, #548]	; (8005bac <_vfiprintf_r+0x240>)
 8005986:	429d      	cmp	r5, r3
 8005988:	d11b      	bne.n	80059c2 <_vfiprintf_r+0x56>
 800598a:	6875      	ldr	r5, [r6, #4]
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x32>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f001 ff00 	bl	800779e <__retarget_lock_acquire_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	d501      	bpl.n	80059a8 <_vfiprintf_r+0x3c>
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	b9eb      	cbnz	r3, 80059e4 <_vfiprintf_r+0x78>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 fe4e 	bl	800664c <__swsetup_r>
 80059b0:	b1c0      	cbz	r0, 80059e4 <_vfiprintf_r+0x78>
 80059b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b4:	07dc      	lsls	r4, r3, #31
 80059b6:	d50e      	bpl.n	80059d6 <_vfiprintf_r+0x6a>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	4b7b      	ldr	r3, [pc, #492]	; (8005bb0 <_vfiprintf_r+0x244>)
 80059c4:	429d      	cmp	r5, r3
 80059c6:	d101      	bne.n	80059cc <_vfiprintf_r+0x60>
 80059c8:	68b5      	ldr	r5, [r6, #8]
 80059ca:	e7df      	b.n	800598c <_vfiprintf_r+0x20>
 80059cc:	4b79      	ldr	r3, [pc, #484]	; (8005bb4 <_vfiprintf_r+0x248>)
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf08      	it	eq
 80059d2:	68f5      	ldreq	r5, [r6, #12]
 80059d4:	e7da      	b.n	800598c <_vfiprintf_r+0x20>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	0598      	lsls	r0, r3, #22
 80059da:	d4ed      	bmi.n	80059b8 <_vfiprintf_r+0x4c>
 80059dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059de:	f001 fedf 	bl	80077a0 <__retarget_lock_release_recursive>
 80059e2:	e7e9      	b.n	80059b8 <_vfiprintf_r+0x4c>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9309      	str	r3, [sp, #36]	; 0x24
 80059e8:	2320      	movs	r3, #32
 80059ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ee:	2330      	movs	r3, #48	; 0x30
 80059f0:	f04f 0901 	mov.w	r9, #1
 80059f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005bb8 <_vfiprintf_r+0x24c>
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a00:	4623      	mov	r3, r4
 8005a02:	469a      	mov	sl, r3
 8005a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a08:	b10a      	cbz	r2, 8005a0e <_vfiprintf_r+0xa2>
 8005a0a:	2a25      	cmp	r2, #37	; 0x25
 8005a0c:	d1f9      	bne.n	8005a02 <_vfiprintf_r+0x96>
 8005a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a12:	d00b      	beq.n	8005a2c <_vfiprintf_r+0xc0>
 8005a14:	465b      	mov	r3, fp
 8005a16:	4622      	mov	r2, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ff93 	bl	8005946 <__sfputs_r>
 8005a20:	3001      	adds	r0, #1
 8005a22:	f000 80aa 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a28:	445a      	add	r2, fp
 8005a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a2 	beq.w	8005b7a <_vfiprintf_r+0x20e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a40:	f10a 0a01 	add.w	sl, sl, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4e:	4654      	mov	r4, sl
 8005a50:	2205      	movs	r2, #5
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4858      	ldr	r0, [pc, #352]	; (8005bb8 <_vfiprintf_r+0x24c>)
 8005a58:	f001 ff10 	bl	800787c <memchr>
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	b9d8      	cbnz	r0, 8005a98 <_vfiprintf_r+0x12c>
 8005a60:	06d1      	lsls	r1, r2, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2320      	movmi	r3, #32
 8005a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a6a:	0713      	lsls	r3, r2, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	232b      	movmi	r3, #43	; 0x2b
 8005a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7a:	d015      	beq.n	8005aa8 <_vfiprintf_r+0x13c>
 8005a7c:	4654      	mov	r4, sl
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f04f 0c0a 	mov.w	ip, #10
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4621      	mov	r1, r4
 8005a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8c:	3b30      	subs	r3, #48	; 0x30
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d94e      	bls.n	8005b30 <_vfiprintf_r+0x1c4>
 8005a92:	b1b0      	cbz	r0, 8005ac2 <_vfiprintf_r+0x156>
 8005a94:	9207      	str	r2, [sp, #28]
 8005a96:	e014      	b.n	8005ac2 <_vfiprintf_r+0x156>
 8005a98:	eba0 0308 	sub.w	r3, r0, r8
 8005a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	46a2      	mov	sl, r4
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	e7d2      	b.n	8005a4e <_vfiprintf_r+0xe2>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfbb      	ittet	lt
 8005ab4:	425b      	neglt	r3, r3
 8005ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aba:	9307      	strge	r3, [sp, #28]
 8005abc:	9307      	strlt	r3, [sp, #28]
 8005abe:	bfb8      	it	lt
 8005ac0:	9204      	strlt	r2, [sp, #16]
 8005ac2:	7823      	ldrb	r3, [r4, #0]
 8005ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac6:	d10c      	bne.n	8005ae2 <_vfiprintf_r+0x176>
 8005ac8:	7863      	ldrb	r3, [r4, #1]
 8005aca:	2b2a      	cmp	r3, #42	; 0x2a
 8005acc:	d135      	bne.n	8005b3a <_vfiprintf_r+0x1ce>
 8005ace:	9b03      	ldr	r3, [sp, #12]
 8005ad0:	3402      	adds	r4, #2
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfb8      	it	lt
 8005adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005bbc <_vfiprintf_r+0x250>
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	4650      	mov	r0, sl
 8005aea:	7821      	ldrb	r1, [r4, #0]
 8005aec:	f001 fec6 	bl	800787c <memchr>
 8005af0:	b140      	cbz	r0, 8005b04 <_vfiprintf_r+0x198>
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	eba0 000a 	sub.w	r0, r0, sl
 8005af8:	fa03 f000 	lsl.w	r0, r3, r0
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	3401      	adds	r4, #1
 8005b00:	4303      	orrs	r3, r0
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b08:	2206      	movs	r2, #6
 8005b0a:	482d      	ldr	r0, [pc, #180]	; (8005bc0 <_vfiprintf_r+0x254>)
 8005b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b10:	f001 feb4 	bl	800787c <memchr>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d03f      	beq.n	8005b98 <_vfiprintf_r+0x22c>
 8005b18:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <_vfiprintf_r+0x258>)
 8005b1a:	bb1b      	cbnz	r3, 8005b64 <_vfiprintf_r+0x1f8>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	3307      	adds	r3, #7
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	3308      	adds	r3, #8
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	443b      	add	r3, r7
 8005b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2e:	e767      	b.n	8005a00 <_vfiprintf_r+0x94>
 8005b30:	460c      	mov	r4, r1
 8005b32:	2001      	movs	r0, #1
 8005b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b38:	e7a5      	b.n	8005a86 <_vfiprintf_r+0x11a>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f04f 0c0a 	mov.w	ip, #10
 8005b40:	4619      	mov	r1, r3
 8005b42:	3401      	adds	r4, #1
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b4c:	3a30      	subs	r2, #48	; 0x30
 8005b4e:	2a09      	cmp	r2, #9
 8005b50:	d903      	bls.n	8005b5a <_vfiprintf_r+0x1ee>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0c5      	beq.n	8005ae2 <_vfiprintf_r+0x176>
 8005b56:	9105      	str	r1, [sp, #20]
 8005b58:	e7c3      	b.n	8005ae2 <_vfiprintf_r+0x176>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b62:	e7f0      	b.n	8005b46 <_vfiprintf_r+0x1da>
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <_vfiprintf_r+0x25c>)
 8005b6e:	a904      	add	r1, sp, #16
 8005b70:	f000 f8ca 	bl	8005d08 <_printf_float>
 8005b74:	4607      	mov	r7, r0
 8005b76:	1c78      	adds	r0, r7, #1
 8005b78:	d1d6      	bne.n	8005b28 <_vfiprintf_r+0x1bc>
 8005b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	d405      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b80:	89ab      	ldrh	r3, [r5, #12]
 8005b82:	059a      	lsls	r2, r3, #22
 8005b84:	d402      	bmi.n	8005b8c <_vfiprintf_r+0x220>
 8005b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b88:	f001 fe0a 	bl	80077a0 <__retarget_lock_release_recursive>
 8005b8c:	89ab      	ldrh	r3, [r5, #12]
 8005b8e:	065b      	lsls	r3, r3, #25
 8005b90:	f53f af12 	bmi.w	80059b8 <_vfiprintf_r+0x4c>
 8005b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b96:	e711      	b.n	80059bc <_vfiprintf_r+0x50>
 8005b98:	ab03      	add	r3, sp, #12
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <_vfiprintf_r+0x25c>)
 8005ba2:	a904      	add	r1, sp, #16
 8005ba4:	f000 fb4c 	bl	8006240 <_printf_i>
 8005ba8:	e7e4      	b.n	8005b74 <_vfiprintf_r+0x208>
 8005baa:	bf00      	nop
 8005bac:	08008790 	.word	0x08008790
 8005bb0:	080087b0 	.word	0x080087b0
 8005bb4:	08008770 	.word	0x08008770
 8005bb8:	08008698 	.word	0x08008698
 8005bbc:	0800869e 	.word	0x0800869e
 8005bc0:	080086a2 	.word	0x080086a2
 8005bc4:	08005d09 	.word	0x08005d09
 8005bc8:	08005947 	.word	0x08005947

08005bcc <__cvt>:
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd2:	461f      	mov	r7, r3
 8005bd4:	bfbb      	ittet	lt
 8005bd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	461f      	movlt	r7, r3
 8005bdc:	2300      	movge	r3, #0
 8005bde:	232d      	movlt	r3, #45	; 0x2d
 8005be0:	b088      	sub	sp, #32
 8005be2:	4614      	mov	r4, r2
 8005be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005be6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005be8:	7013      	strb	r3, [r2, #0]
 8005bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005bf0:	f023 0820 	bic.w	r8, r3, #32
 8005bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bf8:	d005      	beq.n	8005c06 <__cvt+0x3a>
 8005bfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bfe:	d100      	bne.n	8005c02 <__cvt+0x36>
 8005c00:	3501      	adds	r5, #1
 8005c02:	2302      	movs	r3, #2
 8005c04:	e000      	b.n	8005c08 <__cvt+0x3c>
 8005c06:	2303      	movs	r3, #3
 8005c08:	aa07      	add	r2, sp, #28
 8005c0a:	9204      	str	r2, [sp, #16]
 8005c0c:	aa06      	add	r2, sp, #24
 8005c0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c12:	e9cd 3500 	strd	r3, r5, [sp]
 8005c16:	4622      	mov	r2, r4
 8005c18:	463b      	mov	r3, r7
 8005c1a:	f000 fe19 	bl	8006850 <_dtoa_r>
 8005c1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c22:	4606      	mov	r6, r0
 8005c24:	d102      	bne.n	8005c2c <__cvt+0x60>
 8005c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c28:	07db      	lsls	r3, r3, #31
 8005c2a:	d522      	bpl.n	8005c72 <__cvt+0xa6>
 8005c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c30:	eb06 0905 	add.w	r9, r6, r5
 8005c34:	d110      	bne.n	8005c58 <__cvt+0x8c>
 8005c36:	7833      	ldrb	r3, [r6, #0]
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d10a      	bne.n	8005c52 <__cvt+0x86>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4620      	mov	r0, r4
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa feb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005c48:	b918      	cbnz	r0, 8005c52 <__cvt+0x86>
 8005c4a:	f1c5 0501 	rsb	r5, r5, #1
 8005c4e:	f8ca 5000 	str.w	r5, [sl]
 8005c52:	f8da 3000 	ldr.w	r3, [sl]
 8005c56:	4499      	add	r9, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c64:	b108      	cbz	r0, 8005c6a <__cvt+0x9e>
 8005c66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c6a:	2230      	movs	r2, #48	; 0x30
 8005c6c:	9b07      	ldr	r3, [sp, #28]
 8005c6e:	454b      	cmp	r3, r9
 8005c70:	d307      	bcc.n	8005c82 <__cvt+0xb6>
 8005c72:	4630      	mov	r0, r6
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c78:	1b9b      	subs	r3, r3, r6
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	b008      	add	sp, #32
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	9107      	str	r1, [sp, #28]
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e7f0      	b.n	8005c6c <__cvt+0xa0>

08005c8a <__exponent>:
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	f803 2b02 	strb.w	r2, [r3], #2
 8005c94:	bfb6      	itet	lt
 8005c96:	222d      	movlt	r2, #45	; 0x2d
 8005c98:	222b      	movge	r2, #43	; 0x2b
 8005c9a:	4249      	neglt	r1, r1
 8005c9c:	2909      	cmp	r1, #9
 8005c9e:	7042      	strb	r2, [r0, #1]
 8005ca0:	dd2b      	ble.n	8005cfa <__exponent+0x70>
 8005ca2:	f10d 0407 	add.w	r4, sp, #7
 8005ca6:	46a4      	mov	ip, r4
 8005ca8:	270a      	movs	r7, #10
 8005caa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cae:	460a      	mov	r2, r1
 8005cb0:	46a6      	mov	lr, r4
 8005cb2:	fb07 1516 	mls	r5, r7, r6, r1
 8005cb6:	2a63      	cmp	r2, #99	; 0x63
 8005cb8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cc6:	dcf0      	bgt.n	8005caa <__exponent+0x20>
 8005cc8:	3130      	adds	r1, #48	; 0x30
 8005cca:	f1ae 0502 	sub.w	r5, lr, #2
 8005cce:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	1c44      	adds	r4, r0, #1
 8005cd6:	4561      	cmp	r1, ip
 8005cd8:	d30a      	bcc.n	8005cf0 <__exponent+0x66>
 8005cda:	f10d 0209 	add.w	r2, sp, #9
 8005cde:	eba2 020e 	sub.w	r2, r2, lr
 8005ce2:	4565      	cmp	r5, ip
 8005ce4:	bf88      	it	hi
 8005ce6:	2200      	movhi	r2, #0
 8005ce8:	4413      	add	r3, r2
 8005cea:	1a18      	subs	r0, r3, r0
 8005cec:	b003      	add	sp, #12
 8005cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cf4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cf8:	e7ed      	b.n	8005cd6 <__exponent+0x4c>
 8005cfa:	2330      	movs	r3, #48	; 0x30
 8005cfc:	3130      	adds	r1, #48	; 0x30
 8005cfe:	7083      	strb	r3, [r0, #2]
 8005d00:	70c1      	strb	r1, [r0, #3]
 8005d02:	1d03      	adds	r3, r0, #4
 8005d04:	e7f1      	b.n	8005cea <__exponent+0x60>
	...

08005d08 <_printf_float>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	b091      	sub	sp, #68	; 0x44
 8005d0e:	460c      	mov	r4, r1
 8005d10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d14:	4616      	mov	r6, r2
 8005d16:	461f      	mov	r7, r3
 8005d18:	4605      	mov	r5, r0
 8005d1a:	f001 fd3b 	bl	8007794 <_localeconv_r>
 8005d1e:	6803      	ldr	r3, [r0, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	9309      	str	r3, [sp, #36]	; 0x24
 8005d24:	f7fa fa14 	bl	8000150 <strlen>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d30:	900a      	str	r0, [sp, #40]	; 0x28
 8005d32:	3307      	adds	r3, #7
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	f103 0208 	add.w	r2, r3, #8
 8005d3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d40:	f8d4 b000 	ldr.w	fp, [r4]
 8005d44:	f8c8 2000 	str.w	r2, [r8]
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4b9c      	ldr	r3, [pc, #624]	; (8005fd4 <_printf_float+0x2cc>)
 8005d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d64:	f7fa fe52 	bl	8000a0c <__aeabi_dcmpun>
 8005d68:	bb70      	cbnz	r0, 8005dc8 <_printf_float+0xc0>
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4b98      	ldr	r3, [pc, #608]	; (8005fd4 <_printf_float+0x2cc>)
 8005d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d74:	f7fa fe2c 	bl	80009d0 <__aeabi_dcmple>
 8005d78:	bb30      	cbnz	r0, 8005dc8 <_printf_float+0xc0>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4651      	mov	r1, sl
 8005d82:	f7fa fe1b 	bl	80009bc <__aeabi_dcmplt>
 8005d86:	b110      	cbz	r0, 8005d8e <_printf_float+0x86>
 8005d88:	232d      	movs	r3, #45	; 0x2d
 8005d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8e:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <_printf_float+0x2d0>)
 8005d90:	4892      	ldr	r0, [pc, #584]	; (8005fdc <_printf_float+0x2d4>)
 8005d92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d96:	bf94      	ite	ls
 8005d98:	4698      	movls	r8, r3
 8005d9a:	4680      	movhi	r8, r0
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	f04f 0a00 	mov.w	sl, #0
 8005da2:	6123      	str	r3, [r4, #16]
 8005da4:	f02b 0304 	bic.w	r3, fp, #4
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	4633      	mov	r3, r6
 8005dac:	4621      	mov	r1, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	9700      	str	r7, [sp, #0]
 8005db2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005db4:	f000 f9d4 	bl	8006160 <_printf_common>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f040 8090 	bne.w	8005ede <_printf_float+0x1d6>
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	b011      	add	sp, #68	; 0x44
 8005dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc8:	4642      	mov	r2, r8
 8005dca:	4653      	mov	r3, sl
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4651      	mov	r1, sl
 8005dd0:	f7fa fe1c 	bl	8000a0c <__aeabi_dcmpun>
 8005dd4:	b148      	cbz	r0, 8005dea <_printf_float+0xe2>
 8005dd6:	f1ba 0f00 	cmp.w	sl, #0
 8005dda:	bfb8      	it	lt
 8005ddc:	232d      	movlt	r3, #45	; 0x2d
 8005dde:	4880      	ldr	r0, [pc, #512]	; (8005fe0 <_printf_float+0x2d8>)
 8005de0:	bfb8      	it	lt
 8005de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005de6:	4b7f      	ldr	r3, [pc, #508]	; (8005fe4 <_printf_float+0x2dc>)
 8005de8:	e7d3      	b.n	8005d92 <_printf_float+0x8a>
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	d142      	bne.n	8005e7a <_printf_float+0x172>
 8005df4:	2306      	movs	r3, #6
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	9206      	str	r2, [sp, #24]
 8005dfc:	aa0e      	add	r2, sp, #56	; 0x38
 8005dfe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e02:	aa0d      	add	r2, sp, #52	; 0x34
 8005e04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e08:	9203      	str	r2, [sp, #12]
 8005e0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	4642      	mov	r2, r8
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	4653      	mov	r3, sl
 8005e1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e20:	f7ff fed4 	bl	8005bcc <__cvt>
 8005e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e26:	4680      	mov	r8, r0
 8005e28:	2947      	cmp	r1, #71	; 0x47
 8005e2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e2c:	d108      	bne.n	8005e40 <_printf_float+0x138>
 8005e2e:	1cc8      	adds	r0, r1, #3
 8005e30:	db02      	blt.n	8005e38 <_printf_float+0x130>
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	4299      	cmp	r1, r3
 8005e36:	dd40      	ble.n	8005eba <_printf_float+0x1b2>
 8005e38:	f1a9 0902 	sub.w	r9, r9, #2
 8005e3c:	fa5f f989 	uxtb.w	r9, r9
 8005e40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e44:	d81f      	bhi.n	8005e86 <_printf_float+0x17e>
 8005e46:	464a      	mov	r2, r9
 8005e48:	3901      	subs	r1, #1
 8005e4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e4e:	910d      	str	r1, [sp, #52]	; 0x34
 8005e50:	f7ff ff1b 	bl	8005c8a <__exponent>
 8005e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e56:	4682      	mov	sl, r0
 8005e58:	1813      	adds	r3, r2, r0
 8005e5a:	2a01      	cmp	r2, #1
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	dc02      	bgt.n	8005e66 <_printf_float+0x15e>
 8005e60:	6822      	ldr	r2, [r4, #0]
 8005e62:	07d2      	lsls	r2, r2, #31
 8005e64:	d501      	bpl.n	8005e6a <_printf_float+0x162>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d09b      	beq.n	8005daa <_printf_float+0xa2>
 8005e72:	232d      	movs	r3, #45	; 0x2d
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	e797      	b.n	8005daa <_printf_float+0xa2>
 8005e7a:	2947      	cmp	r1, #71	; 0x47
 8005e7c:	d1bc      	bne.n	8005df8 <_printf_float+0xf0>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ba      	bne.n	8005df8 <_printf_float+0xf0>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e7b7      	b.n	8005df6 <_printf_float+0xee>
 8005e86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e8a:	d118      	bne.n	8005ebe <_printf_float+0x1b6>
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	dd0b      	ble.n	8005eaa <_printf_float+0x1a2>
 8005e92:	6121      	str	r1, [r4, #16]
 8005e94:	b913      	cbnz	r3, 8005e9c <_printf_float+0x194>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	07d0      	lsls	r0, r2, #31
 8005e9a:	d502      	bpl.n	8005ea2 <_printf_float+0x19a>
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	440b      	add	r3, r1
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	f04f 0a00 	mov.w	sl, #0
 8005ea6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea8:	e7df      	b.n	8005e6a <_printf_float+0x162>
 8005eaa:	b913      	cbnz	r3, 8005eb2 <_printf_float+0x1aa>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	07d2      	lsls	r2, r2, #31
 8005eb0:	d501      	bpl.n	8005eb6 <_printf_float+0x1ae>
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	e7f4      	b.n	8005ea0 <_printf_float+0x198>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e7f2      	b.n	8005ea0 <_printf_float+0x198>
 8005eba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	db05      	blt.n	8005ed0 <_printf_float+0x1c8>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	6121      	str	r1, [r4, #16]
 8005ec8:	07d8      	lsls	r0, r3, #31
 8005eca:	d5ea      	bpl.n	8005ea2 <_printf_float+0x19a>
 8005ecc:	1c4b      	adds	r3, r1, #1
 8005ece:	e7e7      	b.n	8005ea0 <_printf_float+0x198>
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	bfcc      	ite	gt
 8005ed4:	2201      	movgt	r2, #1
 8005ed6:	f1c1 0202 	rsble	r2, r1, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	e7e0      	b.n	8005ea0 <_printf_float+0x198>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	055a      	lsls	r2, r3, #21
 8005ee2:	d407      	bmi.n	8005ef4 <_printf_float+0x1ec>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d12b      	bne.n	8005f4a <_printf_float+0x242>
 8005ef2:	e764      	b.n	8005dbe <_printf_float+0xb6>
 8005ef4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ef8:	f240 80dd 	bls.w	80060b6 <_printf_float+0x3ae>
 8005efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	f7fa fd50 	bl	80009a8 <__aeabi_dcmpeq>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d033      	beq.n	8005f74 <_printf_float+0x26c>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <_printf_float+0x2e0>)
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	f43f af51 	beq.w	8005dbe <_printf_float+0xb6>
 8005f1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f20:	429a      	cmp	r2, r3
 8005f22:	db02      	blt.n	8005f2a <_printf_float+0x222>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	07d8      	lsls	r0, r3, #31
 8005f28:	d50f      	bpl.n	8005f4a <_printf_float+0x242>
 8005f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f af42 	beq.w	8005dbe <_printf_float+0xb6>
 8005f3a:	f04f 0800 	mov.w	r8, #0
 8005f3e:	f104 091a 	add.w	r9, r4, #26
 8005f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f44:	3b01      	subs	r3, #1
 8005f46:	4543      	cmp	r3, r8
 8005f48:	dc09      	bgt.n	8005f5e <_printf_float+0x256>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	079b      	lsls	r3, r3, #30
 8005f4e:	f100 8102 	bmi.w	8006156 <_printf_float+0x44e>
 8005f52:	68e0      	ldr	r0, [r4, #12]
 8005f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f56:	4298      	cmp	r0, r3
 8005f58:	bfb8      	it	lt
 8005f5a:	4618      	movlt	r0, r3
 8005f5c:	e731      	b.n	8005dc2 <_printf_float+0xba>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	464a      	mov	r2, r9
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f af28 	beq.w	8005dbe <_printf_float+0xb6>
 8005f6e:	f108 0801 	add.w	r8, r8, #1
 8005f72:	e7e6      	b.n	8005f42 <_printf_float+0x23a>
 8005f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dc38      	bgt.n	8005fec <_printf_float+0x2e4>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <_printf_float+0x2e0>)
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f af1a 	beq.w	8005dbe <_printf_float+0xb6>
 8005f8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d102      	bne.n	8005f98 <_printf_float+0x290>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	07d9      	lsls	r1, r3, #31
 8005f96:	d5d8      	bpl.n	8005f4a <_printf_float+0x242>
 8005f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f af0b 	beq.w	8005dbe <_printf_float+0xb6>
 8005fa8:	f04f 0900 	mov.w	r9, #0
 8005fac:	f104 0a1a 	add.w	sl, r4, #26
 8005fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	454b      	cmp	r3, r9
 8005fb6:	dc01      	bgt.n	8005fbc <_printf_float+0x2b4>
 8005fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fba:	e794      	b.n	8005ee6 <_printf_float+0x1de>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f aef9 	beq.w	8005dbe <_printf_float+0xb6>
 8005fcc:	f109 0901 	add.w	r9, r9, #1
 8005fd0:	e7ee      	b.n	8005fb0 <_printf_float+0x2a8>
 8005fd2:	bf00      	nop
 8005fd4:	7fefffff 	.word	0x7fefffff
 8005fd8:	080086a9 	.word	0x080086a9
 8005fdc:	080086ad 	.word	0x080086ad
 8005fe0:	080086b5 	.word	0x080086b5
 8005fe4:	080086b1 	.word	0x080086b1
 8005fe8:	080086b9 	.word	0x080086b9
 8005fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfa8      	it	ge
 8005ff4:	461a      	movge	r2, r3
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	dc37      	bgt.n	800606c <_printf_float+0x364>
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006004:	f104 021a 	add.w	r2, r4, #26
 8006008:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800600c:	ebaa 0309 	sub.w	r3, sl, r9
 8006010:	455b      	cmp	r3, fp
 8006012:	dc33      	bgt.n	800607c <_printf_float+0x374>
 8006014:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006018:	429a      	cmp	r2, r3
 800601a:	db3b      	blt.n	8006094 <_printf_float+0x38c>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07da      	lsls	r2, r3, #31
 8006020:	d438      	bmi.n	8006094 <_printf_float+0x38c>
 8006022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006024:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006026:	eba3 020a 	sub.w	r2, r3, sl
 800602a:	eba3 0901 	sub.w	r9, r3, r1
 800602e:	4591      	cmp	r9, r2
 8006030:	bfa8      	it	ge
 8006032:	4691      	movge	r9, r2
 8006034:	f1b9 0f00 	cmp.w	r9, #0
 8006038:	dc34      	bgt.n	80060a4 <_printf_float+0x39c>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006042:	f104 0a1a 	add.w	sl, r4, #26
 8006046:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	eba3 0309 	sub.w	r3, r3, r9
 8006050:	4543      	cmp	r3, r8
 8006052:	f77f af7a 	ble.w	8005f4a <_printf_float+0x242>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f aeac 	beq.w	8005dbe <_printf_float+0xb6>
 8006066:	f108 0801 	add.w	r8, r8, #1
 800606a:	e7ec      	b.n	8006046 <_printf_float+0x33e>
 800606c:	4613      	mov	r3, r2
 800606e:	4631      	mov	r1, r6
 8006070:	4642      	mov	r2, r8
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	d1c0      	bne.n	8005ffc <_printf_float+0x2f4>
 800607a:	e6a0      	b.n	8005dbe <_printf_float+0xb6>
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	920b      	str	r2, [sp, #44]	; 0x2c
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f ae99 	beq.w	8005dbe <_printf_float+0xb6>
 800608c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800608e:	f10b 0b01 	add.w	fp, fp, #1
 8006092:	e7b9      	b.n	8006008 <_printf_float+0x300>
 8006094:	4631      	mov	r1, r6
 8006096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609a:	4628      	mov	r0, r5
 800609c:	47b8      	blx	r7
 800609e:	3001      	adds	r0, #1
 80060a0:	d1bf      	bne.n	8006022 <_printf_float+0x31a>
 80060a2:	e68c      	b.n	8005dbe <_printf_float+0xb6>
 80060a4:	464b      	mov	r3, r9
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	eb08 020a 	add.w	r2, r8, sl
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	d1c2      	bne.n	800603a <_printf_float+0x332>
 80060b4:	e683      	b.n	8005dbe <_printf_float+0xb6>
 80060b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060b8:	2a01      	cmp	r2, #1
 80060ba:	dc01      	bgt.n	80060c0 <_printf_float+0x3b8>
 80060bc:	07db      	lsls	r3, r3, #31
 80060be:	d537      	bpl.n	8006130 <_printf_float+0x428>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4642      	mov	r2, r8
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f ae77 	beq.w	8005dbe <_printf_float+0xb6>
 80060d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	f43f ae6f 	beq.w	8005dbe <_printf_float+0xb6>
 80060e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	f7fa fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80060ec:	b9d8      	cbnz	r0, 8006126 <_printf_float+0x41e>
 80060ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f0:	f108 0201 	add.w	r2, r8, #1
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d10e      	bne.n	800611e <_printf_float+0x416>
 8006100:	e65d      	b.n	8005dbe <_printf_float+0xb6>
 8006102:	2301      	movs	r3, #1
 8006104:	464a      	mov	r2, r9
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	f43f ae56 	beq.w	8005dbe <_printf_float+0xb6>
 8006112:	f108 0801 	add.w	r8, r8, #1
 8006116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006118:	3b01      	subs	r3, #1
 800611a:	4543      	cmp	r3, r8
 800611c:	dcf1      	bgt.n	8006102 <_printf_float+0x3fa>
 800611e:	4653      	mov	r3, sl
 8006120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006124:	e6e0      	b.n	8005ee8 <_printf_float+0x1e0>
 8006126:	f04f 0800 	mov.w	r8, #0
 800612a:	f104 091a 	add.w	r9, r4, #26
 800612e:	e7f2      	b.n	8006116 <_printf_float+0x40e>
 8006130:	2301      	movs	r3, #1
 8006132:	4642      	mov	r2, r8
 8006134:	e7df      	b.n	80060f6 <_printf_float+0x3ee>
 8006136:	2301      	movs	r3, #1
 8006138:	464a      	mov	r2, r9
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f ae3c 	beq.w	8005dbe <_printf_float+0xb6>
 8006146:	f108 0801 	add.w	r8, r8, #1
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800614e:	1a5b      	subs	r3, r3, r1
 8006150:	4543      	cmp	r3, r8
 8006152:	dcf0      	bgt.n	8006136 <_printf_float+0x42e>
 8006154:	e6fd      	b.n	8005f52 <_printf_float+0x24a>
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	f104 0919 	add.w	r9, r4, #25
 800615e:	e7f4      	b.n	800614a <_printf_float+0x442>

08006160 <_printf_common>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	4616      	mov	r6, r2
 8006166:	4699      	mov	r9, r3
 8006168:	688a      	ldr	r2, [r1, #8]
 800616a:	690b      	ldr	r3, [r1, #16]
 800616c:	4607      	mov	r7, r0
 800616e:	4293      	cmp	r3, r2
 8006170:	bfb8      	it	lt
 8006172:	4613      	movlt	r3, r2
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800617a:	460c      	mov	r4, r1
 800617c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006180:	b10a      	cbz	r2, 8006186 <_printf_common+0x26>
 8006182:	3301      	adds	r3, #1
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	0699      	lsls	r1, r3, #26
 800618a:	bf42      	ittt	mi
 800618c:	6833      	ldrmi	r3, [r6, #0]
 800618e:	3302      	addmi	r3, #2
 8006190:	6033      	strmi	r3, [r6, #0]
 8006192:	6825      	ldr	r5, [r4, #0]
 8006194:	f015 0506 	ands.w	r5, r5, #6
 8006198:	d106      	bne.n	80061a8 <_printf_common+0x48>
 800619a:	f104 0a19 	add.w	sl, r4, #25
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	6832      	ldr	r2, [r6, #0]
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dc28      	bgt.n	80061fa <_printf_common+0x9a>
 80061a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061ac:	1e13      	subs	r3, r2, #0
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	bf18      	it	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	0692      	lsls	r2, r2, #26
 80061b6:	d42d      	bmi.n	8006214 <_printf_common+0xb4>
 80061b8:	4649      	mov	r1, r9
 80061ba:	4638      	mov	r0, r7
 80061bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c0:	47c0      	blx	r8
 80061c2:	3001      	adds	r0, #1
 80061c4:	d020      	beq.n	8006208 <_printf_common+0xa8>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	68e5      	ldr	r5, [r4, #12]
 80061ca:	f003 0306 	and.w	r3, r3, #6
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	bf18      	it	ne
 80061d2:	2500      	movne	r5, #0
 80061d4:	6832      	ldr	r2, [r6, #0]
 80061d6:	f04f 0600 	mov.w	r6, #0
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	bf08      	it	eq
 80061de:	1aad      	subeq	r5, r5, r2
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	bf08      	it	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfc4      	itt	gt
 80061ec:	1a9b      	subgt	r3, r3, r2
 80061ee:	18ed      	addgt	r5, r5, r3
 80061f0:	341a      	adds	r4, #26
 80061f2:	42b5      	cmp	r5, r6
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xcc>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xac>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4649      	mov	r1, r9
 8006200:	4638      	mov	r0, r7
 8006202:	47c0      	blx	r8
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xb0>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c4      	b.n	800619e <_printf_common+0x3e>
 8006214:	2030      	movs	r0, #48	; 0x30
 8006216:	18e1      	adds	r1, r4, r3
 8006218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006222:	4422      	add	r2, r4
 8006224:	3302      	adds	r3, #2
 8006226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622a:	e7c5      	b.n	80061b8 <_printf_common+0x58>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4649      	mov	r1, r9
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xa8>
 800623a:	3601      	adds	r6, #1
 800623c:	e7d9      	b.n	80061f2 <_printf_common+0x92>
	...

08006240 <_printf_i>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	7e0f      	ldrb	r7, [r1, #24]
 8006246:	4691      	mov	r9, r2
 8006248:	2f78      	cmp	r7, #120	; 0x78
 800624a:	4680      	mov	r8, r0
 800624c:	460c      	mov	r4, r1
 800624e:	469a      	mov	sl, r3
 8006250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006256:	d807      	bhi.n	8006268 <_printf_i+0x28>
 8006258:	2f62      	cmp	r7, #98	; 0x62
 800625a:	d80a      	bhi.n	8006272 <_printf_i+0x32>
 800625c:	2f00      	cmp	r7, #0
 800625e:	f000 80d9 	beq.w	8006414 <_printf_i+0x1d4>
 8006262:	2f58      	cmp	r7, #88	; 0x58
 8006264:	f000 80a4 	beq.w	80063b0 <_printf_i+0x170>
 8006268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006270:	e03a      	b.n	80062e8 <_printf_i+0xa8>
 8006272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006276:	2b15      	cmp	r3, #21
 8006278:	d8f6      	bhi.n	8006268 <_printf_i+0x28>
 800627a:	a101      	add	r1, pc, #4	; (adr r1, 8006280 <_printf_i+0x40>)
 800627c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062ed 	.word	0x080062ed
 8006288:	08006269 	.word	0x08006269
 800628c:	08006269 	.word	0x08006269
 8006290:	08006269 	.word	0x08006269
 8006294:	08006269 	.word	0x08006269
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006269 	.word	0x08006269
 80062a0:	08006269 	.word	0x08006269
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	080063fb 	.word	0x080063fb
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080063dd 	.word	0x080063dd
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	0800641d 	.word	0x0800641d
 80062c4:	08006269 	.word	0x08006269
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063e5 	.word	0x080063e5
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0a4      	b.n	8006436 <_printf_i+0x1f6>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	6829      	ldr	r1, [r5, #0]
 80062f0:	0606      	lsls	r6, r0, #24
 80062f2:	f101 0304 	add.w	r3, r1, #4
 80062f6:	d50a      	bpl.n	800630e <_printf_i+0xce>
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	da03      	bge.n	8006308 <_printf_i+0xc8>
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	4276      	negs	r6, r6
 8006304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006308:	230a      	movs	r3, #10
 800630a:	485e      	ldr	r0, [pc, #376]	; (8006484 <_printf_i+0x244>)
 800630c:	e019      	b.n	8006342 <_printf_i+0x102>
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	bf18      	it	ne
 8006318:	b236      	sxthne	r6, r6
 800631a:	e7ef      	b.n	80062fc <_printf_i+0xbc>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	1d19      	adds	r1, r3, #4
 8006322:	6029      	str	r1, [r5, #0]
 8006324:	0601      	lsls	r1, r0, #24
 8006326:	d501      	bpl.n	800632c <_printf_i+0xec>
 8006328:	681e      	ldr	r6, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0xf2>
 800632c:	0646      	lsls	r6, r0, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0xe8>
 8006330:	881e      	ldrh	r6, [r3, #0]
 8006332:	2f6f      	cmp	r7, #111	; 0x6f
 8006334:	bf0c      	ite	eq
 8006336:	2308      	moveq	r3, #8
 8006338:	230a      	movne	r3, #10
 800633a:	4852      	ldr	r0, [pc, #328]	; (8006484 <_printf_i+0x244>)
 800633c:	2100      	movs	r1, #0
 800633e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006342:	6865      	ldr	r5, [r4, #4]
 8006344:	2d00      	cmp	r5, #0
 8006346:	bfa8      	it	ge
 8006348:	6821      	ldrge	r1, [r4, #0]
 800634a:	60a5      	str	r5, [r4, #8]
 800634c:	bfa4      	itt	ge
 800634e:	f021 0104 	bicge.w	r1, r1, #4
 8006352:	6021      	strge	r1, [r4, #0]
 8006354:	b90e      	cbnz	r6, 800635a <_printf_i+0x11a>
 8006356:	2d00      	cmp	r5, #0
 8006358:	d04d      	beq.n	80063f6 <_printf_i+0x1b6>
 800635a:	4615      	mov	r5, r2
 800635c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006360:	fb03 6711 	mls	r7, r3, r1, r6
 8006364:	5dc7      	ldrb	r7, [r0, r7]
 8006366:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800636a:	4637      	mov	r7, r6
 800636c:	42bb      	cmp	r3, r7
 800636e:	460e      	mov	r6, r1
 8006370:	d9f4      	bls.n	800635c <_printf_i+0x11c>
 8006372:	2b08      	cmp	r3, #8
 8006374:	d10b      	bne.n	800638e <_printf_i+0x14e>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	07de      	lsls	r6, r3, #31
 800637a:	d508      	bpl.n	800638e <_printf_i+0x14e>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	6861      	ldr	r1, [r4, #4]
 8006380:	4299      	cmp	r1, r3
 8006382:	bfde      	ittt	le
 8006384:	2330      	movle	r3, #48	; 0x30
 8006386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800638a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638e:	1b52      	subs	r2, r2, r5
 8006390:	6122      	str	r2, [r4, #16]
 8006392:	464b      	mov	r3, r9
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f8cd a000 	str.w	sl, [sp]
 800639c:	aa03      	add	r2, sp, #12
 800639e:	f7ff fedf 	bl	8006160 <_printf_common>
 80063a2:	3001      	adds	r0, #1
 80063a4:	d14c      	bne.n	8006440 <_printf_i+0x200>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	b004      	add	sp, #16
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	4834      	ldr	r0, [pc, #208]	; (8006484 <_printf_i+0x244>)
 80063b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b6:	6829      	ldr	r1, [r5, #0]
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80063be:	6029      	str	r1, [r5, #0]
 80063c0:	061d      	lsls	r5, r3, #24
 80063c2:	d514      	bpl.n	80063ee <_printf_i+0x1ae>
 80063c4:	07df      	lsls	r7, r3, #31
 80063c6:	bf44      	itt	mi
 80063c8:	f043 0320 	orrmi.w	r3, r3, #32
 80063cc:	6023      	strmi	r3, [r4, #0]
 80063ce:	b91e      	cbnz	r6, 80063d8 <_printf_i+0x198>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	f023 0320 	bic.w	r3, r3, #32
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	2310      	movs	r3, #16
 80063da:	e7af      	b.n	800633c <_printf_i+0xfc>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	f043 0320 	orr.w	r3, r3, #32
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	2378      	movs	r3, #120	; 0x78
 80063e6:	4828      	ldr	r0, [pc, #160]	; (8006488 <_printf_i+0x248>)
 80063e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ec:	e7e3      	b.n	80063b6 <_printf_i+0x176>
 80063ee:	0659      	lsls	r1, r3, #25
 80063f0:	bf48      	it	mi
 80063f2:	b2b6      	uxthmi	r6, r6
 80063f4:	e7e6      	b.n	80063c4 <_printf_i+0x184>
 80063f6:	4615      	mov	r5, r2
 80063f8:	e7bb      	b.n	8006372 <_printf_i+0x132>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	6826      	ldr	r6, [r4, #0]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6961      	ldr	r1, [r4, #20]
 8006402:	6028      	str	r0, [r5, #0]
 8006404:	0635      	lsls	r5, r6, #24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	d501      	bpl.n	800640e <_printf_i+0x1ce>
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	e002      	b.n	8006414 <_printf_i+0x1d4>
 800640e:	0670      	lsls	r0, r6, #25
 8006410:	d5fb      	bpl.n	800640a <_printf_i+0x1ca>
 8006412:	8019      	strh	r1, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	4615      	mov	r5, r2
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	e7ba      	b.n	8006392 <_printf_i+0x152>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	2100      	movs	r1, #0
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	602a      	str	r2, [r5, #0]
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	4628      	mov	r0, r5
 800642a:	f001 fa27 	bl	800787c <memchr>
 800642e:	b108      	cbz	r0, 8006434 <_printf_i+0x1f4>
 8006430:	1b40      	subs	r0, r0, r5
 8006432:	6060      	str	r0, [r4, #4]
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643e:	e7a8      	b.n	8006392 <_printf_i+0x152>
 8006440:	462a      	mov	r2, r5
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	47d0      	blx	sl
 800644a:	3001      	adds	r0, #1
 800644c:	d0ab      	beq.n	80063a6 <_printf_i+0x166>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	079b      	lsls	r3, r3, #30
 8006452:	d413      	bmi.n	800647c <_printf_i+0x23c>
 8006454:	68e0      	ldr	r0, [r4, #12]
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	4298      	cmp	r0, r3
 800645a:	bfb8      	it	lt
 800645c:	4618      	movlt	r0, r3
 800645e:	e7a4      	b.n	80063aa <_printf_i+0x16a>
 8006460:	2301      	movs	r3, #1
 8006462:	4632      	mov	r2, r6
 8006464:	4649      	mov	r1, r9
 8006466:	4640      	mov	r0, r8
 8006468:	47d0      	blx	sl
 800646a:	3001      	adds	r0, #1
 800646c:	d09b      	beq.n	80063a6 <_printf_i+0x166>
 800646e:	3501      	adds	r5, #1
 8006470:	68e3      	ldr	r3, [r4, #12]
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	1a5b      	subs	r3, r3, r1
 8006476:	42ab      	cmp	r3, r5
 8006478:	dcf2      	bgt.n	8006460 <_printf_i+0x220>
 800647a:	e7eb      	b.n	8006454 <_printf_i+0x214>
 800647c:	2500      	movs	r5, #0
 800647e:	f104 0619 	add.w	r6, r4, #25
 8006482:	e7f5      	b.n	8006470 <_printf_i+0x230>
 8006484:	080086bb 	.word	0x080086bb
 8006488:	080086cc 	.word	0x080086cc

0800648c <iprintf>:
 800648c:	b40f      	push	{r0, r1, r2, r3}
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <iprintf+0x2c>)
 8006490:	b513      	push	{r0, r1, r4, lr}
 8006492:	681c      	ldr	r4, [r3, #0]
 8006494:	b124      	cbz	r4, 80064a0 <iprintf+0x14>
 8006496:	69a3      	ldr	r3, [r4, #24]
 8006498:	b913      	cbnz	r3, 80064a0 <iprintf+0x14>
 800649a:	4620      	mov	r0, r4
 800649c:	f001 f8dc 	bl	8007658 <__sinit>
 80064a0:	ab05      	add	r3, sp, #20
 80064a2:	4620      	mov	r0, r4
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	68a1      	ldr	r1, [r4, #8]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	f7ff fa5f 	bl	800596c <_vfiprintf_r>
 80064ae:	b002      	add	sp, #8
 80064b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b4:	b004      	add	sp, #16
 80064b6:	4770      	bx	lr
 80064b8:	2000000c 	.word	0x2000000c

080064bc <_puts_r>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	460e      	mov	r6, r1
 80064c0:	4605      	mov	r5, r0
 80064c2:	b118      	cbz	r0, 80064cc <_puts_r+0x10>
 80064c4:	6983      	ldr	r3, [r0, #24]
 80064c6:	b90b      	cbnz	r3, 80064cc <_puts_r+0x10>
 80064c8:	f001 f8c6 	bl	8007658 <__sinit>
 80064cc:	69ab      	ldr	r3, [r5, #24]
 80064ce:	68ac      	ldr	r4, [r5, #8]
 80064d0:	b913      	cbnz	r3, 80064d8 <_puts_r+0x1c>
 80064d2:	4628      	mov	r0, r5
 80064d4:	f001 f8c0 	bl	8007658 <__sinit>
 80064d8:	4b2c      	ldr	r3, [pc, #176]	; (800658c <_puts_r+0xd0>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	d120      	bne.n	8006520 <_puts_r+0x64>
 80064de:	686c      	ldr	r4, [r5, #4]
 80064e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e2:	07db      	lsls	r3, r3, #31
 80064e4:	d405      	bmi.n	80064f2 <_puts_r+0x36>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	0598      	lsls	r0, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_puts_r+0x36>
 80064ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ee:	f001 f956 	bl	800779e <__retarget_lock_acquire_recursive>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	0719      	lsls	r1, r3, #28
 80064f6:	d51d      	bpl.n	8006534 <_puts_r+0x78>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	b1db      	cbz	r3, 8006534 <_puts_r+0x78>
 80064fc:	3e01      	subs	r6, #1
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006504:	3b01      	subs	r3, #1
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	bb39      	cbnz	r1, 800655a <_puts_r+0x9e>
 800650a:	2b00      	cmp	r3, #0
 800650c:	da38      	bge.n	8006580 <_puts_r+0xc4>
 800650e:	4622      	mov	r2, r4
 8006510:	210a      	movs	r1, #10
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f848 	bl	80065a8 <__swbuf_r>
 8006518:	3001      	adds	r0, #1
 800651a:	d011      	beq.n	8006540 <_puts_r+0x84>
 800651c:	250a      	movs	r5, #10
 800651e:	e011      	b.n	8006544 <_puts_r+0x88>
 8006520:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <_puts_r+0xd4>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d101      	bne.n	800652a <_puts_r+0x6e>
 8006526:	68ac      	ldr	r4, [r5, #8]
 8006528:	e7da      	b.n	80064e0 <_puts_r+0x24>
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <_puts_r+0xd8>)
 800652c:	429c      	cmp	r4, r3
 800652e:	bf08      	it	eq
 8006530:	68ec      	ldreq	r4, [r5, #12]
 8006532:	e7d5      	b.n	80064e0 <_puts_r+0x24>
 8006534:	4621      	mov	r1, r4
 8006536:	4628      	mov	r0, r5
 8006538:	f000 f888 	bl	800664c <__swsetup_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	d0dd      	beq.n	80064fc <_puts_r+0x40>
 8006540:	f04f 35ff 	mov.w	r5, #4294967295
 8006544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006546:	07da      	lsls	r2, r3, #31
 8006548:	d405      	bmi.n	8006556 <_puts_r+0x9a>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	059b      	lsls	r3, r3, #22
 800654e:	d402      	bmi.n	8006556 <_puts_r+0x9a>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f001 f925 	bl	80077a0 <__retarget_lock_release_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	2b00      	cmp	r3, #0
 800655c:	da04      	bge.n	8006568 <_puts_r+0xac>
 800655e:	69a2      	ldr	r2, [r4, #24]
 8006560:	429a      	cmp	r2, r3
 8006562:	dc06      	bgt.n	8006572 <_puts_r+0xb6>
 8006564:	290a      	cmp	r1, #10
 8006566:	d004      	beq.n	8006572 <_puts_r+0xb6>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	7019      	strb	r1, [r3, #0]
 8006570:	e7c5      	b.n	80064fe <_puts_r+0x42>
 8006572:	4622      	mov	r2, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f817 	bl	80065a8 <__swbuf_r>
 800657a:	3001      	adds	r0, #1
 800657c:	d1bf      	bne.n	80064fe <_puts_r+0x42>
 800657e:	e7df      	b.n	8006540 <_puts_r+0x84>
 8006580:	250a      	movs	r5, #10
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	701d      	strb	r5, [r3, #0]
 800658a:	e7db      	b.n	8006544 <_puts_r+0x88>
 800658c:	08008790 	.word	0x08008790
 8006590:	080087b0 	.word	0x080087b0
 8006594:	08008770 	.word	0x08008770

08006598 <puts>:
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <puts+0xc>)
 800659a:	4601      	mov	r1, r0
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	f7ff bf8d 	b.w	80064bc <_puts_r>
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c

080065a8 <__swbuf_r>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	460e      	mov	r6, r1
 80065ac:	4614      	mov	r4, r2
 80065ae:	4605      	mov	r5, r0
 80065b0:	b118      	cbz	r0, 80065ba <__swbuf_r+0x12>
 80065b2:	6983      	ldr	r3, [r0, #24]
 80065b4:	b90b      	cbnz	r3, 80065ba <__swbuf_r+0x12>
 80065b6:	f001 f84f 	bl	8007658 <__sinit>
 80065ba:	4b21      	ldr	r3, [pc, #132]	; (8006640 <__swbuf_r+0x98>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d12b      	bne.n	8006618 <__swbuf_r+0x70>
 80065c0:	686c      	ldr	r4, [r5, #4]
 80065c2:	69a3      	ldr	r3, [r4, #24]
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	071a      	lsls	r2, r3, #28
 80065ca:	d52f      	bpl.n	800662c <__swbuf_r+0x84>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	b36b      	cbz	r3, 800662c <__swbuf_r+0x84>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	b2f6      	uxtb	r6, r6
 80065d6:	1ac0      	subs	r0, r0, r3
 80065d8:	6963      	ldr	r3, [r4, #20]
 80065da:	4637      	mov	r7, r6
 80065dc:	4283      	cmp	r3, r0
 80065de:	dc04      	bgt.n	80065ea <__swbuf_r+0x42>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 ffa4 	bl	8007530 <_fflush_r>
 80065e8:	bb30      	cbnz	r0, 8006638 <__swbuf_r+0x90>
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	3001      	adds	r0, #1
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60a3      	str	r3, [r4, #8]
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	701e      	strb	r6, [r3, #0]
 80065fa:	6963      	ldr	r3, [r4, #20]
 80065fc:	4283      	cmp	r3, r0
 80065fe:	d004      	beq.n	800660a <__swbuf_r+0x62>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d506      	bpl.n	8006614 <__swbuf_r+0x6c>
 8006606:	2e0a      	cmp	r6, #10
 8006608:	d104      	bne.n	8006614 <__swbuf_r+0x6c>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f000 ff8f 	bl	8007530 <_fflush_r>
 8006612:	b988      	cbnz	r0, 8006638 <__swbuf_r+0x90>
 8006614:	4638      	mov	r0, r7
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <__swbuf_r+0x9c>)
 800661a:	429c      	cmp	r4, r3
 800661c:	d101      	bne.n	8006622 <__swbuf_r+0x7a>
 800661e:	68ac      	ldr	r4, [r5, #8]
 8006620:	e7cf      	b.n	80065c2 <__swbuf_r+0x1a>
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <__swbuf_r+0xa0>)
 8006624:	429c      	cmp	r4, r3
 8006626:	bf08      	it	eq
 8006628:	68ec      	ldreq	r4, [r5, #12]
 800662a:	e7ca      	b.n	80065c2 <__swbuf_r+0x1a>
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f80c 	bl	800664c <__swsetup_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	d0cb      	beq.n	80065d0 <__swbuf_r+0x28>
 8006638:	f04f 37ff 	mov.w	r7, #4294967295
 800663c:	e7ea      	b.n	8006614 <__swbuf_r+0x6c>
 800663e:	bf00      	nop
 8006640:	08008790 	.word	0x08008790
 8006644:	080087b0 	.word	0x080087b0
 8006648:	08008770 	.word	0x08008770

0800664c <__swsetup_r>:
 800664c:	4b32      	ldr	r3, [pc, #200]	; (8006718 <__swsetup_r+0xcc>)
 800664e:	b570      	push	{r4, r5, r6, lr}
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	4606      	mov	r6, r0
 8006654:	460c      	mov	r4, r1
 8006656:	b125      	cbz	r5, 8006662 <__swsetup_r+0x16>
 8006658:	69ab      	ldr	r3, [r5, #24]
 800665a:	b913      	cbnz	r3, 8006662 <__swsetup_r+0x16>
 800665c:	4628      	mov	r0, r5
 800665e:	f000 fffb 	bl	8007658 <__sinit>
 8006662:	4b2e      	ldr	r3, [pc, #184]	; (800671c <__swsetup_r+0xd0>)
 8006664:	429c      	cmp	r4, r3
 8006666:	d10f      	bne.n	8006688 <__swsetup_r+0x3c>
 8006668:	686c      	ldr	r4, [r5, #4]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006670:	0719      	lsls	r1, r3, #28
 8006672:	d42c      	bmi.n	80066ce <__swsetup_r+0x82>
 8006674:	06dd      	lsls	r5, r3, #27
 8006676:	d411      	bmi.n	800669c <__swsetup_r+0x50>
 8006678:	2309      	movs	r3, #9
 800667a:	6033      	str	r3, [r6, #0]
 800667c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	81a3      	strh	r3, [r4, #12]
 8006686:	e03e      	b.n	8006706 <__swsetup_r+0xba>
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <__swsetup_r+0xd4>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d101      	bne.n	8006692 <__swsetup_r+0x46>
 800668e:	68ac      	ldr	r4, [r5, #8]
 8006690:	e7eb      	b.n	800666a <__swsetup_r+0x1e>
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <__swsetup_r+0xd8>)
 8006694:	429c      	cmp	r4, r3
 8006696:	bf08      	it	eq
 8006698:	68ec      	ldreq	r4, [r5, #12]
 800669a:	e7e6      	b.n	800666a <__swsetup_r+0x1e>
 800669c:	0758      	lsls	r0, r3, #29
 800669e:	d512      	bpl.n	80066c6 <__swsetup_r+0x7a>
 80066a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a2:	b141      	cbz	r1, 80066b6 <__swsetup_r+0x6a>
 80066a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__swsetup_r+0x66>
 80066ac:	4630      	mov	r0, r6
 80066ae:	f001 fc97 	bl	8007fe0 <_free_r>
 80066b2:	2300      	movs	r3, #0
 80066b4:	6363      	str	r3, [r4, #52]	; 0x34
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	b94b      	cbnz	r3, 80066e6 <__swsetup_r+0x9a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d003      	beq.n	80066e6 <__swsetup_r+0x9a>
 80066de:	4621      	mov	r1, r4
 80066e0:	4630      	mov	r0, r6
 80066e2:	f001 f883 	bl	80077ec <__smakebuf_r>
 80066e6:	89a0      	ldrh	r0, [r4, #12]
 80066e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ec:	f010 0301 	ands.w	r3, r0, #1
 80066f0:	d00a      	beq.n	8006708 <__swsetup_r+0xbc>
 80066f2:	2300      	movs	r3, #0
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	425b      	negs	r3, r3
 80066fa:	61a3      	str	r3, [r4, #24]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	b943      	cbnz	r3, 8006712 <__swsetup_r+0xc6>
 8006700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006704:	d1ba      	bne.n	800667c <__swsetup_r+0x30>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	0781      	lsls	r1, r0, #30
 800670a:	bf58      	it	pl
 800670c:	6963      	ldrpl	r3, [r4, #20]
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	e7f4      	b.n	80066fc <__swsetup_r+0xb0>
 8006712:	2000      	movs	r0, #0
 8006714:	e7f7      	b.n	8006706 <__swsetup_r+0xba>
 8006716:	bf00      	nop
 8006718:	2000000c 	.word	0x2000000c
 800671c:	08008790 	.word	0x08008790
 8006720:	080087b0 	.word	0x080087b0
 8006724:	08008770 	.word	0x08008770

08006728 <abort>:
 8006728:	2006      	movs	r0, #6
 800672a:	b508      	push	{r3, lr}
 800672c:	f001 fd6c 	bl	8008208 <raise>
 8006730:	2001      	movs	r0, #1
 8006732:	f7fb fdb8 	bl	80022a6 <_exit>

08006736 <quorem>:
 8006736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	6903      	ldr	r3, [r0, #16]
 800673c:	690c      	ldr	r4, [r1, #16]
 800673e:	4607      	mov	r7, r0
 8006740:	42a3      	cmp	r3, r4
 8006742:	f2c0 8082 	blt.w	800684a <quorem+0x114>
 8006746:	3c01      	subs	r4, #1
 8006748:	f100 0514 	add.w	r5, r0, #20
 800674c:	f101 0814 	add.w	r8, r1, #20
 8006750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800675a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800675e:	3301      	adds	r3, #1
 8006760:	429a      	cmp	r2, r3
 8006762:	fbb2 f6f3 	udiv	r6, r2, r3
 8006766:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800676a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800676e:	d331      	bcc.n	80067d4 <quorem+0x9e>
 8006770:	f04f 0e00 	mov.w	lr, #0
 8006774:	4640      	mov	r0, r8
 8006776:	46ac      	mov	ip, r5
 8006778:	46f2      	mov	sl, lr
 800677a:	f850 2b04 	ldr.w	r2, [r0], #4
 800677e:	b293      	uxth	r3, r2
 8006780:	fb06 e303 	mla	r3, r6, r3, lr
 8006784:	0c12      	lsrs	r2, r2, #16
 8006786:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800678a:	b29b      	uxth	r3, r3
 800678c:	fb06 e202 	mla	r2, r6, r2, lr
 8006790:	ebaa 0303 	sub.w	r3, sl, r3
 8006794:	f8dc a000 	ldr.w	sl, [ip]
 8006798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800679c:	fa1f fa8a 	uxth.w	sl, sl
 80067a0:	4453      	add	r3, sl
 80067a2:	f8dc a000 	ldr.w	sl, [ip]
 80067a6:	b292      	uxth	r2, r2
 80067a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b6:	4581      	cmp	r9, r0
 80067b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067bc:	f84c 3b04 	str.w	r3, [ip], #4
 80067c0:	d2db      	bcs.n	800677a <quorem+0x44>
 80067c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80067c6:	b92b      	cbnz	r3, 80067d4 <quorem+0x9e>
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	3b04      	subs	r3, #4
 80067cc:	429d      	cmp	r5, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	d32f      	bcc.n	8006832 <quorem+0xfc>
 80067d2:	613c      	str	r4, [r7, #16]
 80067d4:	4638      	mov	r0, r7
 80067d6:	f001 faeb 	bl	8007db0 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	db25      	blt.n	800682a <quorem+0xf4>
 80067de:	4628      	mov	r0, r5
 80067e0:	f04f 0c00 	mov.w	ip, #0
 80067e4:	3601      	adds	r6, #1
 80067e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80067ea:	f8d0 e000 	ldr.w	lr, [r0]
 80067ee:	b28b      	uxth	r3, r1
 80067f0:	ebac 0303 	sub.w	r3, ip, r3
 80067f4:	fa1f f28e 	uxth.w	r2, lr
 80067f8:	4413      	add	r3, r2
 80067fa:	0c0a      	lsrs	r2, r1, #16
 80067fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006804:	b29b      	uxth	r3, r3
 8006806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800680a:	45c1      	cmp	r9, r8
 800680c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006810:	f840 3b04 	str.w	r3, [r0], #4
 8006814:	d2e7      	bcs.n	80067e6 <quorem+0xb0>
 8006816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800681a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800681e:	b922      	cbnz	r2, 800682a <quorem+0xf4>
 8006820:	3b04      	subs	r3, #4
 8006822:	429d      	cmp	r5, r3
 8006824:	461a      	mov	r2, r3
 8006826:	d30a      	bcc.n	800683e <quorem+0x108>
 8006828:	613c      	str	r4, [r7, #16]
 800682a:	4630      	mov	r0, r6
 800682c:	b003      	add	sp, #12
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	3b04      	subs	r3, #4
 8006836:	2a00      	cmp	r2, #0
 8006838:	d1cb      	bne.n	80067d2 <quorem+0x9c>
 800683a:	3c01      	subs	r4, #1
 800683c:	e7c6      	b.n	80067cc <quorem+0x96>
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	3b04      	subs	r3, #4
 8006842:	2a00      	cmp	r2, #0
 8006844:	d1f0      	bne.n	8006828 <quorem+0xf2>
 8006846:	3c01      	subs	r4, #1
 8006848:	e7eb      	b.n	8006822 <quorem+0xec>
 800684a:	2000      	movs	r0, #0
 800684c:	e7ee      	b.n	800682c <quorem+0xf6>
	...

08006850 <_dtoa_r>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	4616      	mov	r6, r2
 8006856:	461f      	mov	r7, r3
 8006858:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800685a:	b099      	sub	sp, #100	; 0x64
 800685c:	4605      	mov	r5, r0
 800685e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006862:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006866:	b974      	cbnz	r4, 8006886 <_dtoa_r+0x36>
 8006868:	2010      	movs	r0, #16
 800686a:	f000 ffff 	bl	800786c <malloc>
 800686e:	4602      	mov	r2, r0
 8006870:	6268      	str	r0, [r5, #36]	; 0x24
 8006872:	b920      	cbnz	r0, 800687e <_dtoa_r+0x2e>
 8006874:	21ea      	movs	r1, #234	; 0xea
 8006876:	4ba8      	ldr	r3, [pc, #672]	; (8006b18 <_dtoa_r+0x2c8>)
 8006878:	48a8      	ldr	r0, [pc, #672]	; (8006b1c <_dtoa_r+0x2cc>)
 800687a:	f7fe ffed 	bl	8005858 <__assert_func>
 800687e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006882:	6004      	str	r4, [r0, #0]
 8006884:	60c4      	str	r4, [r0, #12]
 8006886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	b151      	cbz	r1, 80068a2 <_dtoa_r+0x52>
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	2301      	movs	r3, #1
 8006890:	4093      	lsls	r3, r2
 8006892:	604a      	str	r2, [r1, #4]
 8006894:	608b      	str	r3, [r1, #8]
 8006896:	4628      	mov	r0, r5
 8006898:	f001 f84c 	bl	8007934 <_Bfree>
 800689c:	2200      	movs	r2, #0
 800689e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	1e3b      	subs	r3, r7, #0
 80068a4:	bfaf      	iteee	ge
 80068a6:	2300      	movge	r3, #0
 80068a8:	2201      	movlt	r2, #1
 80068aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068ae:	9305      	strlt	r3, [sp, #20]
 80068b0:	bfa8      	it	ge
 80068b2:	f8c8 3000 	strge.w	r3, [r8]
 80068b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068ba:	4b99      	ldr	r3, [pc, #612]	; (8006b20 <_dtoa_r+0x2d0>)
 80068bc:	bfb8      	it	lt
 80068be:	f8c8 2000 	strlt.w	r2, [r8]
 80068c2:	ea33 0309 	bics.w	r3, r3, r9
 80068c6:	d119      	bne.n	80068fc <_dtoa_r+0xac>
 80068c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80068cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068d4:	4333      	orrs	r3, r6
 80068d6:	f000 857f 	beq.w	80073d8 <_dtoa_r+0xb88>
 80068da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068dc:	b953      	cbnz	r3, 80068f4 <_dtoa_r+0xa4>
 80068de:	4b91      	ldr	r3, [pc, #580]	; (8006b24 <_dtoa_r+0x2d4>)
 80068e0:	e022      	b.n	8006928 <_dtoa_r+0xd8>
 80068e2:	4b91      	ldr	r3, [pc, #580]	; (8006b28 <_dtoa_r+0x2d8>)
 80068e4:	9303      	str	r3, [sp, #12]
 80068e6:	3308      	adds	r3, #8
 80068e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9803      	ldr	r0, [sp, #12]
 80068ee:	b019      	add	sp, #100	; 0x64
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	4b8b      	ldr	r3, [pc, #556]	; (8006b24 <_dtoa_r+0x2d4>)
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	3303      	adds	r3, #3
 80068fa:	e7f5      	b.n	80068e8 <_dtoa_r+0x98>
 80068fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006900:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	f7fa f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8006910:	4680      	mov	r8, r0
 8006912:	b158      	cbz	r0, 800692c <_dtoa_r+0xdc>
 8006914:	2301      	movs	r3, #1
 8006916:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8558 	beq.w	80073d2 <_dtoa_r+0xb82>
 8006922:	4882      	ldr	r0, [pc, #520]	; (8006b2c <_dtoa_r+0x2dc>)
 8006924:	6018      	str	r0, [r3, #0]
 8006926:	1e43      	subs	r3, r0, #1
 8006928:	9303      	str	r3, [sp, #12]
 800692a:	e7df      	b.n	80068ec <_dtoa_r+0x9c>
 800692c:	ab16      	add	r3, sp, #88	; 0x58
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	ab17      	add	r3, sp, #92	; 0x5c
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4628      	mov	r0, r5
 8006936:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800693a:	f001 fae1 	bl	8007f00 <__d2b>
 800693e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006942:	4683      	mov	fp, r0
 8006944:	2c00      	cmp	r4, #0
 8006946:	d07f      	beq.n	8006a48 <_dtoa_r+0x1f8>
 8006948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800694c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006956:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800695a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800695e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006962:	2200      	movs	r2, #0
 8006964:	4b72      	ldr	r3, [pc, #456]	; (8006b30 <_dtoa_r+0x2e0>)
 8006966:	f7f9 fbff 	bl	8000168 <__aeabi_dsub>
 800696a:	a365      	add	r3, pc, #404	; (adr r3, 8006b00 <_dtoa_r+0x2b0>)
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f7f9 fdb2 	bl	80004d8 <__aeabi_dmul>
 8006974:	a364      	add	r3, pc, #400	; (adr r3, 8006b08 <_dtoa_r+0x2b8>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7f9 fbf7 	bl	800016c <__adddf3>
 800697e:	4606      	mov	r6, r0
 8006980:	4620      	mov	r0, r4
 8006982:	460f      	mov	r7, r1
 8006984:	f7f9 fd3e 	bl	8000404 <__aeabi_i2d>
 8006988:	a361      	add	r3, pc, #388	; (adr r3, 8006b10 <_dtoa_r+0x2c0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fda3 	bl	80004d8 <__aeabi_dmul>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4630      	mov	r0, r6
 8006998:	4639      	mov	r1, r7
 800699a:	f7f9 fbe7 	bl	800016c <__adddf3>
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	f7fa f849 	bl	8000a38 <__aeabi_d2iz>
 80069a6:	2200      	movs	r2, #0
 80069a8:	4682      	mov	sl, r0
 80069aa:	2300      	movs	r3, #0
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7fa f804 	bl	80009bc <__aeabi_dcmplt>
 80069b4:	b148      	cbz	r0, 80069ca <_dtoa_r+0x17a>
 80069b6:	4650      	mov	r0, sl
 80069b8:	f7f9 fd24 	bl	8000404 <__aeabi_i2d>
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	f7f9 fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80069c4:	b908      	cbnz	r0, 80069ca <_dtoa_r+0x17a>
 80069c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ca:	f1ba 0f16 	cmp.w	sl, #22
 80069ce:	d858      	bhi.n	8006a82 <_dtoa_r+0x232>
 80069d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069d4:	4b57      	ldr	r3, [pc, #348]	; (8006b34 <_dtoa_r+0x2e4>)
 80069d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f7f9 ffed 	bl	80009bc <__aeabi_dcmplt>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d04f      	beq.n	8006a86 <_dtoa_r+0x236>
 80069e6:	2300      	movs	r3, #0
 80069e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80069ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069f0:	1b1c      	subs	r4, r3, r4
 80069f2:	1e63      	subs	r3, r4, #1
 80069f4:	9309      	str	r3, [sp, #36]	; 0x24
 80069f6:	bf49      	itett	mi
 80069f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80069fc:	2300      	movpl	r3, #0
 80069fe:	9306      	strmi	r3, [sp, #24]
 8006a00:	2300      	movmi	r3, #0
 8006a02:	bf54      	ite	pl
 8006a04:	9306      	strpl	r3, [sp, #24]
 8006a06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a08:	f1ba 0f00 	cmp.w	sl, #0
 8006a0c:	db3d      	blt.n	8006a8a <_dtoa_r+0x23a>
 8006a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a14:	4453      	add	r3, sl
 8006a16:	9309      	str	r3, [sp, #36]	; 0x24
 8006a18:	2300      	movs	r3, #0
 8006a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	f200 808c 	bhi.w	8006b3c <_dtoa_r+0x2ec>
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	bfc4      	itt	gt
 8006a28:	3b04      	subgt	r3, #4
 8006a2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2e:	bfc8      	it	gt
 8006a30:	2400      	movgt	r4, #0
 8006a32:	f1a3 0302 	sub.w	r3, r3, #2
 8006a36:	bfd8      	it	le
 8006a38:	2401      	movle	r4, #1
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f200 808a 	bhi.w	8006b54 <_dtoa_r+0x304>
 8006a40:	e8df f003 	tbb	[pc, r3]
 8006a44:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a4c:	441c      	add	r4, r3
 8006a4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	bfc3      	ittte	gt
 8006a56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a62:	f1c3 0320 	rsble	r3, r3, #32
 8006a66:	bfc6      	itte	gt
 8006a68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a6c:	4318      	orrgt	r0, r3
 8006a6e:	fa06 f003 	lslle.w	r0, r6, r3
 8006a72:	f7f9 fcb7 	bl	80003e4 <__aeabi_ui2d>
 8006a76:	2301      	movs	r3, #1
 8006a78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a7c:	3c01      	subs	r4, #1
 8006a7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a80:	e76f      	b.n	8006962 <_dtoa_r+0x112>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e7b2      	b.n	80069ec <_dtoa_r+0x19c>
 8006a86:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a88:	e7b1      	b.n	80069ee <_dtoa_r+0x19e>
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	eba3 030a 	sub.w	r3, r3, sl
 8006a90:	9306      	str	r3, [sp, #24]
 8006a92:	f1ca 0300 	rsb	r3, sl, #0
 8006a96:	930a      	str	r3, [sp, #40]	; 0x28
 8006a98:	2300      	movs	r3, #0
 8006a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a9c:	e7be      	b.n	8006a1c <_dtoa_r+0x1cc>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dc58      	bgt.n	8006b5a <_dtoa_r+0x30a>
 8006aa8:	f04f 0901 	mov.w	r9, #1
 8006aac:	464b      	mov	r3, r9
 8006aae:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ab2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006aba:	6042      	str	r2, [r0, #4]
 8006abc:	2204      	movs	r2, #4
 8006abe:	f102 0614 	add.w	r6, r2, #20
 8006ac2:	429e      	cmp	r6, r3
 8006ac4:	6841      	ldr	r1, [r0, #4]
 8006ac6:	d94e      	bls.n	8006b66 <_dtoa_r+0x316>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 fef3 	bl	80078b4 <_Balloc>
 8006ace:	9003      	str	r0, [sp, #12]
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d14c      	bne.n	8006b6e <_dtoa_r+0x31e>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ada:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <_dtoa_r+0x2e8>)
 8006adc:	e6cc      	b.n	8006878 <_dtoa_r+0x28>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e7de      	b.n	8006aa0 <_dtoa_r+0x250>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ae8:	eb0a 0903 	add.w	r9, sl, r3
 8006aec:	f109 0301 	add.w	r3, r9, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	9308      	str	r3, [sp, #32]
 8006af4:	bfb8      	it	lt
 8006af6:	2301      	movlt	r3, #1
 8006af8:	e7dd      	b.n	8006ab6 <_dtoa_r+0x266>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e7f2      	b.n	8006ae4 <_dtoa_r+0x294>
 8006afe:	bf00      	nop
 8006b00:	636f4361 	.word	0x636f4361
 8006b04:	3fd287a7 	.word	0x3fd287a7
 8006b08:	8b60c8b3 	.word	0x8b60c8b3
 8006b0c:	3fc68a28 	.word	0x3fc68a28
 8006b10:	509f79fb 	.word	0x509f79fb
 8006b14:	3fd34413 	.word	0x3fd34413
 8006b18:	080086ea 	.word	0x080086ea
 8006b1c:	08008701 	.word	0x08008701
 8006b20:	7ff00000 	.word	0x7ff00000
 8006b24:	080086e6 	.word	0x080086e6
 8006b28:	080086dd 	.word	0x080086dd
 8006b2c:	080086ba 	.word	0x080086ba
 8006b30:	3ff80000 	.word	0x3ff80000
 8006b34:	08008858 	.word	0x08008858
 8006b38:	0800875c 	.word	0x0800875c
 8006b3c:	2401      	movs	r4, #1
 8006b3e:	2300      	movs	r3, #0
 8006b40:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b42:	9322      	str	r3, [sp, #136]	; 0x88
 8006b44:	f04f 39ff 	mov.w	r9, #4294967295
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2312      	movs	r3, #18
 8006b4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b50:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b52:	e7b0      	b.n	8006ab6 <_dtoa_r+0x266>
 8006b54:	2301      	movs	r3, #1
 8006b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b58:	e7f4      	b.n	8006b44 <_dtoa_r+0x2f4>
 8006b5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b64:	e7a7      	b.n	8006ab6 <_dtoa_r+0x266>
 8006b66:	3101      	adds	r1, #1
 8006b68:	6041      	str	r1, [r0, #4]
 8006b6a:	0052      	lsls	r2, r2, #1
 8006b6c:	e7a7      	b.n	8006abe <_dtoa_r+0x26e>
 8006b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b70:	9a03      	ldr	r2, [sp, #12]
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	2b0e      	cmp	r3, #14
 8006b78:	f200 80a8 	bhi.w	8006ccc <_dtoa_r+0x47c>
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	f000 80a5 	beq.w	8006ccc <_dtoa_r+0x47c>
 8006b82:	f1ba 0f00 	cmp.w	sl, #0
 8006b86:	dd34      	ble.n	8006bf2 <_dtoa_r+0x3a2>
 8006b88:	4a9a      	ldr	r2, [pc, #616]	; (8006df4 <_dtoa_r+0x5a4>)
 8006b8a:	f00a 030f 	and.w	r3, sl, #15
 8006b8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006ba2:	d016      	beq.n	8006bd2 <_dtoa_r+0x382>
 8006ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ba8:	4b93      	ldr	r3, [pc, #588]	; (8006df8 <_dtoa_r+0x5a8>)
 8006baa:	2703      	movs	r7, #3
 8006bac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb0:	f7f9 fdbc 	bl	800072c <__aeabi_ddiv>
 8006bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bb8:	f004 040f 	and.w	r4, r4, #15
 8006bbc:	4e8e      	ldr	r6, [pc, #568]	; (8006df8 <_dtoa_r+0x5a8>)
 8006bbe:	b954      	cbnz	r4, 8006bd6 <_dtoa_r+0x386>
 8006bc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc8:	f7f9 fdb0 	bl	800072c <__aeabi_ddiv>
 8006bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd0:	e029      	b.n	8006c26 <_dtoa_r+0x3d6>
 8006bd2:	2702      	movs	r7, #2
 8006bd4:	e7f2      	b.n	8006bbc <_dtoa_r+0x36c>
 8006bd6:	07e1      	lsls	r1, r4, #31
 8006bd8:	d508      	bpl.n	8006bec <_dtoa_r+0x39c>
 8006bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006be2:	f7f9 fc79 	bl	80004d8 <__aeabi_dmul>
 8006be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bea:	3701      	adds	r7, #1
 8006bec:	1064      	asrs	r4, r4, #1
 8006bee:	3608      	adds	r6, #8
 8006bf0:	e7e5      	b.n	8006bbe <_dtoa_r+0x36e>
 8006bf2:	f000 80a5 	beq.w	8006d40 <_dtoa_r+0x4f0>
 8006bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bfa:	f1ca 0400 	rsb	r4, sl, #0
 8006bfe:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <_dtoa_r+0x5a4>)
 8006c00:	f004 020f 	and.w	r2, r4, #15
 8006c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f7f9 fc64 	bl	80004d8 <__aeabi_dmul>
 8006c10:	2702      	movs	r7, #2
 8006c12:	2300      	movs	r3, #0
 8006c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c18:	4e77      	ldr	r6, [pc, #476]	; (8006df8 <_dtoa_r+0x5a8>)
 8006c1a:	1124      	asrs	r4, r4, #4
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	f040 8084 	bne.w	8006d2a <_dtoa_r+0x4da>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1d2      	bne.n	8006bcc <_dtoa_r+0x37c>
 8006c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 808b 	beq.w	8006d44 <_dtoa_r+0x4f4>
 8006c2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4b6f      	ldr	r3, [pc, #444]	; (8006dfc <_dtoa_r+0x5ac>)
 8006c3e:	f7f9 febd 	bl	80009bc <__aeabi_dcmplt>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d07e      	beq.n	8006d44 <_dtoa_r+0x4f4>
 8006c46:	9b08      	ldr	r3, [sp, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d07b      	beq.n	8006d44 <_dtoa_r+0x4f4>
 8006c4c:	f1b9 0f00 	cmp.w	r9, #0
 8006c50:	dd38      	ble.n	8006cc4 <_dtoa_r+0x474>
 8006c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c56:	2200      	movs	r2, #0
 8006c58:	4b69      	ldr	r3, [pc, #420]	; (8006e00 <_dtoa_r+0x5b0>)
 8006c5a:	f7f9 fc3d 	bl	80004d8 <__aeabi_dmul>
 8006c5e:	464c      	mov	r4, r9
 8006c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c64:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c68:	3701      	adds	r7, #1
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7f9 fbca 	bl	8000404 <__aeabi_i2d>
 8006c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c74:	f7f9 fc30 	bl	80004d8 <__aeabi_dmul>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4b62      	ldr	r3, [pc, #392]	; (8006e04 <_dtoa_r+0x5b4>)
 8006c7c:	f7f9 fa76 	bl	800016c <__adddf3>
 8006c80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c88:	9611      	str	r6, [sp, #68]	; 0x44
 8006c8a:	2c00      	cmp	r4, #0
 8006c8c:	d15d      	bne.n	8006d4a <_dtoa_r+0x4fa>
 8006c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c92:	2200      	movs	r2, #0
 8006c94:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <_dtoa_r+0x5b8>)
 8006c96:	f7f9 fa67 	bl	8000168 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ca2:	4633      	mov	r3, r6
 8006ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ca6:	f7f9 fea7 	bl	80009f8 <__aeabi_dcmpgt>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	f040 829c 	bne.w	80071e8 <_dtoa_r+0x998>
 8006cb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cba:	f7f9 fe7f 	bl	80009bc <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f040 8290 	bne.w	80071e4 <_dtoa_r+0x994>
 8006cc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f2c0 8152 	blt.w	8006f78 <_dtoa_r+0x728>
 8006cd4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cd8:	f300 814e 	bgt.w	8006f78 <_dtoa_r+0x728>
 8006cdc:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <_dtoa_r+0x5a4>)
 8006cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ce6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f280 80db 	bge.w	8006ea8 <_dtoa_r+0x658>
 8006cf2:	9b08      	ldr	r3, [sp, #32]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f300 80d7 	bgt.w	8006ea8 <_dtoa_r+0x658>
 8006cfa:	f040 8272 	bne.w	80071e2 <_dtoa_r+0x992>
 8006cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d02:	2200      	movs	r2, #0
 8006d04:	4b40      	ldr	r3, [pc, #256]	; (8006e08 <_dtoa_r+0x5b8>)
 8006d06:	f7f9 fbe7 	bl	80004d8 <__aeabi_dmul>
 8006d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0e:	f7f9 fe69 	bl	80009e4 <__aeabi_dcmpge>
 8006d12:	9c08      	ldr	r4, [sp, #32]
 8006d14:	4626      	mov	r6, r4
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f040 8248 	bne.w	80071ac <_dtoa_r+0x95c>
 8006d1c:	2331      	movs	r3, #49	; 0x31
 8006d1e:	9f03      	ldr	r7, [sp, #12]
 8006d20:	f10a 0a01 	add.w	sl, sl, #1
 8006d24:	f807 3b01 	strb.w	r3, [r7], #1
 8006d28:	e244      	b.n	80071b4 <_dtoa_r+0x964>
 8006d2a:	07e2      	lsls	r2, r4, #31
 8006d2c:	d505      	bpl.n	8006d3a <_dtoa_r+0x4ea>
 8006d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d32:	f7f9 fbd1 	bl	80004d8 <__aeabi_dmul>
 8006d36:	2301      	movs	r3, #1
 8006d38:	3701      	adds	r7, #1
 8006d3a:	1064      	asrs	r4, r4, #1
 8006d3c:	3608      	adds	r6, #8
 8006d3e:	e76d      	b.n	8006c1c <_dtoa_r+0x3cc>
 8006d40:	2702      	movs	r7, #2
 8006d42:	e770      	b.n	8006c26 <_dtoa_r+0x3d6>
 8006d44:	46d0      	mov	r8, sl
 8006d46:	9c08      	ldr	r4, [sp, #32]
 8006d48:	e78f      	b.n	8006c6a <_dtoa_r+0x41a>
 8006d4a:	9903      	ldr	r1, [sp, #12]
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <_dtoa_r+0x5a4>)
 8006d4e:	4421      	add	r1, r4
 8006d50:	9112      	str	r1, [sp, #72]	; 0x48
 8006d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d60:	2900      	cmp	r1, #0
 8006d62:	d055      	beq.n	8006e10 <_dtoa_r+0x5c0>
 8006d64:	2000      	movs	r0, #0
 8006d66:	4929      	ldr	r1, [pc, #164]	; (8006e0c <_dtoa_r+0x5bc>)
 8006d68:	f7f9 fce0 	bl	800072c <__aeabi_ddiv>
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	4632      	mov	r2, r6
 8006d70:	f7f9 f9fa 	bl	8000168 <__aeabi_dsub>
 8006d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d78:	9f03      	ldr	r7, [sp, #12]
 8006d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d7e:	f7f9 fe5b 	bl	8000a38 <__aeabi_d2iz>
 8006d82:	4604      	mov	r4, r0
 8006d84:	f7f9 fb3e 	bl	8000404 <__aeabi_i2d>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d90:	f7f9 f9ea 	bl	8000168 <__aeabi_dsub>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	3430      	adds	r4, #48	; 0x30
 8006d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006da2:	f807 4b01 	strb.w	r4, [r7], #1
 8006da6:	f7f9 fe09 	bl	80009bc <__aeabi_dcmplt>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d174      	bne.n	8006e98 <_dtoa_r+0x648>
 8006dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db2:	2000      	movs	r0, #0
 8006db4:	4911      	ldr	r1, [pc, #68]	; (8006dfc <_dtoa_r+0x5ac>)
 8006db6:	f7f9 f9d7 	bl	8000168 <__aeabi_dsub>
 8006dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dbe:	f7f9 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f040 80b7 	bne.w	8006f36 <_dtoa_r+0x6e6>
 8006dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dca:	429f      	cmp	r7, r3
 8006dcc:	f43f af7a 	beq.w	8006cc4 <_dtoa_r+0x474>
 8006dd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <_dtoa_r+0x5b0>)
 8006dd8:	f7f9 fb7e 	bl	80004d8 <__aeabi_dmul>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <_dtoa_r+0x5b0>)
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006df0:	e7c3      	b.n	8006d7a <_dtoa_r+0x52a>
 8006df2:	bf00      	nop
 8006df4:	08008858 	.word	0x08008858
 8006df8:	08008830 	.word	0x08008830
 8006dfc:	3ff00000 	.word	0x3ff00000
 8006e00:	40240000 	.word	0x40240000
 8006e04:	401c0000 	.word	0x401c0000
 8006e08:	40140000 	.word	0x40140000
 8006e0c:	3fe00000 	.word	0x3fe00000
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 fb60 	bl	80004d8 <__aeabi_dmul>
 8006e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e1e:	9c03      	ldr	r4, [sp, #12]
 8006e20:	9314      	str	r3, [sp, #80]	; 0x50
 8006e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e26:	f7f9 fe07 	bl	8000a38 <__aeabi_d2iz>
 8006e2a:	9015      	str	r0, [sp, #84]	; 0x54
 8006e2c:	f7f9 faea 	bl	8000404 <__aeabi_i2d>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e38:	f7f9 f996 	bl	8000168 <__aeabi_dsub>
 8006e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e3e:	4606      	mov	r6, r0
 8006e40:	3330      	adds	r3, #48	; 0x30
 8006e42:	f804 3b01 	strb.w	r3, [r4], #1
 8006e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e48:	460f      	mov	r7, r1
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	d124      	bne.n	8006e9c <_dtoa_r+0x64c>
 8006e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e56:	4bb0      	ldr	r3, [pc, #704]	; (8007118 <_dtoa_r+0x8c8>)
 8006e58:	f7f9 f988 	bl	800016c <__adddf3>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d163      	bne.n	8006f34 <_dtoa_r+0x6e4>
 8006e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e70:	2000      	movs	r0, #0
 8006e72:	49a9      	ldr	r1, [pc, #676]	; (8007118 <_dtoa_r+0x8c8>)
 8006e74:	f7f9 f978 	bl	8000168 <__aeabi_dsub>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 fd9c 	bl	80009bc <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f af1d 	beq.w	8006cc4 <_dtoa_r+0x474>
 8006e8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e8c:	1e7b      	subs	r3, r7, #1
 8006e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d0f8      	beq.n	8006e8a <_dtoa_r+0x63a>
 8006e98:	46c2      	mov	sl, r8
 8006e9a:	e03b      	b.n	8006f14 <_dtoa_r+0x6c4>
 8006e9c:	4b9f      	ldr	r3, [pc, #636]	; (800711c <_dtoa_r+0x8cc>)
 8006e9e:	f7f9 fb1b 	bl	80004d8 <__aeabi_dmul>
 8006ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea6:	e7bc      	b.n	8006e22 <_dtoa_r+0x5d2>
 8006ea8:	9f03      	ldr	r7, [sp, #12]
 8006eaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f7f9 fc39 	bl	800072c <__aeabi_ddiv>
 8006eba:	f7f9 fdbd 	bl	8000a38 <__aeabi_d2iz>
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	f7f9 faa0 	bl	8000404 <__aeabi_i2d>
 8006ec4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ec8:	f7f9 fb06 	bl	80004d8 <__aeabi_dmul>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 f948 	bl	8000168 <__aeabi_dsub>
 8006ed8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006edc:	f807 6b01 	strb.w	r6, [r7], #1
 8006ee0:	9e03      	ldr	r6, [sp, #12]
 8006ee2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006ee6:	1bbe      	subs	r6, r7, r6
 8006ee8:	45b4      	cmp	ip, r6
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	d136      	bne.n	8006f5e <_dtoa_r+0x70e>
 8006ef0:	f7f9 f93c 	bl	800016c <__adddf3>
 8006ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4689      	mov	r9, r1
 8006efc:	f7f9 fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8006f00:	bb58      	cbnz	r0, 8006f5a <_dtoa_r+0x70a>
 8006f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8006f0e:	b108      	cbz	r0, 8006f14 <_dtoa_r+0x6c4>
 8006f10:	07e1      	lsls	r1, r4, #31
 8006f12:	d422      	bmi.n	8006f5a <_dtoa_r+0x70a>
 8006f14:	4628      	mov	r0, r5
 8006f16:	4659      	mov	r1, fp
 8006f18:	f000 fd0c 	bl	8007934 <_Bfree>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	703b      	strb	r3, [r7, #0]
 8006f20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f22:	f10a 0001 	add.w	r0, sl, #1
 8006f26:	6018      	str	r0, [r3, #0]
 8006f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f43f acde 	beq.w	80068ec <_dtoa_r+0x9c>
 8006f30:	601f      	str	r7, [r3, #0]
 8006f32:	e4db      	b.n	80068ec <_dtoa_r+0x9c>
 8006f34:	4627      	mov	r7, r4
 8006f36:	463b      	mov	r3, r7
 8006f38:	461f      	mov	r7, r3
 8006f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f3e:	2a39      	cmp	r2, #57	; 0x39
 8006f40:	d107      	bne.n	8006f52 <_dtoa_r+0x702>
 8006f42:	9a03      	ldr	r2, [sp, #12]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d1f7      	bne.n	8006f38 <_dtoa_r+0x6e8>
 8006f48:	2230      	movs	r2, #48	; 0x30
 8006f4a:	9903      	ldr	r1, [sp, #12]
 8006f4c:	f108 0801 	add.w	r8, r8, #1
 8006f50:	700a      	strb	r2, [r1, #0]
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	3201      	adds	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e79e      	b.n	8006e98 <_dtoa_r+0x648>
 8006f5a:	46d0      	mov	r8, sl
 8006f5c:	e7eb      	b.n	8006f36 <_dtoa_r+0x6e6>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4b6e      	ldr	r3, [pc, #440]	; (800711c <_dtoa_r+0x8cc>)
 8006f62:	f7f9 fab9 	bl	80004d8 <__aeabi_dmul>
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f7f9 fd1b 	bl	80009a8 <__aeabi_dcmpeq>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d09b      	beq.n	8006eae <_dtoa_r+0x65e>
 8006f76:	e7cd      	b.n	8006f14 <_dtoa_r+0x6c4>
 8006f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	f000 80d0 	beq.w	8007120 <_dtoa_r+0x8d0>
 8006f80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f82:	2a01      	cmp	r2, #1
 8006f84:	f300 80ae 	bgt.w	80070e4 <_dtoa_r+0x894>
 8006f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	f000 80a6 	beq.w	80070dc <_dtoa_r+0x88c>
 8006f90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f96:	9f06      	ldr	r7, [sp, #24]
 8006f98:	9a06      	ldr	r2, [sp, #24]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	441a      	add	r2, r3
 8006f9e:	9206      	str	r2, [sp, #24]
 8006fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa8:	f000 fd7a 	bl	8007aa0 <__i2b>
 8006fac:	4606      	mov	r6, r0
 8006fae:	2f00      	cmp	r7, #0
 8006fb0:	dd0c      	ble.n	8006fcc <_dtoa_r+0x77c>
 8006fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd09      	ble.n	8006fcc <_dtoa_r+0x77c>
 8006fb8:	42bb      	cmp	r3, r7
 8006fba:	bfa8      	it	ge
 8006fbc:	463b      	movge	r3, r7
 8006fbe:	9a06      	ldr	r2, [sp, #24]
 8006fc0:	1aff      	subs	r7, r7, r3
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	9206      	str	r2, [sp, #24]
 8006fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	9309      	str	r3, [sp, #36]	; 0x24
 8006fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fce:	b1f3      	cbz	r3, 800700e <_dtoa_r+0x7be>
 8006fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80a8 	beq.w	8007128 <_dtoa_r+0x8d8>
 8006fd8:	2c00      	cmp	r4, #0
 8006fda:	dd10      	ble.n	8006ffe <_dtoa_r+0x7ae>
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fe1b 	bl	8007c1c <__pow5mult>
 8006fe6:	465a      	mov	r2, fp
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4606      	mov	r6, r0
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 fd6d 	bl	8007acc <__multiply>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fc9c 	bl	8007934 <_Bfree>
 8006ffc:	46c3      	mov	fp, r8
 8006ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007000:	1b1a      	subs	r2, r3, r4
 8007002:	d004      	beq.n	800700e <_dtoa_r+0x7be>
 8007004:	4659      	mov	r1, fp
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fe08 	bl	8007c1c <__pow5mult>
 800700c:	4683      	mov	fp, r0
 800700e:	2101      	movs	r1, #1
 8007010:	4628      	mov	r0, r5
 8007012:	f000 fd45 	bl	8007aa0 <__i2b>
 8007016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007018:	4604      	mov	r4, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	f340 8086 	ble.w	800712c <_dtoa_r+0x8dc>
 8007020:	461a      	mov	r2, r3
 8007022:	4601      	mov	r1, r0
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fdf9 	bl	8007c1c <__pow5mult>
 800702a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800702c:	4604      	mov	r4, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	dd7f      	ble.n	8007132 <_dtoa_r+0x8e2>
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800703c:	6918      	ldr	r0, [r3, #16]
 800703e:	f000 fce1 	bl	8007a04 <__hi0bits>
 8007042:	f1c0 0020 	rsb	r0, r0, #32
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	4418      	add	r0, r3
 800704a:	f010 001f 	ands.w	r0, r0, #31
 800704e:	f000 8092 	beq.w	8007176 <_dtoa_r+0x926>
 8007052:	f1c0 0320 	rsb	r3, r0, #32
 8007056:	2b04      	cmp	r3, #4
 8007058:	f340 808a 	ble.w	8007170 <_dtoa_r+0x920>
 800705c:	f1c0 001c 	rsb	r0, r0, #28
 8007060:	9b06      	ldr	r3, [sp, #24]
 8007062:	4407      	add	r7, r0
 8007064:	4403      	add	r3, r0
 8007066:	9306      	str	r3, [sp, #24]
 8007068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706a:	4403      	add	r3, r0
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	dd05      	ble.n	8007080 <_dtoa_r+0x830>
 8007074:	4659      	mov	r1, fp
 8007076:	461a      	mov	r2, r3
 8007078:	4628      	mov	r0, r5
 800707a:	f000 fe29 	bl	8007cd0 <__lshift>
 800707e:	4683      	mov	fp, r0
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	dd05      	ble.n	8007092 <_dtoa_r+0x842>
 8007086:	4621      	mov	r1, r4
 8007088:	461a      	mov	r2, r3
 800708a:	4628      	mov	r0, r5
 800708c:	f000 fe20 	bl	8007cd0 <__lshift>
 8007090:	4604      	mov	r4, r0
 8007092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d070      	beq.n	800717a <_dtoa_r+0x92a>
 8007098:	4621      	mov	r1, r4
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fe88 	bl	8007db0 <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	da6a      	bge.n	800717a <_dtoa_r+0x92a>
 80070a4:	2300      	movs	r3, #0
 80070a6:	4659      	mov	r1, fp
 80070a8:	220a      	movs	r2, #10
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fc64 	bl	8007978 <__multadd>
 80070b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b2:	4683      	mov	fp, r0
 80070b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8194 	beq.w	80073e6 <_dtoa_r+0xb96>
 80070be:	4631      	mov	r1, r6
 80070c0:	2300      	movs	r3, #0
 80070c2:	220a      	movs	r2, #10
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 fc57 	bl	8007978 <__multadd>
 80070ca:	f1b9 0f00 	cmp.w	r9, #0
 80070ce:	4606      	mov	r6, r0
 80070d0:	f300 8093 	bgt.w	80071fa <_dtoa_r+0x9aa>
 80070d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	dc57      	bgt.n	800718a <_dtoa_r+0x93a>
 80070da:	e08e      	b.n	80071fa <_dtoa_r+0x9aa>
 80070dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070e2:	e757      	b.n	8006f94 <_dtoa_r+0x744>
 80070e4:	9b08      	ldr	r3, [sp, #32]
 80070e6:	1e5c      	subs	r4, r3, #1
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	bfb7      	itett	lt
 80070ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070f0:	1b1c      	subge	r4, r3, r4
 80070f2:	1ae2      	sublt	r2, r4, r3
 80070f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070f6:	bfbe      	ittt	lt
 80070f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80070fa:	189b      	addlt	r3, r3, r2
 80070fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070fe:	9b08      	ldr	r3, [sp, #32]
 8007100:	bfb8      	it	lt
 8007102:	2400      	movlt	r4, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfbb      	ittet	lt
 8007108:	9b06      	ldrlt	r3, [sp, #24]
 800710a:	9a08      	ldrlt	r2, [sp, #32]
 800710c:	9f06      	ldrge	r7, [sp, #24]
 800710e:	1a9f      	sublt	r7, r3, r2
 8007110:	bfac      	ite	ge
 8007112:	9b08      	ldrge	r3, [sp, #32]
 8007114:	2300      	movlt	r3, #0
 8007116:	e73f      	b.n	8006f98 <_dtoa_r+0x748>
 8007118:	3fe00000 	.word	0x3fe00000
 800711c:	40240000 	.word	0x40240000
 8007120:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007122:	9f06      	ldr	r7, [sp, #24]
 8007124:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007126:	e742      	b.n	8006fae <_dtoa_r+0x75e>
 8007128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800712a:	e76b      	b.n	8007004 <_dtoa_r+0x7b4>
 800712c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800712e:	2b01      	cmp	r3, #1
 8007130:	dc19      	bgt.n	8007166 <_dtoa_r+0x916>
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	b9bb      	cbnz	r3, 8007166 <_dtoa_r+0x916>
 8007136:	9b05      	ldr	r3, [sp, #20]
 8007138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800713c:	b99b      	cbnz	r3, 8007166 <_dtoa_r+0x916>
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007144:	0d1b      	lsrs	r3, r3, #20
 8007146:	051b      	lsls	r3, r3, #20
 8007148:	b183      	cbz	r3, 800716c <_dtoa_r+0x91c>
 800714a:	f04f 0801 	mov.w	r8, #1
 800714e:	9b06      	ldr	r3, [sp, #24]
 8007150:	3301      	adds	r3, #1
 8007152:	9306      	str	r3, [sp, #24]
 8007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007156:	3301      	adds	r3, #1
 8007158:	9309      	str	r3, [sp, #36]	; 0x24
 800715a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f af6a 	bne.w	8007036 <_dtoa_r+0x7e6>
 8007162:	2001      	movs	r0, #1
 8007164:	e76f      	b.n	8007046 <_dtoa_r+0x7f6>
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	e7f6      	b.n	800715a <_dtoa_r+0x90a>
 800716c:	4698      	mov	r8, r3
 800716e:	e7f4      	b.n	800715a <_dtoa_r+0x90a>
 8007170:	f43f af7d 	beq.w	800706e <_dtoa_r+0x81e>
 8007174:	4618      	mov	r0, r3
 8007176:	301c      	adds	r0, #28
 8007178:	e772      	b.n	8007060 <_dtoa_r+0x810>
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dc36      	bgt.n	80071ee <_dtoa_r+0x99e>
 8007180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007182:	2b02      	cmp	r3, #2
 8007184:	dd33      	ble.n	80071ee <_dtoa_r+0x99e>
 8007186:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800718a:	f1b9 0f00 	cmp.w	r9, #0
 800718e:	d10d      	bne.n	80071ac <_dtoa_r+0x95c>
 8007190:	4621      	mov	r1, r4
 8007192:	464b      	mov	r3, r9
 8007194:	2205      	movs	r2, #5
 8007196:	4628      	mov	r0, r5
 8007198:	f000 fbee 	bl	8007978 <__multadd>
 800719c:	4601      	mov	r1, r0
 800719e:	4604      	mov	r4, r0
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 fe05 	bl	8007db0 <__mcmp>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f73f adb8 	bgt.w	8006d1c <_dtoa_r+0x4cc>
 80071ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071ae:	9f03      	ldr	r7, [sp, #12]
 80071b0:	ea6f 0a03 	mvn.w	sl, r3
 80071b4:	f04f 0800 	mov.w	r8, #0
 80071b8:	4621      	mov	r1, r4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 fbba 	bl	8007934 <_Bfree>
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	f43f aea7 	beq.w	8006f14 <_dtoa_r+0x6c4>
 80071c6:	f1b8 0f00 	cmp.w	r8, #0
 80071ca:	d005      	beq.n	80071d8 <_dtoa_r+0x988>
 80071cc:	45b0      	cmp	r8, r6
 80071ce:	d003      	beq.n	80071d8 <_dtoa_r+0x988>
 80071d0:	4641      	mov	r1, r8
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 fbae 	bl	8007934 <_Bfree>
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 fbaa 	bl	8007934 <_Bfree>
 80071e0:	e698      	b.n	8006f14 <_dtoa_r+0x6c4>
 80071e2:	2400      	movs	r4, #0
 80071e4:	4626      	mov	r6, r4
 80071e6:	e7e1      	b.n	80071ac <_dtoa_r+0x95c>
 80071e8:	46c2      	mov	sl, r8
 80071ea:	4626      	mov	r6, r4
 80071ec:	e596      	b.n	8006d1c <_dtoa_r+0x4cc>
 80071ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80fd 	beq.w	80073f4 <_dtoa_r+0xba4>
 80071fa:	2f00      	cmp	r7, #0
 80071fc:	dd05      	ble.n	800720a <_dtoa_r+0x9ba>
 80071fe:	4631      	mov	r1, r6
 8007200:	463a      	mov	r2, r7
 8007202:	4628      	mov	r0, r5
 8007204:	f000 fd64 	bl	8007cd0 <__lshift>
 8007208:	4606      	mov	r6, r0
 800720a:	f1b8 0f00 	cmp.w	r8, #0
 800720e:	d05c      	beq.n	80072ca <_dtoa_r+0xa7a>
 8007210:	4628      	mov	r0, r5
 8007212:	6871      	ldr	r1, [r6, #4]
 8007214:	f000 fb4e 	bl	80078b4 <_Balloc>
 8007218:	4607      	mov	r7, r0
 800721a:	b928      	cbnz	r0, 8007228 <_dtoa_r+0x9d8>
 800721c:	4602      	mov	r2, r0
 800721e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007222:	4b7f      	ldr	r3, [pc, #508]	; (8007420 <_dtoa_r+0xbd0>)
 8007224:	f7ff bb28 	b.w	8006878 <_dtoa_r+0x28>
 8007228:	6932      	ldr	r2, [r6, #16]
 800722a:	f106 010c 	add.w	r1, r6, #12
 800722e:	3202      	adds	r2, #2
 8007230:	0092      	lsls	r2, r2, #2
 8007232:	300c      	adds	r0, #12
 8007234:	f000 fb30 	bl	8007898 <memcpy>
 8007238:	2201      	movs	r2, #1
 800723a:	4639      	mov	r1, r7
 800723c:	4628      	mov	r0, r5
 800723e:	f000 fd47 	bl	8007cd0 <__lshift>
 8007242:	46b0      	mov	r8, r6
 8007244:	4606      	mov	r6, r0
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	9308      	str	r3, [sp, #32]
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	444b      	add	r3, r9
 8007250:	930a      	str	r3, [sp, #40]	; 0x28
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	9309      	str	r3, [sp, #36]	; 0x24
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	4621      	mov	r1, r4
 800725e:	3b01      	subs	r3, #1
 8007260:	4658      	mov	r0, fp
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	f7ff fa67 	bl	8006736 <quorem>
 8007268:	4603      	mov	r3, r0
 800726a:	4641      	mov	r1, r8
 800726c:	3330      	adds	r3, #48	; 0x30
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	4658      	mov	r0, fp
 8007272:	930b      	str	r3, [sp, #44]	; 0x2c
 8007274:	f000 fd9c 	bl	8007db0 <__mcmp>
 8007278:	4632      	mov	r2, r6
 800727a:	4681      	mov	r9, r0
 800727c:	4621      	mov	r1, r4
 800727e:	4628      	mov	r0, r5
 8007280:	f000 fdb2 	bl	8007de8 <__mdiff>
 8007284:	68c2      	ldr	r2, [r0, #12]
 8007286:	4607      	mov	r7, r0
 8007288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728a:	bb02      	cbnz	r2, 80072ce <_dtoa_r+0xa7e>
 800728c:	4601      	mov	r1, r0
 800728e:	4658      	mov	r0, fp
 8007290:	f000 fd8e 	bl	8007db0 <__mcmp>
 8007294:	4602      	mov	r2, r0
 8007296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007298:	4639      	mov	r1, r7
 800729a:	4628      	mov	r0, r5
 800729c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072a0:	f000 fb48 	bl	8007934 <_Bfree>
 80072a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072a8:	9f08      	ldr	r7, [sp, #32]
 80072aa:	ea43 0102 	orr.w	r1, r3, r2
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	430b      	orrs	r3, r1
 80072b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b4:	d10d      	bne.n	80072d2 <_dtoa_r+0xa82>
 80072b6:	2b39      	cmp	r3, #57	; 0x39
 80072b8:	d029      	beq.n	800730e <_dtoa_r+0xabe>
 80072ba:	f1b9 0f00 	cmp.w	r9, #0
 80072be:	dd01      	ble.n	80072c4 <_dtoa_r+0xa74>
 80072c0:	9b06      	ldr	r3, [sp, #24]
 80072c2:	3331      	adds	r3, #49	; 0x31
 80072c4:	9a04      	ldr	r2, [sp, #16]
 80072c6:	7013      	strb	r3, [r2, #0]
 80072c8:	e776      	b.n	80071b8 <_dtoa_r+0x968>
 80072ca:	4630      	mov	r0, r6
 80072cc:	e7b9      	b.n	8007242 <_dtoa_r+0x9f2>
 80072ce:	2201      	movs	r2, #1
 80072d0:	e7e2      	b.n	8007298 <_dtoa_r+0xa48>
 80072d2:	f1b9 0f00 	cmp.w	r9, #0
 80072d6:	db06      	blt.n	80072e6 <_dtoa_r+0xa96>
 80072d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072da:	ea41 0909 	orr.w	r9, r1, r9
 80072de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e0:	ea59 0101 	orrs.w	r1, r9, r1
 80072e4:	d120      	bne.n	8007328 <_dtoa_r+0xad8>
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	ddec      	ble.n	80072c4 <_dtoa_r+0xa74>
 80072ea:	4659      	mov	r1, fp
 80072ec:	2201      	movs	r2, #1
 80072ee:	4628      	mov	r0, r5
 80072f0:	9308      	str	r3, [sp, #32]
 80072f2:	f000 fced 	bl	8007cd0 <__lshift>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4683      	mov	fp, r0
 80072fa:	f000 fd59 	bl	8007db0 <__mcmp>
 80072fe:	2800      	cmp	r0, #0
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	dc02      	bgt.n	800730a <_dtoa_r+0xaba>
 8007304:	d1de      	bne.n	80072c4 <_dtoa_r+0xa74>
 8007306:	07da      	lsls	r2, r3, #31
 8007308:	d5dc      	bpl.n	80072c4 <_dtoa_r+0xa74>
 800730a:	2b39      	cmp	r3, #57	; 0x39
 800730c:	d1d8      	bne.n	80072c0 <_dtoa_r+0xa70>
 800730e:	2339      	movs	r3, #57	; 0x39
 8007310:	9a04      	ldr	r2, [sp, #16]
 8007312:	7013      	strb	r3, [r2, #0]
 8007314:	463b      	mov	r3, r7
 8007316:	461f      	mov	r7, r3
 8007318:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800731c:	3b01      	subs	r3, #1
 800731e:	2a39      	cmp	r2, #57	; 0x39
 8007320:	d050      	beq.n	80073c4 <_dtoa_r+0xb74>
 8007322:	3201      	adds	r2, #1
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e747      	b.n	80071b8 <_dtoa_r+0x968>
 8007328:	2a00      	cmp	r2, #0
 800732a:	dd03      	ble.n	8007334 <_dtoa_r+0xae4>
 800732c:	2b39      	cmp	r3, #57	; 0x39
 800732e:	d0ee      	beq.n	800730e <_dtoa_r+0xabe>
 8007330:	3301      	adds	r3, #1
 8007332:	e7c7      	b.n	80072c4 <_dtoa_r+0xa74>
 8007334:	9a08      	ldr	r2, [sp, #32]
 8007336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007338:	f802 3c01 	strb.w	r3, [r2, #-1]
 800733c:	428a      	cmp	r2, r1
 800733e:	d02a      	beq.n	8007396 <_dtoa_r+0xb46>
 8007340:	4659      	mov	r1, fp
 8007342:	2300      	movs	r3, #0
 8007344:	220a      	movs	r2, #10
 8007346:	4628      	mov	r0, r5
 8007348:	f000 fb16 	bl	8007978 <__multadd>
 800734c:	45b0      	cmp	r8, r6
 800734e:	4683      	mov	fp, r0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	f04f 020a 	mov.w	r2, #10
 8007358:	4641      	mov	r1, r8
 800735a:	4628      	mov	r0, r5
 800735c:	d107      	bne.n	800736e <_dtoa_r+0xb1e>
 800735e:	f000 fb0b 	bl	8007978 <__multadd>
 8007362:	4680      	mov	r8, r0
 8007364:	4606      	mov	r6, r0
 8007366:	9b08      	ldr	r3, [sp, #32]
 8007368:	3301      	adds	r3, #1
 800736a:	9308      	str	r3, [sp, #32]
 800736c:	e775      	b.n	800725a <_dtoa_r+0xa0a>
 800736e:	f000 fb03 	bl	8007978 <__multadd>
 8007372:	4631      	mov	r1, r6
 8007374:	4680      	mov	r8, r0
 8007376:	2300      	movs	r3, #0
 8007378:	220a      	movs	r2, #10
 800737a:	4628      	mov	r0, r5
 800737c:	f000 fafc 	bl	8007978 <__multadd>
 8007380:	4606      	mov	r6, r0
 8007382:	e7f0      	b.n	8007366 <_dtoa_r+0xb16>
 8007384:	f1b9 0f00 	cmp.w	r9, #0
 8007388:	bfcc      	ite	gt
 800738a:	464f      	movgt	r7, r9
 800738c:	2701      	movle	r7, #1
 800738e:	f04f 0800 	mov.w	r8, #0
 8007392:	9a03      	ldr	r2, [sp, #12]
 8007394:	4417      	add	r7, r2
 8007396:	4659      	mov	r1, fp
 8007398:	2201      	movs	r2, #1
 800739a:	4628      	mov	r0, r5
 800739c:	9308      	str	r3, [sp, #32]
 800739e:	f000 fc97 	bl	8007cd0 <__lshift>
 80073a2:	4621      	mov	r1, r4
 80073a4:	4683      	mov	fp, r0
 80073a6:	f000 fd03 	bl	8007db0 <__mcmp>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	dcb2      	bgt.n	8007314 <_dtoa_r+0xac4>
 80073ae:	d102      	bne.n	80073b6 <_dtoa_r+0xb66>
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	07db      	lsls	r3, r3, #31
 80073b4:	d4ae      	bmi.n	8007314 <_dtoa_r+0xac4>
 80073b6:	463b      	mov	r3, r7
 80073b8:	461f      	mov	r7, r3
 80073ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073be:	2a30      	cmp	r2, #48	; 0x30
 80073c0:	d0fa      	beq.n	80073b8 <_dtoa_r+0xb68>
 80073c2:	e6f9      	b.n	80071b8 <_dtoa_r+0x968>
 80073c4:	9a03      	ldr	r2, [sp, #12]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d1a5      	bne.n	8007316 <_dtoa_r+0xac6>
 80073ca:	2331      	movs	r3, #49	; 0x31
 80073cc:	f10a 0a01 	add.w	sl, sl, #1
 80073d0:	e779      	b.n	80072c6 <_dtoa_r+0xa76>
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <_dtoa_r+0xbd4>)
 80073d4:	f7ff baa8 	b.w	8006928 <_dtoa_r+0xd8>
 80073d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f47f aa81 	bne.w	80068e2 <_dtoa_r+0x92>
 80073e0:	4b11      	ldr	r3, [pc, #68]	; (8007428 <_dtoa_r+0xbd8>)
 80073e2:	f7ff baa1 	b.w	8006928 <_dtoa_r+0xd8>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	dc03      	bgt.n	80073f4 <_dtoa_r+0xba4>
 80073ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	f73f aecb 	bgt.w	800718a <_dtoa_r+0x93a>
 80073f4:	9f03      	ldr	r7, [sp, #12]
 80073f6:	4621      	mov	r1, r4
 80073f8:	4658      	mov	r0, fp
 80073fa:	f7ff f99c 	bl	8006736 <quorem>
 80073fe:	9a03      	ldr	r2, [sp, #12]
 8007400:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007404:	f807 3b01 	strb.w	r3, [r7], #1
 8007408:	1aba      	subs	r2, r7, r2
 800740a:	4591      	cmp	r9, r2
 800740c:	ddba      	ble.n	8007384 <_dtoa_r+0xb34>
 800740e:	4659      	mov	r1, fp
 8007410:	2300      	movs	r3, #0
 8007412:	220a      	movs	r2, #10
 8007414:	4628      	mov	r0, r5
 8007416:	f000 faaf 	bl	8007978 <__multadd>
 800741a:	4683      	mov	fp, r0
 800741c:	e7eb      	b.n	80073f6 <_dtoa_r+0xba6>
 800741e:	bf00      	nop
 8007420:	0800875c 	.word	0x0800875c
 8007424:	080086b9 	.word	0x080086b9
 8007428:	080086dd 	.word	0x080086dd

0800742c <__sflush_r>:
 800742c:	898a      	ldrh	r2, [r1, #12]
 800742e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007430:	4605      	mov	r5, r0
 8007432:	0710      	lsls	r0, r2, #28
 8007434:	460c      	mov	r4, r1
 8007436:	d457      	bmi.n	80074e8 <__sflush_r+0xbc>
 8007438:	684b      	ldr	r3, [r1, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc04      	bgt.n	8007448 <__sflush_r+0x1c>
 800743e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc01      	bgt.n	8007448 <__sflush_r+0x1c>
 8007444:	2000      	movs	r0, #0
 8007446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800744a:	2e00      	cmp	r6, #0
 800744c:	d0fa      	beq.n	8007444 <__sflush_r+0x18>
 800744e:	2300      	movs	r3, #0
 8007450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007454:	682f      	ldr	r7, [r5, #0]
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	d032      	beq.n	80074c0 <__sflush_r+0x94>
 800745a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	075a      	lsls	r2, r3, #29
 8007460:	d505      	bpl.n	800746e <__sflush_r+0x42>
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	1ac0      	subs	r0, r0, r3
 8007466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007468:	b10b      	cbz	r3, 800746e <__sflush_r+0x42>
 800746a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800746c:	1ac0      	subs	r0, r0, r3
 800746e:	2300      	movs	r3, #0
 8007470:	4602      	mov	r2, r0
 8007472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007474:	4628      	mov	r0, r5
 8007476:	6a21      	ldr	r1, [r4, #32]
 8007478:	47b0      	blx	r6
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	d106      	bne.n	800748e <__sflush_r+0x62>
 8007480:	6829      	ldr	r1, [r5, #0]
 8007482:	291d      	cmp	r1, #29
 8007484:	d82c      	bhi.n	80074e0 <__sflush_r+0xb4>
 8007486:	4a29      	ldr	r2, [pc, #164]	; (800752c <__sflush_r+0x100>)
 8007488:	40ca      	lsrs	r2, r1
 800748a:	07d6      	lsls	r6, r2, #31
 800748c:	d528      	bpl.n	80074e0 <__sflush_r+0xb4>
 800748e:	2200      	movs	r2, #0
 8007490:	6062      	str	r2, [r4, #4]
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	04d9      	lsls	r1, r3, #19
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	d504      	bpl.n	80074a4 <__sflush_r+0x78>
 800749a:	1c42      	adds	r2, r0, #1
 800749c:	d101      	bne.n	80074a2 <__sflush_r+0x76>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	b903      	cbnz	r3, 80074a4 <__sflush_r+0x78>
 80074a2:	6560      	str	r0, [r4, #84]	; 0x54
 80074a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a6:	602f      	str	r7, [r5, #0]
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d0cb      	beq.n	8007444 <__sflush_r+0x18>
 80074ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b0:	4299      	cmp	r1, r3
 80074b2:	d002      	beq.n	80074ba <__sflush_r+0x8e>
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 fd93 	bl	8007fe0 <_free_r>
 80074ba:	2000      	movs	r0, #0
 80074bc:	6360      	str	r0, [r4, #52]	; 0x34
 80074be:	e7c2      	b.n	8007446 <__sflush_r+0x1a>
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	2301      	movs	r3, #1
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b0      	blx	r6
 80074c8:	1c41      	adds	r1, r0, #1
 80074ca:	d1c7      	bne.n	800745c <__sflush_r+0x30>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0c4      	beq.n	800745c <__sflush_r+0x30>
 80074d2:	2b1d      	cmp	r3, #29
 80074d4:	d001      	beq.n	80074da <__sflush_r+0xae>
 80074d6:	2b16      	cmp	r3, #22
 80074d8:	d101      	bne.n	80074de <__sflush_r+0xb2>
 80074da:	602f      	str	r7, [r5, #0]
 80074dc:	e7b2      	b.n	8007444 <__sflush_r+0x18>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	e7ae      	b.n	8007446 <__sflush_r+0x1a>
 80074e8:	690f      	ldr	r7, [r1, #16]
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	d0aa      	beq.n	8007444 <__sflush_r+0x18>
 80074ee:	0793      	lsls	r3, r2, #30
 80074f0:	bf18      	it	ne
 80074f2:	2300      	movne	r3, #0
 80074f4:	680e      	ldr	r6, [r1, #0]
 80074f6:	bf08      	it	eq
 80074f8:	694b      	ldreq	r3, [r1, #20]
 80074fa:	1bf6      	subs	r6, r6, r7
 80074fc:	600f      	str	r7, [r1, #0]
 80074fe:	608b      	str	r3, [r1, #8]
 8007500:	2e00      	cmp	r6, #0
 8007502:	dd9f      	ble.n	8007444 <__sflush_r+0x18>
 8007504:	4633      	mov	r3, r6
 8007506:	463a      	mov	r2, r7
 8007508:	4628      	mov	r0, r5
 800750a:	6a21      	ldr	r1, [r4, #32]
 800750c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007510:	47e0      	blx	ip
 8007512:	2800      	cmp	r0, #0
 8007514:	dc06      	bgt.n	8007524 <__sflush_r+0xf8>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007520:	81a3      	strh	r3, [r4, #12]
 8007522:	e790      	b.n	8007446 <__sflush_r+0x1a>
 8007524:	4407      	add	r7, r0
 8007526:	1a36      	subs	r6, r6, r0
 8007528:	e7ea      	b.n	8007500 <__sflush_r+0xd4>
 800752a:	bf00      	nop
 800752c:	20400001 	.word	0x20400001

08007530 <_fflush_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b913      	cbnz	r3, 8007540 <_fflush_r+0x10>
 800753a:	2500      	movs	r5, #0
 800753c:	4628      	mov	r0, r5
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	b118      	cbz	r0, 800754a <_fflush_r+0x1a>
 8007542:	6983      	ldr	r3, [r0, #24]
 8007544:	b90b      	cbnz	r3, 800754a <_fflush_r+0x1a>
 8007546:	f000 f887 	bl	8007658 <__sinit>
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <_fflush_r+0x6c>)
 800754c:	429c      	cmp	r4, r3
 800754e:	d11b      	bne.n	8007588 <_fflush_r+0x58>
 8007550:	686c      	ldr	r4, [r5, #4]
 8007552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ef      	beq.n	800753a <_fflush_r+0xa>
 800755a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800755c:	07d0      	lsls	r0, r2, #31
 800755e:	d404      	bmi.n	800756a <_fflush_r+0x3a>
 8007560:	0599      	lsls	r1, r3, #22
 8007562:	d402      	bmi.n	800756a <_fflush_r+0x3a>
 8007564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007566:	f000 f91a 	bl	800779e <__retarget_lock_acquire_recursive>
 800756a:	4628      	mov	r0, r5
 800756c:	4621      	mov	r1, r4
 800756e:	f7ff ff5d 	bl	800742c <__sflush_r>
 8007572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007574:	4605      	mov	r5, r0
 8007576:	07da      	lsls	r2, r3, #31
 8007578:	d4e0      	bmi.n	800753c <_fflush_r+0xc>
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	059b      	lsls	r3, r3, #22
 800757e:	d4dd      	bmi.n	800753c <_fflush_r+0xc>
 8007580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007582:	f000 f90d 	bl	80077a0 <__retarget_lock_release_recursive>
 8007586:	e7d9      	b.n	800753c <_fflush_r+0xc>
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <_fflush_r+0x70>)
 800758a:	429c      	cmp	r4, r3
 800758c:	d101      	bne.n	8007592 <_fflush_r+0x62>
 800758e:	68ac      	ldr	r4, [r5, #8]
 8007590:	e7df      	b.n	8007552 <_fflush_r+0x22>
 8007592:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <_fflush_r+0x74>)
 8007594:	429c      	cmp	r4, r3
 8007596:	bf08      	it	eq
 8007598:	68ec      	ldreq	r4, [r5, #12]
 800759a:	e7da      	b.n	8007552 <_fflush_r+0x22>
 800759c:	08008790 	.word	0x08008790
 80075a0:	080087b0 	.word	0x080087b0
 80075a4:	08008770 	.word	0x08008770

080075a8 <std>:
 80075a8:	2300      	movs	r3, #0
 80075aa:	b510      	push	{r4, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	e9c0 3300 	strd	r3, r3, [r0]
 80075b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075b6:	6083      	str	r3, [r0, #8]
 80075b8:	8181      	strh	r1, [r0, #12]
 80075ba:	6643      	str	r3, [r0, #100]	; 0x64
 80075bc:	81c2      	strh	r2, [r0, #14]
 80075be:	6183      	str	r3, [r0, #24]
 80075c0:	4619      	mov	r1, r3
 80075c2:	2208      	movs	r2, #8
 80075c4:	305c      	adds	r0, #92	; 0x5c
 80075c6:	f7fe f9a1 	bl	800590c <memset>
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x38>)
 80075cc:	6224      	str	r4, [r4, #32]
 80075ce:	6263      	str	r3, [r4, #36]	; 0x24
 80075d0:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <std+0x3c>)
 80075d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <std+0x40>)
 80075d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <std+0x44>)
 80075da:	6323      	str	r3, [r4, #48]	; 0x30
 80075dc:	bd10      	pop	{r4, pc}
 80075de:	bf00      	nop
 80075e0:	08008241 	.word	0x08008241
 80075e4:	08008263 	.word	0x08008263
 80075e8:	0800829b 	.word	0x0800829b
 80075ec:	080082bf 	.word	0x080082bf

080075f0 <_cleanup_r>:
 80075f0:	4901      	ldr	r1, [pc, #4]	; (80075f8 <_cleanup_r+0x8>)
 80075f2:	f000 b8af 	b.w	8007754 <_fwalk_reent>
 80075f6:	bf00      	nop
 80075f8:	08007531 	.word	0x08007531

080075fc <__sfmoreglue>:
 80075fc:	2268      	movs	r2, #104	; 0x68
 80075fe:	b570      	push	{r4, r5, r6, lr}
 8007600:	1e4d      	subs	r5, r1, #1
 8007602:	4355      	muls	r5, r2
 8007604:	460e      	mov	r6, r1
 8007606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800760a:	f000 fd51 	bl	80080b0 <_malloc_r>
 800760e:	4604      	mov	r4, r0
 8007610:	b140      	cbz	r0, 8007624 <__sfmoreglue+0x28>
 8007612:	2100      	movs	r1, #0
 8007614:	e9c0 1600 	strd	r1, r6, [r0]
 8007618:	300c      	adds	r0, #12
 800761a:	60a0      	str	r0, [r4, #8]
 800761c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007620:	f7fe f974 	bl	800590c <memset>
 8007624:	4620      	mov	r0, r4
 8007626:	bd70      	pop	{r4, r5, r6, pc}

08007628 <__sfp_lock_acquire>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sfp_lock_acquire+0x8>)
 800762a:	f000 b8b8 	b.w	800779e <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20000365 	.word	0x20000365

08007634 <__sfp_lock_release>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sfp_lock_release+0x8>)
 8007636:	f000 b8b3 	b.w	80077a0 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20000365 	.word	0x20000365

08007640 <__sinit_lock_acquire>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sinit_lock_acquire+0x8>)
 8007642:	f000 b8ac 	b.w	800779e <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	20000366 	.word	0x20000366

0800764c <__sinit_lock_release>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__sinit_lock_release+0x8>)
 800764e:	f000 b8a7 	b.w	80077a0 <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	20000366 	.word	0x20000366

08007658 <__sinit>:
 8007658:	b510      	push	{r4, lr}
 800765a:	4604      	mov	r4, r0
 800765c:	f7ff fff0 	bl	8007640 <__sinit_lock_acquire>
 8007660:	69a3      	ldr	r3, [r4, #24]
 8007662:	b11b      	cbz	r3, 800766c <__sinit+0x14>
 8007664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007668:	f7ff bff0 	b.w	800764c <__sinit_lock_release>
 800766c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007670:	6523      	str	r3, [r4, #80]	; 0x50
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <__sinit+0x68>)
 8007674:	4a13      	ldr	r2, [pc, #76]	; (80076c4 <__sinit+0x6c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	62a2      	str	r2, [r4, #40]	; 0x28
 800767a:	42a3      	cmp	r3, r4
 800767c:	bf08      	it	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	4620      	mov	r0, r4
 8007682:	bf08      	it	eq
 8007684:	61a3      	streq	r3, [r4, #24]
 8007686:	f000 f81f 	bl	80076c8 <__sfp>
 800768a:	6060      	str	r0, [r4, #4]
 800768c:	4620      	mov	r0, r4
 800768e:	f000 f81b 	bl	80076c8 <__sfp>
 8007692:	60a0      	str	r0, [r4, #8]
 8007694:	4620      	mov	r0, r4
 8007696:	f000 f817 	bl	80076c8 <__sfp>
 800769a:	2200      	movs	r2, #0
 800769c:	2104      	movs	r1, #4
 800769e:	60e0      	str	r0, [r4, #12]
 80076a0:	6860      	ldr	r0, [r4, #4]
 80076a2:	f7ff ff81 	bl	80075a8 <std>
 80076a6:	2201      	movs	r2, #1
 80076a8:	2109      	movs	r1, #9
 80076aa:	68a0      	ldr	r0, [r4, #8]
 80076ac:	f7ff ff7c 	bl	80075a8 <std>
 80076b0:	2202      	movs	r2, #2
 80076b2:	2112      	movs	r1, #18
 80076b4:	68e0      	ldr	r0, [r4, #12]
 80076b6:	f7ff ff77 	bl	80075a8 <std>
 80076ba:	2301      	movs	r3, #1
 80076bc:	61a3      	str	r3, [r4, #24]
 80076be:	e7d1      	b.n	8007664 <__sinit+0xc>
 80076c0:	08008694 	.word	0x08008694
 80076c4:	080075f1 	.word	0x080075f1

080076c8 <__sfp>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	4607      	mov	r7, r0
 80076cc:	f7ff ffac 	bl	8007628 <__sfp_lock_acquire>
 80076d0:	4b1e      	ldr	r3, [pc, #120]	; (800774c <__sfp+0x84>)
 80076d2:	681e      	ldr	r6, [r3, #0]
 80076d4:	69b3      	ldr	r3, [r6, #24]
 80076d6:	b913      	cbnz	r3, 80076de <__sfp+0x16>
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff ffbd 	bl	8007658 <__sinit>
 80076de:	3648      	adds	r6, #72	; 0x48
 80076e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	d503      	bpl.n	80076f0 <__sfp+0x28>
 80076e8:	6833      	ldr	r3, [r6, #0]
 80076ea:	b30b      	cbz	r3, 8007730 <__sfp+0x68>
 80076ec:	6836      	ldr	r6, [r6, #0]
 80076ee:	e7f7      	b.n	80076e0 <__sfp+0x18>
 80076f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076f4:	b9d5      	cbnz	r5, 800772c <__sfp+0x64>
 80076f6:	4b16      	ldr	r3, [pc, #88]	; (8007750 <__sfp+0x88>)
 80076f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076fc:	60e3      	str	r3, [r4, #12]
 80076fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007700:	f000 f84c 	bl	800779c <__retarget_lock_init_recursive>
 8007704:	f7ff ff96 	bl	8007634 <__sfp_lock_release>
 8007708:	2208      	movs	r2, #8
 800770a:	4629      	mov	r1, r5
 800770c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007714:	6025      	str	r5, [r4, #0]
 8007716:	61a5      	str	r5, [r4, #24]
 8007718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800771c:	f7fe f8f6 	bl	800590c <memset>
 8007720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007728:	4620      	mov	r0, r4
 800772a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772c:	3468      	adds	r4, #104	; 0x68
 800772e:	e7d9      	b.n	80076e4 <__sfp+0x1c>
 8007730:	2104      	movs	r1, #4
 8007732:	4638      	mov	r0, r7
 8007734:	f7ff ff62 	bl	80075fc <__sfmoreglue>
 8007738:	4604      	mov	r4, r0
 800773a:	6030      	str	r0, [r6, #0]
 800773c:	2800      	cmp	r0, #0
 800773e:	d1d5      	bne.n	80076ec <__sfp+0x24>
 8007740:	f7ff ff78 	bl	8007634 <__sfp_lock_release>
 8007744:	230c      	movs	r3, #12
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	e7ee      	b.n	8007728 <__sfp+0x60>
 800774a:	bf00      	nop
 800774c:	08008694 	.word	0x08008694
 8007750:	ffff0001 	.word	0xffff0001

08007754 <_fwalk_reent>:
 8007754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	4606      	mov	r6, r0
 800775a:	4688      	mov	r8, r1
 800775c:	2700      	movs	r7, #0
 800775e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007766:	f1b9 0901 	subs.w	r9, r9, #1
 800776a:	d505      	bpl.n	8007778 <_fwalk_reent+0x24>
 800776c:	6824      	ldr	r4, [r4, #0]
 800776e:	2c00      	cmp	r4, #0
 8007770:	d1f7      	bne.n	8007762 <_fwalk_reent+0xe>
 8007772:	4638      	mov	r0, r7
 8007774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007778:	89ab      	ldrh	r3, [r5, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d907      	bls.n	800778e <_fwalk_reent+0x3a>
 800777e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007782:	3301      	adds	r3, #1
 8007784:	d003      	beq.n	800778e <_fwalk_reent+0x3a>
 8007786:	4629      	mov	r1, r5
 8007788:	4630      	mov	r0, r6
 800778a:	47c0      	blx	r8
 800778c:	4307      	orrs	r7, r0
 800778e:	3568      	adds	r5, #104	; 0x68
 8007790:	e7e9      	b.n	8007766 <_fwalk_reent+0x12>
	...

08007794 <_localeconv_r>:
 8007794:	4800      	ldr	r0, [pc, #0]	; (8007798 <_localeconv_r+0x4>)
 8007796:	4770      	bx	lr
 8007798:	20000160 	.word	0x20000160

0800779c <__retarget_lock_init_recursive>:
 800779c:	4770      	bx	lr

0800779e <__retarget_lock_acquire_recursive>:
 800779e:	4770      	bx	lr

080077a0 <__retarget_lock_release_recursive>:
 80077a0:	4770      	bx	lr

080077a2 <__swhatbuf_r>:
 80077a2:	b570      	push	{r4, r5, r6, lr}
 80077a4:	460e      	mov	r6, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	4614      	mov	r4, r2
 80077ac:	2900      	cmp	r1, #0
 80077ae:	461d      	mov	r5, r3
 80077b0:	b096      	sub	sp, #88	; 0x58
 80077b2:	da08      	bge.n	80077c6 <__swhatbuf_r+0x24>
 80077b4:	2200      	movs	r2, #0
 80077b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	061a      	lsls	r2, r3, #24
 80077be:	d410      	bmi.n	80077e2 <__swhatbuf_r+0x40>
 80077c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c4:	e00e      	b.n	80077e4 <__swhatbuf_r+0x42>
 80077c6:	466a      	mov	r2, sp
 80077c8:	f000 fda0 	bl	800830c <_fstat_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dbf1      	blt.n	80077b4 <__swhatbuf_r+0x12>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077da:	425a      	negs	r2, r3
 80077dc:	415a      	adcs	r2, r3
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	e7ee      	b.n	80077c0 <__swhatbuf_r+0x1e>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	2000      	movs	r0, #0
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	b016      	add	sp, #88	; 0x58
 80077ea:	bd70      	pop	{r4, r5, r6, pc}

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b002      	add	sp, #8
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	466a      	mov	r2, sp
 800780a:	ab01      	add	r3, sp, #4
 800780c:	f7ff ffc9 	bl	80077a2 <__swhatbuf_r>
 8007810:	9900      	ldr	r1, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4630      	mov	r0, r6
 8007816:	f000 fc4b 	bl	80080b0 <_malloc_r>
 800781a:	b948      	cbnz	r0, 8007830 <__smakebuf_r+0x44>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d4ef      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	e7e3      	b.n	80077f8 <__smakebuf_r+0xc>
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <__smakebuf_r+0x7c>)
 8007832:	62b3      	str	r3, [r6, #40]	; 0x28
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6120      	str	r0, [r4, #16]
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x74>
 8007848:	4630      	mov	r0, r6
 800784a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784e:	f000 fd6f 	bl	8008330 <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x74>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	4305      	orrs	r5, r0
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cd      	b.n	8007804 <__smakebuf_r+0x18>
 8007868:	080075f1 	.word	0x080075f1

0800786c <malloc>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <malloc+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f000 bc1d 	b.w	80080b0 <_malloc_r>
 8007876:	bf00      	nop
 8007878:	2000000c 	.word	0x2000000c

0800787c <memchr>:
 800787c:	4603      	mov	r3, r0
 800787e:	b510      	push	{r4, lr}
 8007880:	b2c9      	uxtb	r1, r1
 8007882:	4402      	add	r2, r0
 8007884:	4293      	cmp	r3, r2
 8007886:	4618      	mov	r0, r3
 8007888:	d101      	bne.n	800788e <memchr+0x12>
 800788a:	2000      	movs	r0, #0
 800788c:	e003      	b.n	8007896 <memchr+0x1a>
 800788e:	7804      	ldrb	r4, [r0, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	428c      	cmp	r4, r1
 8007894:	d1f6      	bne.n	8007884 <memchr+0x8>
 8007896:	bd10      	pop	{r4, pc}

08007898 <memcpy>:
 8007898:	440a      	add	r2, r1
 800789a:	4291      	cmp	r1, r2
 800789c:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a0:	d100      	bne.n	80078a4 <memcpy+0xc>
 80078a2:	4770      	bx	lr
 80078a4:	b510      	push	{r4, lr}
 80078a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078aa:	4291      	cmp	r1, r2
 80078ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b0:	d1f9      	bne.n	80078a6 <memcpy+0xe>
 80078b2:	bd10      	pop	{r4, pc}

080078b4 <_Balloc>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	b976      	cbnz	r6, 80078dc <_Balloc+0x28>
 80078be:	2010      	movs	r0, #16
 80078c0:	f7ff ffd4 	bl	800786c <malloc>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6260      	str	r0, [r4, #36]	; 0x24
 80078c8:	b920      	cbnz	r0, 80078d4 <_Balloc+0x20>
 80078ca:	2166      	movs	r1, #102	; 0x66
 80078cc:	4b17      	ldr	r3, [pc, #92]	; (800792c <_Balloc+0x78>)
 80078ce:	4818      	ldr	r0, [pc, #96]	; (8007930 <_Balloc+0x7c>)
 80078d0:	f7fd ffc2 	bl	8005858 <__assert_func>
 80078d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d8:	6006      	str	r6, [r0, #0]
 80078da:	60c6      	str	r6, [r0, #12]
 80078dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078de:	68f3      	ldr	r3, [r6, #12]
 80078e0:	b183      	cbz	r3, 8007904 <_Balloc+0x50>
 80078e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078ea:	b9b8      	cbnz	r0, 800791c <_Balloc+0x68>
 80078ec:	2101      	movs	r1, #1
 80078ee:	fa01 f605 	lsl.w	r6, r1, r5
 80078f2:	1d72      	adds	r2, r6, #5
 80078f4:	4620      	mov	r0, r4
 80078f6:	0092      	lsls	r2, r2, #2
 80078f8:	f000 fb5e 	bl	8007fb8 <_calloc_r>
 80078fc:	b160      	cbz	r0, 8007918 <_Balloc+0x64>
 80078fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007902:	e00e      	b.n	8007922 <_Balloc+0x6e>
 8007904:	2221      	movs	r2, #33	; 0x21
 8007906:	2104      	movs	r1, #4
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fb55 	bl	8007fb8 <_calloc_r>
 800790e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007910:	60f0      	str	r0, [r6, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e4      	bne.n	80078e2 <_Balloc+0x2e>
 8007918:	2000      	movs	r0, #0
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	6802      	ldr	r2, [r0, #0]
 800791e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007922:	2300      	movs	r3, #0
 8007924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007928:	e7f7      	b.n	800791a <_Balloc+0x66>
 800792a:	bf00      	nop
 800792c:	080086ea 	.word	0x080086ea
 8007930:	080087d0 	.word	0x080087d0

08007934 <_Bfree>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b976      	cbnz	r6, 800795c <_Bfree+0x28>
 800793e:	2010      	movs	r0, #16
 8007940:	f7ff ff94 	bl	800786c <malloc>
 8007944:	4602      	mov	r2, r0
 8007946:	6268      	str	r0, [r5, #36]	; 0x24
 8007948:	b920      	cbnz	r0, 8007954 <_Bfree+0x20>
 800794a:	218a      	movs	r1, #138	; 0x8a
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <_Bfree+0x3c>)
 800794e:	4809      	ldr	r0, [pc, #36]	; (8007974 <_Bfree+0x40>)
 8007950:	f7fd ff82 	bl	8005858 <__assert_func>
 8007954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007958:	6006      	str	r6, [r0, #0]
 800795a:	60c6      	str	r6, [r0, #12]
 800795c:	b13c      	cbz	r4, 800796e <_Bfree+0x3a>
 800795e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007960:	6862      	ldr	r2, [r4, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007968:	6021      	str	r1, [r4, #0]
 800796a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	080086ea 	.word	0x080086ea
 8007974:	080087d0 	.word	0x080087d0

08007978 <__multadd>:
 8007978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797c:	4607      	mov	r7, r0
 800797e:	460c      	mov	r4, r1
 8007980:	461e      	mov	r6, r3
 8007982:	2000      	movs	r0, #0
 8007984:	690d      	ldr	r5, [r1, #16]
 8007986:	f101 0c14 	add.w	ip, r1, #20
 800798a:	f8dc 3000 	ldr.w	r3, [ip]
 800798e:	3001      	adds	r0, #1
 8007990:	b299      	uxth	r1, r3
 8007992:	fb02 6101 	mla	r1, r2, r1, r6
 8007996:	0c1e      	lsrs	r6, r3, #16
 8007998:	0c0b      	lsrs	r3, r1, #16
 800799a:	fb02 3306 	mla	r3, r2, r6, r3
 800799e:	b289      	uxth	r1, r1
 80079a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079a4:	4285      	cmp	r5, r0
 80079a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079aa:	f84c 1b04 	str.w	r1, [ip], #4
 80079ae:	dcec      	bgt.n	800798a <__multadd+0x12>
 80079b0:	b30e      	cbz	r6, 80079f6 <__multadd+0x7e>
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	42ab      	cmp	r3, r5
 80079b6:	dc19      	bgt.n	80079ec <__multadd+0x74>
 80079b8:	6861      	ldr	r1, [r4, #4]
 80079ba:	4638      	mov	r0, r7
 80079bc:	3101      	adds	r1, #1
 80079be:	f7ff ff79 	bl	80078b4 <_Balloc>
 80079c2:	4680      	mov	r8, r0
 80079c4:	b928      	cbnz	r0, 80079d2 <__multadd+0x5a>
 80079c6:	4602      	mov	r2, r0
 80079c8:	21b5      	movs	r1, #181	; 0xb5
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <__multadd+0x84>)
 80079cc:	480c      	ldr	r0, [pc, #48]	; (8007a00 <__multadd+0x88>)
 80079ce:	f7fd ff43 	bl	8005858 <__assert_func>
 80079d2:	6922      	ldr	r2, [r4, #16]
 80079d4:	f104 010c 	add.w	r1, r4, #12
 80079d8:	3202      	adds	r2, #2
 80079da:	0092      	lsls	r2, r2, #2
 80079dc:	300c      	adds	r0, #12
 80079de:	f7ff ff5b 	bl	8007898 <memcpy>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ffa5 	bl	8007934 <_Bfree>
 80079ea:	4644      	mov	r4, r8
 80079ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079f0:	3501      	adds	r5, #1
 80079f2:	615e      	str	r6, [r3, #20]
 80079f4:	6125      	str	r5, [r4, #16]
 80079f6:	4620      	mov	r0, r4
 80079f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fc:	0800875c 	.word	0x0800875c
 8007a00:	080087d0 	.word	0x080087d0

08007a04 <__hi0bits>:
 8007a04:	0c02      	lsrs	r2, r0, #16
 8007a06:	0412      	lsls	r2, r2, #16
 8007a08:	4603      	mov	r3, r0
 8007a0a:	b9ca      	cbnz	r2, 8007a40 <__hi0bits+0x3c>
 8007a0c:	0403      	lsls	r3, r0, #16
 8007a0e:	2010      	movs	r0, #16
 8007a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a14:	bf04      	itt	eq
 8007a16:	021b      	lsleq	r3, r3, #8
 8007a18:	3008      	addeq	r0, #8
 8007a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a1e:	bf04      	itt	eq
 8007a20:	011b      	lsleq	r3, r3, #4
 8007a22:	3004      	addeq	r0, #4
 8007a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a28:	bf04      	itt	eq
 8007a2a:	009b      	lsleq	r3, r3, #2
 8007a2c:	3002      	addeq	r0, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	db05      	blt.n	8007a3e <__hi0bits+0x3a>
 8007a32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a36:	f100 0001 	add.w	r0, r0, #1
 8007a3a:	bf08      	it	eq
 8007a3c:	2020      	moveq	r0, #32
 8007a3e:	4770      	bx	lr
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7e5      	b.n	8007a10 <__hi0bits+0xc>

08007a44 <__lo0bits>:
 8007a44:	6803      	ldr	r3, [r0, #0]
 8007a46:	4602      	mov	r2, r0
 8007a48:	f013 0007 	ands.w	r0, r3, #7
 8007a4c:	d00b      	beq.n	8007a66 <__lo0bits+0x22>
 8007a4e:	07d9      	lsls	r1, r3, #31
 8007a50:	d421      	bmi.n	8007a96 <__lo0bits+0x52>
 8007a52:	0798      	lsls	r0, r3, #30
 8007a54:	bf49      	itett	mi
 8007a56:	085b      	lsrmi	r3, r3, #1
 8007a58:	089b      	lsrpl	r3, r3, #2
 8007a5a:	2001      	movmi	r0, #1
 8007a5c:	6013      	strmi	r3, [r2, #0]
 8007a5e:	bf5c      	itt	pl
 8007a60:	2002      	movpl	r0, #2
 8007a62:	6013      	strpl	r3, [r2, #0]
 8007a64:	4770      	bx	lr
 8007a66:	b299      	uxth	r1, r3
 8007a68:	b909      	cbnz	r1, 8007a6e <__lo0bits+0x2a>
 8007a6a:	2010      	movs	r0, #16
 8007a6c:	0c1b      	lsrs	r3, r3, #16
 8007a6e:	b2d9      	uxtb	r1, r3
 8007a70:	b909      	cbnz	r1, 8007a76 <__lo0bits+0x32>
 8007a72:	3008      	adds	r0, #8
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	0719      	lsls	r1, r3, #28
 8007a78:	bf04      	itt	eq
 8007a7a:	091b      	lsreq	r3, r3, #4
 8007a7c:	3004      	addeq	r0, #4
 8007a7e:	0799      	lsls	r1, r3, #30
 8007a80:	bf04      	itt	eq
 8007a82:	089b      	lsreq	r3, r3, #2
 8007a84:	3002      	addeq	r0, #2
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	d403      	bmi.n	8007a92 <__lo0bits+0x4e>
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	f100 0001 	add.w	r0, r0, #1
 8007a90:	d003      	beq.n	8007a9a <__lo0bits+0x56>
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4770      	bx	lr
 8007a96:	2000      	movs	r0, #0
 8007a98:	4770      	bx	lr
 8007a9a:	2020      	movs	r0, #32
 8007a9c:	4770      	bx	lr
	...

08007aa0 <__i2b>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	f7ff ff05 	bl	80078b4 <_Balloc>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	b928      	cbnz	r0, 8007aba <__i2b+0x1a>
 8007aae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <__i2b+0x24>)
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <__i2b+0x28>)
 8007ab6:	f7fd fecf 	bl	8005858 <__assert_func>
 8007aba:	2301      	movs	r3, #1
 8007abc:	6144      	str	r4, [r0, #20]
 8007abe:	6103      	str	r3, [r0, #16]
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	bf00      	nop
 8007ac4:	0800875c 	.word	0x0800875c
 8007ac8:	080087d0 	.word	0x080087d0

08007acc <__multiply>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	4691      	mov	r9, r2
 8007ad2:	690a      	ldr	r2, [r1, #16]
 8007ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ad8:	460c      	mov	r4, r1
 8007ada:	429a      	cmp	r2, r3
 8007adc:	bfbe      	ittt	lt
 8007ade:	460b      	movlt	r3, r1
 8007ae0:	464c      	movlt	r4, r9
 8007ae2:	4699      	movlt	r9, r3
 8007ae4:	6927      	ldr	r7, [r4, #16]
 8007ae6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	6861      	ldr	r1, [r4, #4]
 8007aee:	eb07 060a 	add.w	r6, r7, sl
 8007af2:	42b3      	cmp	r3, r6
 8007af4:	b085      	sub	sp, #20
 8007af6:	bfb8      	it	lt
 8007af8:	3101      	addlt	r1, #1
 8007afa:	f7ff fedb 	bl	80078b4 <_Balloc>
 8007afe:	b930      	cbnz	r0, 8007b0e <__multiply+0x42>
 8007b00:	4602      	mov	r2, r0
 8007b02:	f240 115d 	movw	r1, #349	; 0x15d
 8007b06:	4b43      	ldr	r3, [pc, #268]	; (8007c14 <__multiply+0x148>)
 8007b08:	4843      	ldr	r0, [pc, #268]	; (8007c18 <__multiply+0x14c>)
 8007b0a:	f7fd fea5 	bl	8005858 <__assert_func>
 8007b0e:	f100 0514 	add.w	r5, r0, #20
 8007b12:	462b      	mov	r3, r5
 8007b14:	2200      	movs	r2, #0
 8007b16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b1a:	4543      	cmp	r3, r8
 8007b1c:	d321      	bcc.n	8007b62 <__multiply+0x96>
 8007b1e:	f104 0314 	add.w	r3, r4, #20
 8007b22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b26:	f109 0314 	add.w	r3, r9, #20
 8007b2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	1b3a      	subs	r2, r7, r4
 8007b32:	3a15      	subs	r2, #21
 8007b34:	f022 0203 	bic.w	r2, r2, #3
 8007b38:	3204      	adds	r2, #4
 8007b3a:	f104 0115 	add.w	r1, r4, #21
 8007b3e:	428f      	cmp	r7, r1
 8007b40:	bf38      	it	cc
 8007b42:	2204      	movcc	r2, #4
 8007b44:	9201      	str	r2, [sp, #4]
 8007b46:	9a02      	ldr	r2, [sp, #8]
 8007b48:	9303      	str	r3, [sp, #12]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d80c      	bhi.n	8007b68 <__multiply+0x9c>
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	dd03      	ble.n	8007b5a <__multiply+0x8e>
 8007b52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d059      	beq.n	8007c0e <__multiply+0x142>
 8007b5a:	6106      	str	r6, [r0, #16]
 8007b5c:	b005      	add	sp, #20
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	f843 2b04 	str.w	r2, [r3], #4
 8007b66:	e7d8      	b.n	8007b1a <__multiply+0x4e>
 8007b68:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b6c:	f1ba 0f00 	cmp.w	sl, #0
 8007b70:	d023      	beq.n	8007bba <__multiply+0xee>
 8007b72:	46a9      	mov	r9, r5
 8007b74:	f04f 0c00 	mov.w	ip, #0
 8007b78:	f104 0e14 	add.w	lr, r4, #20
 8007b7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b80:	f8d9 1000 	ldr.w	r1, [r9]
 8007b84:	fa1f fb82 	uxth.w	fp, r2
 8007b88:	b289      	uxth	r1, r1
 8007b8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b8e:	4461      	add	r1, ip
 8007b90:	f8d9 c000 	ldr.w	ip, [r9]
 8007b94:	0c12      	lsrs	r2, r2, #16
 8007b96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b9a:	fb0a c202 	mla	r2, sl, r2, ip
 8007b9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ba8:	4577      	cmp	r7, lr
 8007baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bae:	f849 1b04 	str.w	r1, [r9], #4
 8007bb2:	d8e3      	bhi.n	8007b7c <__multiply+0xb0>
 8007bb4:	9a01      	ldr	r2, [sp, #4]
 8007bb6:	f845 c002 	str.w	ip, [r5, r2]
 8007bba:	9a03      	ldr	r2, [sp, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	d020      	beq.n	8007c0a <__multiply+0x13e>
 8007bc8:	46ae      	mov	lr, r5
 8007bca:	f04f 0a00 	mov.w	sl, #0
 8007bce:	6829      	ldr	r1, [r5, #0]
 8007bd0:	f104 0c14 	add.w	ip, r4, #20
 8007bd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bdc:	b289      	uxth	r1, r1
 8007bde:	fb09 220b 	mla	r2, r9, fp, r2
 8007be2:	4492      	add	sl, r2
 8007be4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007be8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007bf0:	f8be 1000 	ldrh.w	r1, [lr]
 8007bf4:	0c12      	lsrs	r2, r2, #16
 8007bf6:	fb09 1102 	mla	r1, r9, r2, r1
 8007bfa:	4567      	cmp	r7, ip
 8007bfc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c04:	d8e6      	bhi.n	8007bd4 <__multiply+0x108>
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	50a9      	str	r1, [r5, r2]
 8007c0a:	3504      	adds	r5, #4
 8007c0c:	e79b      	b.n	8007b46 <__multiply+0x7a>
 8007c0e:	3e01      	subs	r6, #1
 8007c10:	e79d      	b.n	8007b4e <__multiply+0x82>
 8007c12:	bf00      	nop
 8007c14:	0800875c 	.word	0x0800875c
 8007c18:	080087d0 	.word	0x080087d0

08007c1c <__pow5mult>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	4615      	mov	r5, r2
 8007c22:	f012 0203 	ands.w	r2, r2, #3
 8007c26:	4606      	mov	r6, r0
 8007c28:	460f      	mov	r7, r1
 8007c2a:	d007      	beq.n	8007c3c <__pow5mult+0x20>
 8007c2c:	4c25      	ldr	r4, [pc, #148]	; (8007cc4 <__pow5mult+0xa8>)
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	2300      	movs	r3, #0
 8007c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c36:	f7ff fe9f 	bl	8007978 <__multadd>
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	10ad      	asrs	r5, r5, #2
 8007c3e:	d03d      	beq.n	8007cbc <__pow5mult+0xa0>
 8007c40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c42:	b97c      	cbnz	r4, 8007c64 <__pow5mult+0x48>
 8007c44:	2010      	movs	r0, #16
 8007c46:	f7ff fe11 	bl	800786c <malloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	6270      	str	r0, [r6, #36]	; 0x24
 8007c4e:	b928      	cbnz	r0, 8007c5c <__pow5mult+0x40>
 8007c50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c54:	4b1c      	ldr	r3, [pc, #112]	; (8007cc8 <__pow5mult+0xac>)
 8007c56:	481d      	ldr	r0, [pc, #116]	; (8007ccc <__pow5mult+0xb0>)
 8007c58:	f7fd fdfe 	bl	8005858 <__assert_func>
 8007c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c60:	6004      	str	r4, [r0, #0]
 8007c62:	60c4      	str	r4, [r0, #12]
 8007c64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c6c:	b94c      	cbnz	r4, 8007c82 <__pow5mult+0x66>
 8007c6e:	f240 2171 	movw	r1, #625	; 0x271
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ff14 	bl	8007aa0 <__i2b>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c80:	6003      	str	r3, [r0, #0]
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	07eb      	lsls	r3, r5, #31
 8007c88:	d50a      	bpl.n	8007ca0 <__pow5mult+0x84>
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ff1c 	bl	8007acc <__multiply>
 8007c94:	4680      	mov	r8, r0
 8007c96:	4639      	mov	r1, r7
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff fe4b 	bl	8007934 <_Bfree>
 8007c9e:	4647      	mov	r7, r8
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	d00b      	beq.n	8007cbc <__pow5mult+0xa0>
 8007ca4:	6820      	ldr	r0, [r4, #0]
 8007ca6:	b938      	cbnz	r0, 8007cb8 <__pow5mult+0x9c>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4621      	mov	r1, r4
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ff0d 	bl	8007acc <__multiply>
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	f8c0 9000 	str.w	r9, [r0]
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e7e4      	b.n	8007c86 <__pow5mult+0x6a>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	bf00      	nop
 8007cc4:	08008920 	.word	0x08008920
 8007cc8:	080086ea 	.word	0x080086ea
 8007ccc:	080087d0 	.word	0x080087d0

08007cd0 <__lshift>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	4691      	mov	r9, r2
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	6849      	ldr	r1, [r1, #4]
 8007cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ce8:	f108 0601 	add.w	r6, r8, #1
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	db0b      	blt.n	8007d08 <__lshift+0x38>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fddf 	bl	80078b4 <_Balloc>
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	b948      	cbnz	r0, 8007d0e <__lshift+0x3e>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d00:	4b29      	ldr	r3, [pc, #164]	; (8007da8 <__lshift+0xd8>)
 8007d02:	482a      	ldr	r0, [pc, #168]	; (8007dac <__lshift+0xdc>)
 8007d04:	f7fd fda8 	bl	8005858 <__assert_func>
 8007d08:	3101      	adds	r1, #1
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	e7ee      	b.n	8007cec <__lshift+0x1c>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f100 0114 	add.w	r1, r0, #20
 8007d14:	f100 0210 	add.w	r2, r0, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4553      	cmp	r3, sl
 8007d1c:	db37      	blt.n	8007d8e <__lshift+0xbe>
 8007d1e:	6920      	ldr	r0, [r4, #16]
 8007d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d24:	f104 0314 	add.w	r3, r4, #20
 8007d28:	f019 091f 	ands.w	r9, r9, #31
 8007d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d34:	d02f      	beq.n	8007d96 <__lshift+0xc6>
 8007d36:	468a      	mov	sl, r1
 8007d38:	f04f 0c00 	mov.w	ip, #0
 8007d3c:	f1c9 0e20 	rsb	lr, r9, #32
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	fa02 f209 	lsl.w	r2, r2, r9
 8007d46:	ea42 020c 	orr.w	r2, r2, ip
 8007d4a:	f84a 2b04 	str.w	r2, [sl], #4
 8007d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d52:	4298      	cmp	r0, r3
 8007d54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d58:	d8f2      	bhi.n	8007d40 <__lshift+0x70>
 8007d5a:	1b03      	subs	r3, r0, r4
 8007d5c:	3b15      	subs	r3, #21
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	3304      	adds	r3, #4
 8007d64:	f104 0215 	add.w	r2, r4, #21
 8007d68:	4290      	cmp	r0, r2
 8007d6a:	bf38      	it	cc
 8007d6c:	2304      	movcc	r3, #4
 8007d6e:	f841 c003 	str.w	ip, [r1, r3]
 8007d72:	f1bc 0f00 	cmp.w	ip, #0
 8007d76:	d001      	beq.n	8007d7c <__lshift+0xac>
 8007d78:	f108 0602 	add.w	r6, r8, #2
 8007d7c:	3e01      	subs	r6, #1
 8007d7e:	4638      	mov	r0, r7
 8007d80:	4621      	mov	r1, r4
 8007d82:	612e      	str	r6, [r5, #16]
 8007d84:	f7ff fdd6 	bl	8007934 <_Bfree>
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d92:	3301      	adds	r3, #1
 8007d94:	e7c1      	b.n	8007d1a <__lshift+0x4a>
 8007d96:	3904      	subs	r1, #4
 8007d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9c:	4298      	cmp	r0, r3
 8007d9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007da2:	d8f9      	bhi.n	8007d98 <__lshift+0xc8>
 8007da4:	e7ea      	b.n	8007d7c <__lshift+0xac>
 8007da6:	bf00      	nop
 8007da8:	0800875c 	.word	0x0800875c
 8007dac:	080087d0 	.word	0x080087d0

08007db0 <__mcmp>:
 8007db0:	4603      	mov	r3, r0
 8007db2:	690a      	ldr	r2, [r1, #16]
 8007db4:	6900      	ldr	r0, [r0, #16]
 8007db6:	b530      	push	{r4, r5, lr}
 8007db8:	1a80      	subs	r0, r0, r2
 8007dba:	d10d      	bne.n	8007dd8 <__mcmp+0x28>
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	3114      	adds	r1, #20
 8007dc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dd0:	4295      	cmp	r5, r2
 8007dd2:	d002      	beq.n	8007dda <__mcmp+0x2a>
 8007dd4:	d304      	bcc.n	8007de0 <__mcmp+0x30>
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	bd30      	pop	{r4, r5, pc}
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	d3f4      	bcc.n	8007dc8 <__mcmp+0x18>
 8007dde:	e7fb      	b.n	8007dd8 <__mcmp+0x28>
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295
 8007de4:	e7f8      	b.n	8007dd8 <__mcmp+0x28>
	...

08007de8 <__mdiff>:
 8007de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	460d      	mov	r5, r1
 8007dee:	4607      	mov	r7, r0
 8007df0:	4611      	mov	r1, r2
 8007df2:	4628      	mov	r0, r5
 8007df4:	4614      	mov	r4, r2
 8007df6:	f7ff ffdb 	bl	8007db0 <__mcmp>
 8007dfa:	1e06      	subs	r6, r0, #0
 8007dfc:	d111      	bne.n	8007e22 <__mdiff+0x3a>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff fd57 	bl	80078b4 <_Balloc>
 8007e06:	4602      	mov	r2, r0
 8007e08:	b928      	cbnz	r0, 8007e16 <__mdiff+0x2e>
 8007e0a:	f240 2132 	movw	r1, #562	; 0x232
 8007e0e:	4b3a      	ldr	r3, [pc, #232]	; (8007ef8 <__mdiff+0x110>)
 8007e10:	483a      	ldr	r0, [pc, #232]	; (8007efc <__mdiff+0x114>)
 8007e12:	f7fd fd21 	bl	8005858 <__assert_func>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	bfa4      	itt	ge
 8007e24:	4623      	movge	r3, r4
 8007e26:	462c      	movge	r4, r5
 8007e28:	4638      	mov	r0, r7
 8007e2a:	6861      	ldr	r1, [r4, #4]
 8007e2c:	bfa6      	itte	ge
 8007e2e:	461d      	movge	r5, r3
 8007e30:	2600      	movge	r6, #0
 8007e32:	2601      	movlt	r6, #1
 8007e34:	f7ff fd3e 	bl	80078b4 <_Balloc>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	b918      	cbnz	r0, 8007e44 <__mdiff+0x5c>
 8007e3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e40:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <__mdiff+0x110>)
 8007e42:	e7e5      	b.n	8007e10 <__mdiff+0x28>
 8007e44:	f102 0814 	add.w	r8, r2, #20
 8007e48:	46c2      	mov	sl, r8
 8007e4a:	f04f 0c00 	mov.w	ip, #0
 8007e4e:	6927      	ldr	r7, [r4, #16]
 8007e50:	60c6      	str	r6, [r0, #12]
 8007e52:	692e      	ldr	r6, [r5, #16]
 8007e54:	f104 0014 	add.w	r0, r4, #20
 8007e58:	f105 0914 	add.w	r9, r5, #20
 8007e5c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007e60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e64:	3410      	adds	r4, #16
 8007e66:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007e6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e6e:	fa1f f18b 	uxth.w	r1, fp
 8007e72:	448c      	add	ip, r1
 8007e74:	b299      	uxth	r1, r3
 8007e76:	0c1b      	lsrs	r3, r3, #16
 8007e78:	ebac 0101 	sub.w	r1, ip, r1
 8007e7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e84:	b289      	uxth	r1, r1
 8007e86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e8a:	454e      	cmp	r6, r9
 8007e8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e90:	f84a 3b04 	str.w	r3, [sl], #4
 8007e94:	d8e7      	bhi.n	8007e66 <__mdiff+0x7e>
 8007e96:	1b73      	subs	r3, r6, r5
 8007e98:	3b15      	subs	r3, #21
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	3515      	adds	r5, #21
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	42ae      	cmp	r6, r5
 8007ea4:	bf38      	it	cc
 8007ea6:	2304      	movcc	r3, #4
 8007ea8:	4418      	add	r0, r3
 8007eaa:	4443      	add	r3, r8
 8007eac:	461e      	mov	r6, r3
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4575      	cmp	r5, lr
 8007eb2:	d30e      	bcc.n	8007ed2 <__mdiff+0xea>
 8007eb4:	f10e 0103 	add.w	r1, lr, #3
 8007eb8:	1a09      	subs	r1, r1, r0
 8007eba:	f021 0103 	bic.w	r1, r1, #3
 8007ebe:	3803      	subs	r0, #3
 8007ec0:	4586      	cmp	lr, r0
 8007ec2:	bf38      	it	cc
 8007ec4:	2100      	movcc	r1, #0
 8007ec6:	4419      	add	r1, r3
 8007ec8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ecc:	b18b      	cbz	r3, 8007ef2 <__mdiff+0x10a>
 8007ece:	6117      	str	r7, [r2, #16]
 8007ed0:	e7a4      	b.n	8007e1c <__mdiff+0x34>
 8007ed2:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ed6:	fa1f f188 	uxth.w	r1, r8
 8007eda:	4461      	add	r1, ip
 8007edc:	140c      	asrs	r4, r1, #16
 8007ede:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ee2:	b289      	uxth	r1, r1
 8007ee4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ee8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007eec:	f846 1b04 	str.w	r1, [r6], #4
 8007ef0:	e7de      	b.n	8007eb0 <__mdiff+0xc8>
 8007ef2:	3f01      	subs	r7, #1
 8007ef4:	e7e8      	b.n	8007ec8 <__mdiff+0xe0>
 8007ef6:	bf00      	nop
 8007ef8:	0800875c 	.word	0x0800875c
 8007efc:	080087d0 	.word	0x080087d0

08007f00 <__d2b>:
 8007f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f04:	2101      	movs	r1, #1
 8007f06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f0a:	4690      	mov	r8, r2
 8007f0c:	461d      	mov	r5, r3
 8007f0e:	f7ff fcd1 	bl	80078b4 <_Balloc>
 8007f12:	4604      	mov	r4, r0
 8007f14:	b930      	cbnz	r0, 8007f24 <__d2b+0x24>
 8007f16:	4602      	mov	r2, r0
 8007f18:	f240 310a 	movw	r1, #778	; 0x30a
 8007f1c:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <__d2b+0xb0>)
 8007f1e:	4825      	ldr	r0, [pc, #148]	; (8007fb4 <__d2b+0xb4>)
 8007f20:	f7fd fc9a 	bl	8005858 <__assert_func>
 8007f24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f2c:	bb2d      	cbnz	r5, 8007f7a <__d2b+0x7a>
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	f1b8 0300 	subs.w	r3, r8, #0
 8007f34:	d026      	beq.n	8007f84 <__d2b+0x84>
 8007f36:	4668      	mov	r0, sp
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	f7ff fd83 	bl	8007a44 <__lo0bits>
 8007f3e:	9900      	ldr	r1, [sp, #0]
 8007f40:	b1f0      	cbz	r0, 8007f80 <__d2b+0x80>
 8007f42:	9a01      	ldr	r2, [sp, #4]
 8007f44:	f1c0 0320 	rsb	r3, r0, #32
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	40c2      	lsrs	r2, r0
 8007f50:	6163      	str	r3, [r4, #20]
 8007f52:	9201      	str	r2, [sp, #4]
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bf14      	ite	ne
 8007f5a:	2102      	movne	r1, #2
 8007f5c:	2101      	moveq	r1, #1
 8007f5e:	61a3      	str	r3, [r4, #24]
 8007f60:	6121      	str	r1, [r4, #16]
 8007f62:	b1c5      	cbz	r5, 8007f96 <__d2b+0x96>
 8007f64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f68:	4405      	add	r5, r0
 8007f6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f6e:	603d      	str	r5, [r7, #0]
 8007f70:	6030      	str	r0, [r6, #0]
 8007f72:	4620      	mov	r0, r4
 8007f74:	b002      	add	sp, #8
 8007f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f7e:	e7d6      	b.n	8007f2e <__d2b+0x2e>
 8007f80:	6161      	str	r1, [r4, #20]
 8007f82:	e7e7      	b.n	8007f54 <__d2b+0x54>
 8007f84:	a801      	add	r0, sp, #4
 8007f86:	f7ff fd5d 	bl	8007a44 <__lo0bits>
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	6121      	str	r1, [r4, #16]
 8007f90:	6163      	str	r3, [r4, #20]
 8007f92:	3020      	adds	r0, #32
 8007f94:	e7e5      	b.n	8007f62 <__d2b+0x62>
 8007f96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f9e:	6038      	str	r0, [r7, #0]
 8007fa0:	6918      	ldr	r0, [r3, #16]
 8007fa2:	f7ff fd2f 	bl	8007a04 <__hi0bits>
 8007fa6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007faa:	6031      	str	r1, [r6, #0]
 8007fac:	e7e1      	b.n	8007f72 <__d2b+0x72>
 8007fae:	bf00      	nop
 8007fb0:	0800875c 	.word	0x0800875c
 8007fb4:	080087d0 	.word	0x080087d0

08007fb8 <_calloc_r>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	fba1 5402 	umull	r5, r4, r1, r2
 8007fbe:	b934      	cbnz	r4, 8007fce <_calloc_r+0x16>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f000 f875 	bl	80080b0 <_malloc_r>
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	b928      	cbnz	r0, 8007fd6 <_calloc_r+0x1e>
 8007fca:	4630      	mov	r0, r6
 8007fcc:	bd70      	pop	{r4, r5, r6, pc}
 8007fce:	220c      	movs	r2, #12
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	6002      	str	r2, [r0, #0]
 8007fd4:	e7f9      	b.n	8007fca <_calloc_r+0x12>
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7fd fc97 	bl	800590c <memset>
 8007fde:	e7f4      	b.n	8007fca <_calloc_r+0x12>

08007fe0 <_free_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d040      	beq.n	800806a <_free_r+0x8a>
 8007fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fec:	1f0c      	subs	r4, r1, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfb8      	it	lt
 8007ff2:	18e4      	addlt	r4, r4, r3
 8007ff4:	f000 f9d0 	bl	8008398 <__malloc_lock>
 8007ff8:	4a1c      	ldr	r2, [pc, #112]	; (800806c <_free_r+0x8c>)
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	b933      	cbnz	r3, 800800c <_free_r+0x2c>
 8007ffe:	6063      	str	r3, [r4, #4]
 8008000:	6014      	str	r4, [r2, #0]
 8008002:	4628      	mov	r0, r5
 8008004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008008:	f000 b9cc 	b.w	80083a4 <__malloc_unlock>
 800800c:	42a3      	cmp	r3, r4
 800800e:	d908      	bls.n	8008022 <_free_r+0x42>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	1821      	adds	r1, r4, r0
 8008014:	428b      	cmp	r3, r1
 8008016:	bf01      	itttt	eq
 8008018:	6819      	ldreq	r1, [r3, #0]
 800801a:	685b      	ldreq	r3, [r3, #4]
 800801c:	1809      	addeq	r1, r1, r0
 800801e:	6021      	streq	r1, [r4, #0]
 8008020:	e7ed      	b.n	8007ffe <_free_r+0x1e>
 8008022:	461a      	mov	r2, r3
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b10b      	cbz	r3, 800802c <_free_r+0x4c>
 8008028:	42a3      	cmp	r3, r4
 800802a:	d9fa      	bls.n	8008022 <_free_r+0x42>
 800802c:	6811      	ldr	r1, [r2, #0]
 800802e:	1850      	adds	r0, r2, r1
 8008030:	42a0      	cmp	r0, r4
 8008032:	d10b      	bne.n	800804c <_free_r+0x6c>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	4401      	add	r1, r0
 8008038:	1850      	adds	r0, r2, r1
 800803a:	4283      	cmp	r3, r0
 800803c:	6011      	str	r1, [r2, #0]
 800803e:	d1e0      	bne.n	8008002 <_free_r+0x22>
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	4401      	add	r1, r0
 8008046:	6011      	str	r1, [r2, #0]
 8008048:	6053      	str	r3, [r2, #4]
 800804a:	e7da      	b.n	8008002 <_free_r+0x22>
 800804c:	d902      	bls.n	8008054 <_free_r+0x74>
 800804e:	230c      	movs	r3, #12
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	e7d6      	b.n	8008002 <_free_r+0x22>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	1821      	adds	r1, r4, r0
 8008058:	428b      	cmp	r3, r1
 800805a:	bf01      	itttt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	1809      	addeq	r1, r1, r0
 8008062:	6021      	streq	r1, [r4, #0]
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	6054      	str	r4, [r2, #4]
 8008068:	e7cb      	b.n	8008002 <_free_r+0x22>
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20000368 	.word	0x20000368

08008070 <sbrk_aligned>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4e0e      	ldr	r6, [pc, #56]	; (80080ac <sbrk_aligned+0x3c>)
 8008074:	460c      	mov	r4, r1
 8008076:	6831      	ldr	r1, [r6, #0]
 8008078:	4605      	mov	r5, r0
 800807a:	b911      	cbnz	r1, 8008082 <sbrk_aligned+0x12>
 800807c:	f000 f88c 	bl	8008198 <_sbrk_r>
 8008080:	6030      	str	r0, [r6, #0]
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	f000 f887 	bl	8008198 <_sbrk_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d00a      	beq.n	80080a4 <sbrk_aligned+0x34>
 800808e:	1cc4      	adds	r4, r0, #3
 8008090:	f024 0403 	bic.w	r4, r4, #3
 8008094:	42a0      	cmp	r0, r4
 8008096:	d007      	beq.n	80080a8 <sbrk_aligned+0x38>
 8008098:	1a21      	subs	r1, r4, r0
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f87c 	bl	8008198 <_sbrk_r>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d101      	bne.n	80080a8 <sbrk_aligned+0x38>
 80080a4:	f04f 34ff 	mov.w	r4, #4294967295
 80080a8:	4620      	mov	r0, r4
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	2000036c 	.word	0x2000036c

080080b0 <_malloc_r>:
 80080b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	1ccd      	adds	r5, r1, #3
 80080b6:	f025 0503 	bic.w	r5, r5, #3
 80080ba:	3508      	adds	r5, #8
 80080bc:	2d0c      	cmp	r5, #12
 80080be:	bf38      	it	cc
 80080c0:	250c      	movcc	r5, #12
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	4607      	mov	r7, r0
 80080c6:	db01      	blt.n	80080cc <_malloc_r+0x1c>
 80080c8:	42a9      	cmp	r1, r5
 80080ca:	d905      	bls.n	80080d8 <_malloc_r+0x28>
 80080cc:	230c      	movs	r3, #12
 80080ce:	2600      	movs	r6, #0
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4630      	mov	r0, r6
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	4e2e      	ldr	r6, [pc, #184]	; (8008194 <_malloc_r+0xe4>)
 80080da:	f000 f95d 	bl	8008398 <__malloc_lock>
 80080de:	6833      	ldr	r3, [r6, #0]
 80080e0:	461c      	mov	r4, r3
 80080e2:	bb34      	cbnz	r4, 8008132 <_malloc_r+0x82>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4638      	mov	r0, r7
 80080e8:	f7ff ffc2 	bl	8008070 <sbrk_aligned>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	4604      	mov	r4, r0
 80080f0:	d14d      	bne.n	800818e <_malloc_r+0xde>
 80080f2:	6834      	ldr	r4, [r6, #0]
 80080f4:	4626      	mov	r6, r4
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	d140      	bne.n	800817c <_malloc_r+0xcc>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	4631      	mov	r1, r6
 80080fe:	4638      	mov	r0, r7
 8008100:	eb04 0803 	add.w	r8, r4, r3
 8008104:	f000 f848 	bl	8008198 <_sbrk_r>
 8008108:	4580      	cmp	r8, r0
 800810a:	d13a      	bne.n	8008182 <_malloc_r+0xd2>
 800810c:	6821      	ldr	r1, [r4, #0]
 800810e:	3503      	adds	r5, #3
 8008110:	1a6d      	subs	r5, r5, r1
 8008112:	f025 0503 	bic.w	r5, r5, #3
 8008116:	3508      	adds	r5, #8
 8008118:	2d0c      	cmp	r5, #12
 800811a:	bf38      	it	cc
 800811c:	250c      	movcc	r5, #12
 800811e:	4638      	mov	r0, r7
 8008120:	4629      	mov	r1, r5
 8008122:	f7ff ffa5 	bl	8008070 <sbrk_aligned>
 8008126:	3001      	adds	r0, #1
 8008128:	d02b      	beq.n	8008182 <_malloc_r+0xd2>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	442b      	add	r3, r5
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	e00e      	b.n	8008150 <_malloc_r+0xa0>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	1b52      	subs	r2, r2, r5
 8008136:	d41e      	bmi.n	8008176 <_malloc_r+0xc6>
 8008138:	2a0b      	cmp	r2, #11
 800813a:	d916      	bls.n	800816a <_malloc_r+0xba>
 800813c:	1961      	adds	r1, r4, r5
 800813e:	42a3      	cmp	r3, r4
 8008140:	6025      	str	r5, [r4, #0]
 8008142:	bf18      	it	ne
 8008144:	6059      	strne	r1, [r3, #4]
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	bf08      	it	eq
 800814a:	6031      	streq	r1, [r6, #0]
 800814c:	5162      	str	r2, [r4, r5]
 800814e:	604b      	str	r3, [r1, #4]
 8008150:	4638      	mov	r0, r7
 8008152:	f104 060b 	add.w	r6, r4, #11
 8008156:	f000 f925 	bl	80083a4 <__malloc_unlock>
 800815a:	f026 0607 	bic.w	r6, r6, #7
 800815e:	1d23      	adds	r3, r4, #4
 8008160:	1af2      	subs	r2, r6, r3
 8008162:	d0b6      	beq.n	80080d2 <_malloc_r+0x22>
 8008164:	1b9b      	subs	r3, r3, r6
 8008166:	50a3      	str	r3, [r4, r2]
 8008168:	e7b3      	b.n	80080d2 <_malloc_r+0x22>
 800816a:	6862      	ldr	r2, [r4, #4]
 800816c:	42a3      	cmp	r3, r4
 800816e:	bf0c      	ite	eq
 8008170:	6032      	streq	r2, [r6, #0]
 8008172:	605a      	strne	r2, [r3, #4]
 8008174:	e7ec      	b.n	8008150 <_malloc_r+0xa0>
 8008176:	4623      	mov	r3, r4
 8008178:	6864      	ldr	r4, [r4, #4]
 800817a:	e7b2      	b.n	80080e2 <_malloc_r+0x32>
 800817c:	4634      	mov	r4, r6
 800817e:	6876      	ldr	r6, [r6, #4]
 8008180:	e7b9      	b.n	80080f6 <_malloc_r+0x46>
 8008182:	230c      	movs	r3, #12
 8008184:	4638      	mov	r0, r7
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	f000 f90c 	bl	80083a4 <__malloc_unlock>
 800818c:	e7a1      	b.n	80080d2 <_malloc_r+0x22>
 800818e:	6025      	str	r5, [r4, #0]
 8008190:	e7de      	b.n	8008150 <_malloc_r+0xa0>
 8008192:	bf00      	nop
 8008194:	20000368 	.word	0x20000368

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	2300      	movs	r3, #0
 800819c:	4d05      	ldr	r5, [pc, #20]	; (80081b4 <_sbrk_r+0x1c>)
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7fa f8ba 	bl	800231c <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20000370 	.word	0x20000370

080081b8 <_raise_r>:
 80081b8:	291f      	cmp	r1, #31
 80081ba:	b538      	push	{r3, r4, r5, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	d904      	bls.n	80081cc <_raise_r+0x14>
 80081c2:	2316      	movs	r3, #22
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ce:	b112      	cbz	r2, 80081d6 <_raise_r+0x1e>
 80081d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081d4:	b94b      	cbnz	r3, 80081ea <_raise_r+0x32>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f830 	bl	800823c <_getpid_r>
 80081dc:	462a      	mov	r2, r5
 80081de:	4601      	mov	r1, r0
 80081e0:	4620      	mov	r0, r4
 80081e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e6:	f000 b817 	b.w	8008218 <_kill_r>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d00a      	beq.n	8008204 <_raise_r+0x4c>
 80081ee:	1c59      	adds	r1, r3, #1
 80081f0:	d103      	bne.n	80081fa <_raise_r+0x42>
 80081f2:	2316      	movs	r3, #22
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7e7      	b.n	80081ca <_raise_r+0x12>
 80081fa:	2400      	movs	r4, #0
 80081fc:	4628      	mov	r0, r5
 80081fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008202:	4798      	blx	r3
 8008204:	2000      	movs	r0, #0
 8008206:	e7e0      	b.n	80081ca <_raise_r+0x12>

08008208 <raise>:
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <raise+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f7ff bfd3 	b.w	80081b8 <_raise_r>
 8008212:	bf00      	nop
 8008214:	2000000c 	.word	0x2000000c

08008218 <_kill_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	2300      	movs	r3, #0
 800821c:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_kill_r+0x20>)
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f7fa f82e 	bl	8002286 <_kill>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d102      	bne.n	8008234 <_kill_r+0x1c>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	b103      	cbz	r3, 8008234 <_kill_r+0x1c>
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	20000370 	.word	0x20000370

0800823c <_getpid_r>:
 800823c:	f7fa b81c 	b.w	8002278 <_getpid>

08008240 <__sread>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f8b2 	bl	80083b0 <_read_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	bfab      	itete	ge
 8008250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008252:	89a3      	ldrhlt	r3, [r4, #12]
 8008254:	181b      	addge	r3, r3, r0
 8008256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800825a:	bfac      	ite	ge
 800825c:	6563      	strge	r3, [r4, #84]	; 0x54
 800825e:	81a3      	strhlt	r3, [r4, #12]
 8008260:	bd10      	pop	{r4, pc}

08008262 <__swrite>:
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	461f      	mov	r7, r3
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	4605      	mov	r5, r0
 800826c:	05db      	lsls	r3, r3, #23
 800826e:	460c      	mov	r4, r1
 8008270:	4616      	mov	r6, r2
 8008272:	d505      	bpl.n	8008280 <__swrite+0x1e>
 8008274:	2302      	movs	r3, #2
 8008276:	2200      	movs	r2, #0
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	f000 f868 	bl	8008350 <_lseek_r>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	4632      	mov	r2, r6
 8008284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	4628      	mov	r0, r5
 800828c:	463b      	mov	r3, r7
 800828e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	f000 b817 	b.w	80082c8 <_write_r>

0800829a <__sseek>:
 800829a:	b510      	push	{r4, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 f855 	bl	8008350 <_lseek_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	bf15      	itete	ne
 80082ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082b6:	81a3      	strheq	r3, [r4, #12]
 80082b8:	bf18      	it	ne
 80082ba:	81a3      	strhne	r3, [r4, #12]
 80082bc:	bd10      	pop	{r4, pc}

080082be <__sclose>:
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 b813 	b.w	80082ec <_close_r>
	...

080082c8 <_write_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	2200      	movs	r2, #0
 80082d2:	4d05      	ldr	r5, [pc, #20]	; (80082e8 <_write_r+0x20>)
 80082d4:	602a      	str	r2, [r5, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f7f9 fd14 	bl	8001d04 <_write>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_write_r+0x1e>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_write_r+0x1e>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000370 	.word	0x20000370

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	; (8008308 <_close_r+0x1c>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7f9 ffdf 	bl	80022ba <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20000370 	.word	0x20000370

0800830c <_fstat_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	2300      	movs	r3, #0
 8008310:	4d06      	ldr	r5, [pc, #24]	; (800832c <_fstat_r+0x20>)
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f7f9 ffd9 	bl	80022d0 <_fstat>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d102      	bne.n	8008328 <_fstat_r+0x1c>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b103      	cbz	r3, 8008328 <_fstat_r+0x1c>
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	20000370 	.word	0x20000370

08008330 <_isatty_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	2300      	movs	r3, #0
 8008334:	4d05      	ldr	r5, [pc, #20]	; (800834c <_isatty_r+0x1c>)
 8008336:	4604      	mov	r4, r0
 8008338:	4608      	mov	r0, r1
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7f9 ffd7 	bl	80022ee <_isatty>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_isatty_r+0x1a>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_isatty_r+0x1a>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000370 	.word	0x20000370

08008350 <_lseek_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	2200      	movs	r2, #0
 800835a:	4d05      	ldr	r5, [pc, #20]	; (8008370 <_lseek_r+0x20>)
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7f9 ffcf 	bl	8002302 <_lseek>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_lseek_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_lseek_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20000370 	.word	0x20000370

08008374 <__ascii_mbtowc>:
 8008374:	b082      	sub	sp, #8
 8008376:	b901      	cbnz	r1, 800837a <__ascii_mbtowc+0x6>
 8008378:	a901      	add	r1, sp, #4
 800837a:	b142      	cbz	r2, 800838e <__ascii_mbtowc+0x1a>
 800837c:	b14b      	cbz	r3, 8008392 <__ascii_mbtowc+0x1e>
 800837e:	7813      	ldrb	r3, [r2, #0]
 8008380:	600b      	str	r3, [r1, #0]
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	1e10      	subs	r0, r2, #0
 8008386:	bf18      	it	ne
 8008388:	2001      	movne	r0, #1
 800838a:	b002      	add	sp, #8
 800838c:	4770      	bx	lr
 800838e:	4610      	mov	r0, r2
 8008390:	e7fb      	b.n	800838a <__ascii_mbtowc+0x16>
 8008392:	f06f 0001 	mvn.w	r0, #1
 8008396:	e7f8      	b.n	800838a <__ascii_mbtowc+0x16>

08008398 <__malloc_lock>:
 8008398:	4801      	ldr	r0, [pc, #4]	; (80083a0 <__malloc_lock+0x8>)
 800839a:	f7ff ba00 	b.w	800779e <__retarget_lock_acquire_recursive>
 800839e:	bf00      	nop
 80083a0:	20000364 	.word	0x20000364

080083a4 <__malloc_unlock>:
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <__malloc_unlock+0x8>)
 80083a6:	f7ff b9fb 	b.w	80077a0 <__retarget_lock_release_recursive>
 80083aa:	bf00      	nop
 80083ac:	20000364 	.word	0x20000364

080083b0 <_read_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	4d05      	ldr	r5, [pc, #20]	; (80083d0 <_read_r+0x20>)
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f9 fc86 	bl	8001cd0 <_read>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_read_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_read_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20000370 	.word	0x20000370

080083d4 <__ascii_wctomb>:
 80083d4:	4603      	mov	r3, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	b141      	cbz	r1, 80083ec <__ascii_wctomb+0x18>
 80083da:	2aff      	cmp	r2, #255	; 0xff
 80083dc:	d904      	bls.n	80083e8 <__ascii_wctomb+0x14>
 80083de:	228a      	movs	r2, #138	; 0x8a
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	4770      	bx	lr
 80083e8:	2001      	movs	r0, #1
 80083ea:	700a      	strb	r2, [r1, #0]
 80083ec:	4770      	bx	lr
	...

080083f0 <round>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80083f6:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80083fa:	2c13      	cmp	r4, #19
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4606      	mov	r6, r0
 8008402:	460d      	mov	r5, r1
 8008404:	dc19      	bgt.n	800843a <round+0x4a>
 8008406:	2c00      	cmp	r4, #0
 8008408:	da09      	bge.n	800841e <round+0x2e>
 800840a:	3401      	adds	r4, #1
 800840c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008410:	d103      	bne.n	800841a <round+0x2a>
 8008412:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008416:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800841a:	2200      	movs	r2, #0
 800841c:	e02a      	b.n	8008474 <round+0x84>
 800841e:	4917      	ldr	r1, [pc, #92]	; (800847c <round+0x8c>)
 8008420:	4121      	asrs	r1, r4
 8008422:	ea03 0001 	and.w	r0, r3, r1
 8008426:	4302      	orrs	r2, r0
 8008428:	d010      	beq.n	800844c <round+0x5c>
 800842a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800842e:	fa42 f404 	asr.w	r4, r2, r4
 8008432:	4423      	add	r3, r4
 8008434:	ea23 0301 	bic.w	r3, r3, r1
 8008438:	e7ef      	b.n	800841a <round+0x2a>
 800843a:	2c33      	cmp	r4, #51	; 0x33
 800843c:	dd09      	ble.n	8008452 <round+0x62>
 800843e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008442:	d103      	bne.n	800844c <round+0x5c>
 8008444:	f7f7 fe92 	bl	800016c <__adddf3>
 8008448:	4606      	mov	r6, r0
 800844a:	460d      	mov	r5, r1
 800844c:	4630      	mov	r0, r6
 800844e:	4629      	mov	r1, r5
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008452:	f04f 31ff 	mov.w	r1, #4294967295
 8008456:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800845a:	40f9      	lsrs	r1, r7
 800845c:	4208      	tst	r0, r1
 800845e:	d0f5      	beq.n	800844c <round+0x5c>
 8008460:	2001      	movs	r0, #1
 8008462:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008466:	fa00 f404 	lsl.w	r4, r0, r4
 800846a:	1912      	adds	r2, r2, r4
 800846c:	bf28      	it	cs
 800846e:	181b      	addcs	r3, r3, r0
 8008470:	ea22 0201 	bic.w	r2, r2, r1
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	e7e6      	b.n	8008448 <round+0x58>
 800847a:	bf00      	nop
 800847c:	000fffff 	.word	0x000fffff

08008480 <trunc>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8008486:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800848a:	2a13      	cmp	r2, #19
 800848c:	4603      	mov	r3, r0
 800848e:	460c      	mov	r4, r1
 8008490:	dc10      	bgt.n	80084b4 <trunc+0x34>
 8008492:	2a00      	cmp	r2, #0
 8008494:	bfb3      	iteet	lt
 8008496:	2000      	movlt	r0, #0
 8008498:	2000      	movge	r0, #0
 800849a:	4b10      	ldrge	r3, [pc, #64]	; (80084dc <trunc+0x5c>)
 800849c:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 80084a0:	bfa4      	itt	ge
 80084a2:	fa43 f202 	asrge.w	r2, r3, r2
 80084a6:	ea24 0102 	bicge.w	r1, r4, r2
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	4618      	mov	r0, r3
 80084b0:	4621      	mov	r1, r4
 80084b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b4:	2a33      	cmp	r2, #51	; 0x33
 80084b6:	dd07      	ble.n	80084c8 <trunc+0x48>
 80084b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80084bc:	d1f7      	bne.n	80084ae <trunc+0x2e>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	f7f7 fe53 	bl	800016c <__adddf3>
 80084c6:	e7f0      	b.n	80084aa <trunc+0x2a>
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80084d0:	fa22 f505 	lsr.w	r5, r2, r5
 80084d4:	ea20 0005 	bic.w	r0, r0, r5
 80084d8:	e7e7      	b.n	80084aa <trunc+0x2a>
 80084da:	bf00      	nop
 80084dc:	000fffff 	.word	0x000fffff

080084e0 <_init>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr

080084ec <_fini>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr
